* Intro

** Technical notes on that Org-mode file

#+BEGIN_QUOTE
For faster tangling of large Org mode files, set =org-babel-use-quick-and-dirty-noweb-expansion= variable to =t=. The
speedup comes at the expense of not correctly resolving inherited values of the :noweb-ref header argument.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle no :results output silent
(setq org-babel-use-quick-and-dirty-noweb-expansion t)
#+END_SRC

Another option to speed up tangling is to tangle just the current source block, using either =C-u C-x C-m C-c= or =C-u
M-x org-babel-tangle=.

** Links

- http://adventofcode.com/2017; to support: http://adventofcode.com/2017/support
- https://www.reddit.com/r/adventofcode/
- Other repos with AoC in Scheme:
  - https://github.com/shawnw/advent2017 (in Kawa)
  - https://github.com/zacgeis/advent-of-code-2017
  - https://github.com/ramrunner/AOC2017 (incomplete)
- And a repo with optimized solutions in C:
  https://github.com/Voltara/advent2017-fast

*** Helpers

- Peter Norwig's Python Notebook for solutions for 2016:
  http://nbviewer.jupyter.org/url/norvig.com/ipython/Advent%20of%20Code.ipynb

- Integer series:
  https://oeis.org/

- Google Code Jam solutions and template for Gauche Scheme:
  + https://github.com/plaster/google-code-jam-solutions
  + https://github.com/plaster/google-code-jam-solutions/blob/master/lib/codejam.scm

** Summary and Learnings

- Gauche Scheme is a really interesting Scheme implementation: it's featureful with a good documentation and well
  thought out extensions. It makes one miss CL only rarely - still SBCL shines with its compile time type checks,
  the =loop= macro, Slime and raw performance. And using a language/implementation with limited performance is
  sometimes a real risk for tasks as AoC.

- Scheme itself with all the SRFIs - and with a complete implementation such as Gauche - is today a very practical
  language. Especially named lets with their assertion to not overflow the stack are very useful especially in
  algorithmic-focused programming tasks as given here. Documentation is mostly good enough (still no comparison to
  the CL HyperSpec, which also has most of CL at one perfectly indexed place), and code snippets can often be found
  on SO or Github.

  And even if I did use Scheme before, I didn't use Gauche Scheme before - so I had to spend a lot of time going through
  the documentation screening for library functions of potential use for a task at hand. As expected knowing not only
  the language but also the library *and* having quick access to the documentation of most or all library functions is
  really key for finding solutions quickly.

  Checking the solutions in Python shows a huge advantage for Python users, who have a much larger library - especially
  for mathematics-based and ML-related algorithms - at their disposal.

  Racket, which was also used by some AoC particpants, seems to be a great alternative. Still I've used Gauche here to
  train myself on "real" Scheme, as I try to sneak it in for work tasks here and there. And the most interesting
  use-case here is that I can use - and with some precautions even interconnect programs using - the same language with
  Java, .Net, standalone and for scripting (Linux, Windows). This would not work with Racket - and for the same reason
  I started to look more closely into the Scheme world, as CL cannot be applied so broadly (and yes, I know and dabbled
  a bit with ABCL and ECL).

- Gauche Scheme as any standard Scheme does not support compile time type checking. Interestingly I nevertheless had
  only one type error in all tasks (using =edge= as a variable with an unknown binding at the given scope, where it was
  processed as the record type =edge=; this happened before I started to name record types as =<type>=). Still I always
  had a slightly uncomfortable feeling, but obviously not sufficiently uncomfortable in order to start using the
  =check-type= macro pervasively.

  On the other hand for small programs with the short lifetime of one day saving brain-cycles for early fixation and
  potential changing of types Scheme's dynamic typing might very well be an overall plus - I'd like to perform an AoC
  with e.g. Ocaml to find that out.

  Overall the optional typing supported by CL as well as - significantly more limited - by Bigloo Scheme and Kawa Scheme
  seems to be the best compromise for tasks as those given here.

- Org-mode: this was a mixed bag - with the pros and cons that can be expected even without really trying. In short:

  - Pros: single file search and replace (over documentation, Makefile and source files), "one more level of
    indirection" by including source blocks which is especially helpful for the part-1/part-2 separation, simple use of
    templates.

  - Cons: even with a reasonable key code to quickly switch between source code editing and Org-mode editing this
    separation is often an annoyance, the source block inclusion is as often helpful as it is distracting, tangling
    performance is OK with the settings noted above - but still long enough to be sometimes distracting.

  Overall I would probably not use the Org-mode aproach for an AoC again - this approach shines the brightest in cases
  where the potential to maintain documentation and code together in one document is of more use, simply because
  documentation is more important. Another helful feature for some projects - but not this one here - is the option to
  share source blocks not only within one language environment - probably all language environments have support for
  that -, but between e.g. different language or between source code and configuration such as makefiles.

- More often than not, smart solutions on part 1 do not pay out, as part 2 often requires an explicit solution anyway.

- Major bugs: I had two cases where I did spend considerable time with debugging.

  - Using the incorrect format flag =~s= instead of =~a= on day 14; see there for more details. That's exactly the type
    of error that can only be found after leaving the keyboard for a few hours - and continuing debugging later.

  - Again on Day 14 I forgot the size parameter for =integer->list=, which made the implementation loose leading 0-bits;
    see there for more details.

  Otherwise errors were caused mainly either sloppy reading of the task description or the usual off-by-one errors that
  come with tasks usually defined by riddles.

  Excluding debug time for day 14, the task of Day 21 took by far the most time with all its ugly data re-arranging.
  Then comes Day 19 where I spend a lot of time for a quite complex part 1 solution, only to find out that that was not
  required for part 2. And finally I tried for too long to avoid translating the given assembly to a C program, as it
  should have been more obvious that the Scheme simulation cannot be made fast enough.

  Still at least for AoC 2017 it turned out that it's usually not useful to spend much time for quick/mathematics-based
  solution for part 1, since most of the time part 2 requires some explicit implementation anyway.

** Makefile

#+BEGIN_SRC emacs-lisp :tangle no :results output silent
(setq org-src-preserve-indentation t)
#+END_SRC

/Note:/ I'm not using R7RS, since it requieres me to manually add lots of modules which are included by default
by Gauche's default mode.

/Note:/ See [[# https://practical-scheme.net/gauche/man/gauche-refe/Invoking-Gosh.html#Invoking-Gosh][here]] for Gauche Scheme command line arguments.

#+begin_src makefile :tangle tangled/Makefile
# ============================================================================
# File:                Makefile
# Purpose:             Makefile for AoC 2017 solutions
# Note:                DO NOT EDIT. GENERATED FROM aoc2017.org
# ============================================================================

SCM = GAUCHE_KEYWORD_IS_SYMBOL=true gosh --
TSCM = GAUCHE_KEYWORD_IS_SYMBOL=true /usr/bin/time gosh --
RSCM = GAUCHE_KEYWORD_IS_SYMBOL=true rlwrap gosh --

all : day1-part1 day1-part2 day2-part1 day2-part2 day3-part1 day3-part2 day4-part1 day4-part2       \
	day5-part1 day5-part2 day6-part1 day6-part2 day7-part1 day7-part2 day8-part1 day8-part2         \
	day9-part1 day9-part2 day10-part1 day10-part2 day11-part1 day11-part2 day12-part1 day12-part2   \
	day13-part1 day14-part1 day14-part2 day16-part1 day16-part2                                     \
	day17-part1 day17-part2 day18-part1 day18-part2 day19-part1 day19-part2 day20-part1 day20-part2 \
    day22-part1 day23-part1 day24-part1 day24-part2                                                 \
    day25-part1                                                                                     \
    day5-part2-bigloo day5-part2-kawa

# including the long-running ones
really-all : all day13-part2 day15-part1 day15-part2 day23-part2

# not yet complete: day21-part1 day21-part2 

day1-part1 :
	@$(SCM) tangled/day1-part1.scm 1122 1111 1234 91212129
	@$(SCM) tangled/day1-part1.scm 29917128875332952564321392569634257121244516819997569284938677239676779378822158323549832814412597817651244117851771257438674567254146559419528411463781241159837576747416543451994579655175322397355255587935456185669334559882554936642122347526466965746273596321419312386992922582836979771421518356285534285825212798113159911272923448284681544657616654285632235958355867722479252256292311384799669645293812691169936746744856227797779513997329663235176153745581296191298956836998758194274865327383988992499115472925731787228592624911829221985925935268785757854569131538763133427434848767475989173579655375125972435359317237712667658828722623837448758528395981635746922144957695238318954845799697142491972626942976788997427135797297649149849739186827185775786254552866371729489943881272817466129271912247236569141713377483469323737384967871876982476485658337183881519295728697121462266226452265259877781881868585356333494916519693683238733823362353424927852348119426673294798416314637799636344448941782774113142925315947664869341363354235389597893211532745789957591898692253157726576488811769461354938575527273474399545366389515353657644736458182565245181653996192644851687269744491856672563885457872883368415631469696994757636288575816146927747179133188841148212825453859269643736199836818121559198563122442483528316837885842696283932779475955796132242682934853291737434482287486978566652161245555856779844813283979453489221189332412315117573259531352875384444264457373153263878999332444178577127433891164266387721116357278222665798584824336957648454426665495982221179382794158366894875864761266695773155813823291684611617853255857774422185987921219618596814446229556938354417164971795294741898631698578989231245376826359179266783767935932788845143542293569863998773276365886375624694329228686284863341465994571635379257258559894197638117333711626435669415976255967412994139131385751822134927578932521461677534945328228131973291962134523589491173343648964449149716696761218423314765168285342711137126239639867897341514131244859826663281981251614843274762372382114258543828157464392

day1-part2 :
	@$(SCM) tangled/day1-part2.scm 1212 1221 123425 123123 12131415
	@$(SCM) tangled/day1-part2.scm

day2-part1 :
	@$(SCM) tangled/day2-part1.scm tangled/day2-part1-exercise.txt
	@$(SCM) tangled/day2-part1.scm tangled/day2-puzzle.txt

day2-part2 :
	@$(SCM) tangled/day2-part2.scm tangled/day2-part2-exercise.txt
	@$(SCM) tangled/day2-part2.scm tangled/day2-puzzle.txt

day3-part1 :
	@$(SCM) tangled/day3-part1.scm 1 12 23 1024
	@$(SCM) tangled/day3-part1.scm 265149

day3-part2 :
	@$(SCM) tangled/day3-part2.scm ex 1 2 3 4 5
	@$(SCM) tangled/day3-part2.scm 265149

day4-part1 :
	@$(SCM) tangled/day4-part1.scm tangled/day4-part1-exercise.txt
	@$(SCM) tangled/day4-part1.scm tangled/day4-puzzle.txt

day4-part2 :
	@$(SCM) tangled/day4-part2.scm tangled/day4-part2-exercise.txt
	@$(SCM) tangled/day4-part2.scm tangled/day4-puzzle.txt

day5-part1 :
	@$(SCM) tangled/day5-part1.scm tangled/day5-part1-exercise.txt
	@$(SCM) tangled/day5-part1.scm tangled/day5-puzzle.txt

day5-part2 :
	@$(SCM) tangled/day5-part2.scm tangled/day5-part1-exercise.txt
	@$(TSCM) tangled/day5-part2.scm tangled/day5-puzzle.txt

day5-part2-bigloo : tangled/day5-part2-bigloo
	@$< tangled/day5-part1-exercise.txt
	@/usr/bin/time $< tangled/day5-puzzle.txt

tangled/day5-part2-bigloo : tangled/day5-part2-bigloo.scm
	@bigloo $< -o $@

# As noted in "Alternative Kawa Implementation for Day 5, Part 2", compiling did not work,
# so for now loading the script instead:
day5-part2-kawa :
	cd tangled/ &&               kawa --full-tailcalls --no-warn-unused -f $@.scm day5-part1-exercise.txt
	cd tangled/ && /usr/bin/time kawa --full-tailcalls --no-warn-unused -f $@.scm day5-puzzle.txt

day6-part1 :
	@$(SCM) tangled/day6-part1.scm tangled/day6-part1-exercise.txt
	@$(SCM) tangled/day6-part1.scm tangled/day6-puzzle.txt

day6-part2 :
	@$(SCM) tangled/day6-part2.scm tangled/day6-part1-exercise.txt
	@$(SCM) tangled/day6-part2.scm tangled/day6-puzzle.txt

day7-part1 :
	@$(SCM) tangled/day7-part1.scm tangled/day7-part1-exercise.txt
	@$(SCM) tangled/day7-part1.scm tangled/day7-puzzle.txt

day7-part2 :
	@$(SCM) tangled/day7-part2.scm tangled/day7-part1-exercise.txt
	@$(SCM) tangled/day7-part2.scm tangled/day7-puzzle.txt

day8-part1 :
	@$(SCM) tangled/day8-part1.scm tangled/day8-part1-exercise.txt
	@$(SCM) tangled/day8-part1.scm tangled/day8-puzzle.txt

day8-part2 :
	@$(SCM) tangled/day8-part2.scm tangled/day8-part1-exercise.txt
	@$(SCM) tangled/day8-part2.scm tangled/day8-puzzle.txt

day9-part1 :
	@$(SCM) tangled/day9-part1.scm tangled/day9-part1-exercise.txt
	@$(SCM) tangled/day9-part1.scm tangled/day9-puzzle.txt

day9-part2 :
	@$(SCM) tangled/day9-part2.scm tangled/day9-part2-exercise.txt
	@$(SCM) tangled/day9-part2.scm tangled/day9-puzzle.txt

day9-as-posted :
	@$(SCM) tangled/day9-part2-as-posted.scm tangled/day9-part2-exercise.txt
	@$(SCM) tangled/day9-part2-as-posted.scm tangled/day9-puzzle.txt

day10-part1 :
	@$(SCM) tangled/day10-part1.scm ex tangled/day10-part1-exercise.txt
	@$(SCM) tangled/day10-part1.scm pz tangled/day10-puzzle.txt

day10-part2 :
#	@$(SCM) tangled/day10-part2.scm ex tangled/day10-part1-exercise.txt
	@$(SCM) tangled/day10-part2.scm pz tangled/day10-puzzle.txt

day11-part1 :
	@$(SCM) tangled/day11-part1.scm tangled/day11-part1-exercise.txt
	@$(SCM) tangled/day11-part1.scm tangled/day11-puzzle.txt

day11-part2 :
	@$(SCM) tangled/day11-part2.scm tangled/day11-part1-exercise.txt
	@$(SCM) tangled/day11-part2.scm tangled/day11-puzzle.txt

day12-part1 :
	@$(SCM) tangled/day12-part1.scm tangled/day12-part1-exercise.txt
	@$(SCM) tangled/day12-part1.scm tangled/day12-puzzle.txt

day12-part2 :
	@$(SCM) tangled/day12-part2.scm tangled/day12-part1-exercise.txt
	@$(SCM) tangled/day12-part2.scm tangled/day12-puzzle.txt

day13-part1 :
	@$(SCM) tangled/day13-part1.scm tangled/day13-part1-exercise.txt
	@$(SCM) tangled/day13-part1.scm tangled/day13-puzzle.txt

day13-part2 :
	@$(SCM) tangled/day13-part2.scm tangled/day13-part1-exercise.txt
	@$(TSCM) tangled/day13-part2.scm tangled/day13-puzzle.txt

day14-part1 :
	@$(SCM) tangled/day14-part1.scm ex
	@$(SCM) tangled/day14-part1.scm pz

day14-part2 :
	@$(SCM) tangled/day14-part2.scm ex
	@$(SCM) tangled/day14-part2.scm pz

day15-part1 :
	@$(TSCM) tangled/day15-part1.scm ex
	@$(TSCM) tangled/day15-part1.scm pz

day15-part2 :
	@$(TSCM) tangled/day15-part2.scm ex
	@$(TSCM) tangled/day15-part2.scm pz

day15-part2-as-posted :
	@$(TSCM) tangled/day15-part2-as-posted.scm

day16-part1 :
	@$(SCM) tangled/day16-part1.scm ex tangled/day16-part1-exercise.txt
	@$(SCM) tangled/day16-part1.scm pz tangled/day16-puzzle.txt

day16-part2 :
	@$(SCM) tangled/day16-part2.scm ex tangled/day16-part1-exercise.txt
	@$(TSCM) tangled/day16-part2.scm pz tangled/day16-puzzle.txt

day17-part1 :
	@$(SCM) tangled/day17-part1.scm ex 3
	@$(SCM) tangled/day17-part1.scm pz 359

day17-part2 :
	@$(TSCM) tangled/day17-part2.scm ex 3
	@$(TSCM) tangled/day17-part2.scm pz 359

day18-part1 :
	@$(SCM) tangled/day18-part1.scm ex tangled/day18-part1-exercise.txt
	@$(SCM) tangled/day18-part1.scm pz tangled/day18-puzzle.txt

day18-part2 :
	@$(SCM) tangled/day18-part2.scm ex tangled/day18-part2-exercise.txt
	@$(SCM) tangled/day18-part2.scm pz tangled/day18-puzzle.txt

day19-part1 :
	@$(SCM) tangled/day19-part1.scm ex tangled/day19-part1-exercise.txt
	@$(SCM) tangled/day19-part1.scm pz tangled/day19-puzzle.txt

day19-part2 :
	@$(SCM) tangled/day19-part2.scm ex tangled/day19-part1-exercise.txt
	@$(SCM) tangled/day19-part2.scm pz tangled/day19-puzzle.txt

day20-part1 :
	@$(SCM) tangled/day20-part1.scm ex tangled/day20-part1-exercise.txt
	@$(TSCM) tangled/day20-part1.scm pz tangled/day20-puzzle.txt

day20-part2 :
	@$(SCM) tangled/day20-part2.scm ex tangled/day20-part2-exercise.txt
	@$(SCM) tangled/day20-part2.scm pz tangled/day20-puzzle.txt

day21-part1 :
	@$(SCM) tangled/day21-part1.scm ex tangled/day21-part1-exercise.txt
#	@$(SCM) tangled/day21-part1.scm pz tangled/day21-puzzle.txt

day21-part2 :
	@$(SCM) tangled/day21-part2.scm ex tangled/day21-part2-exercise.txt
#	@$(SCM) tangled/day21-part2.scm pz tangled/day21-puzzle.txt

day22-part1 :
	@$(SCM) tangled/day22-part1.scm ex 7 tangled/day22-part1-exercise.txt
	@$(SCM) tangled/day22-part1.scm ex 70 tangled/day22-part1-exercise.txt
	@$(SCM) tangled/day22-part1.scm ex 10000 tangled/day22-part1-exercise.txt
	@$(SCM) tangled/day22-part1.scm pz 10000 tangled/day22-puzzle.txt

day22-part2 :
	@$(SCM) tangled/day22-part2.scm ex 100 tangled/day22-part1-exercise.txt
	@$(TSCM) tangled/day22-part2.scm ex 10000000 tangled/day22-part1-exercise.txt
	@$(TSCM) tangled/day22-part2.scm pz 10000000 tangled/day22-puzzle.txt

day23-part1 :
	@$(SCM) tangled/day23-part1.scm pz tangled/day23-puzzle.txt

# Run puzzle in Scheme only in debug mode, non-debug mode would take ages.
# To solve the puzzle, I manually converted the assembly to C and optimized a bit from there.
# Note: The C program still runs for some time (~ 15 min).
day23-part2 :
	@$(SCM) tangled/day23-part2.scm ex tangled/day23-puzzle-commented.txt
	gcc -O2 tangled/day23-puzzle-opt-C.c && time ./a.out
	gcc -O2 tangled/day23-puzzle-opt-C.c && time ./a.out 1

day24-part1 :
	@$(SCM) tangled/day24-part1.scm ex tangled/day24-part1-exercise.txt
	@$(SCM) tangled/day24-part1.scm pz tangled/day24-puzzle.txt

day24-part2 :
	@$(SCM) tangled/day24-part2.scm ex tangled/day24-part1-exercise.txt
	@$(SCM) tangled/day24-part2.scm pz tangled/day24-puzzle.txt

day25-part1 :
	@$(SCM) tangled/day25-part1.scm ex tangled/day25-part1-exercise.txt
	@$(TSCM) tangled/day25-part1.scm pz tangled/day25-puzzle.txt

day25-part2 :
	@$(SCM) tangled/day25-part2.scm ex tangled/day25-part1-exercise.txt
	@$(SCM) tangled/day25-part2.scm pz tangled/day25-puzzle.txt

# --- helpers

repl :
	@$(RSCM)

.PHONY : benchmark-grid-moves
run-benchmark-grid-moves :
	@$(SCM) tangled/benchmark-grid-moves.scm

# --- phonies

FORCE:

.PHONY : all really-all repl FORCE
.PHONY : day1-part1 day1-part2 day2-part1 day2-part2 day3-part1 day3-part2 day4-part1 day4-part2    \
	day5-part1 day5-part2 day6-part1 day6-part2 day7-part1 day7-part2 day8-part1 day8-part2		\
	day9-part1 day9-part2 day10-part1 day10-part2 day11-part1 day11-part2 day12-part1 day12-part2	\
	day13-part1 day13-part2 day14-part1 day14-part2 day15-part1 day15-part2 day16-part1 day16-part2 \
	day17-part1 day17-part2 day18-part1 day18-part2 day19-part1 day19-part2 day20-part1 day20-part2 \
    day21-part1 day21-part2 day22-part1 day22-part2 day23-part1 day23-part2 day24-part1 day24-part2 \
    day25-part1 day25-part2

.PHONY : day5-part2-bigloo day5-part2-kawa

#+end_src

#+begin_src shell
make -f tangled/Makefile
#+end_src

** Potentially helpful snippets

*** Gauche

/Note:/ The code below will simply import all modules into the global namespace. To force prefixing of procedures loaded
from modules, one can use e.g.:

#+begin_src
(use gauche.partcont :prefix pc:)
(pc:reset ...)
(pc:shift k ...)
#+end_src

The following source block contains the most used module imports - where not each module is used by each task. I usually
hate too broad imports and I usually want my imports all prefixed - but the first wish does not fit well to "quick hack"
approach of AoC tasks and the second wish seems to be largely unused in the Scheme world.

#+name: src-dflt-uses
#+begin_src scheme
(use srfi-13)                           ;string-concatenate, string-trim-right, ...
(use srfi-60)                           ;Integers as bits: arithmetic-shift number->string integer->list
(use srfi-99)                           ;define-record-type
(use srfi-113)                          ;sets and bags
(use srfi-117)                          ;Queues based on lists - based on Gauche specific data.queue
(use srfi-133)                          ;R7RS vector library
(use gauche.array)                      ;array functions
(use gauche.collection)
(use gauche.sequence)                   ;Sequence framework: map-with-index, find-with-index
(use gauche.uvector)
(use scheme.base)                       ;for flush-output-port
(use util.match)
#+end_src

The following source blocks contain some simple helper macros:

#+name: src-assert
#+begin_src scheme
(define-syntax assert
  (syntax-rules ()
    ((_ e)
     (if e
         e
         (error "Assertion failed" `e e)))
    ((_ e msg)
     (if e
         e
         (error "Assertion failed" msg `e e)))))
#+end_src

#+name: src-ignore-errors
#+begin_src scheme
(define-syntax ignore-errors
  (syntax-rules ()
    ((_ expr ...)
     (guard (exc
             (else #f))
            expr ...))))
#+end_src

#+name: src-check-type
#+begin_src scheme

(define-syntax check-type
  (syntax-rules ()
    ((_ pred value)
     (let ((evaled value))
       (or (pred evaled)
           (error "Wrong type" evaled `value))))
    ((_ msg pred value)
     (let ((evaled value))
       (or (pred evaled)
           (error "Wrong type" msg evaled `value))))))
#+end_src

#+BEGIN_EXAMPLE
(check-type integer? 27)
(check-type string? "foo")
(check-type char? #\F)
(check-type string? 27)                              ;; ERROR: Wrong type 27 27
(check-type "some-string-binding" string? (+ 27 13)) ;; ERROR: Wrong type "some-string-binding" 40 (+ 27 13)
#+END_EXAMPLE

The following source block defines =flatmap= which will come in handy for some of the tasks.
~flatmap~ maps over a sequence and flattens the result by one-level.

#+name: src-flatmap
#+BEGIN_SRC scheme
(define (flatmap proc seq)
  (fold-right append '() (map proc seq)))
#+END_SRC

The following source block contains some simple helper procedures for loading and processing input files:

#+name: src-txt-io
#+begin_src scheme
(define (load-txt name)
  (string-trim-right (call-with-input-file name port->string)))

(define (split-lines str)
  (string-split str #\Newline))

(define (split-words-by line sep)
  (string-split line sep))

(define (split-words line)
  (split-words-by line #[\s]))
#+end_src

The following source block contains some simple helper procedures for working with grids:

#+name: src-grid-moves
#+begin_src scheme

(define (next-pos-cons-x-y pos dir)
  (ecase dir
         ((up)    (cons (car pos)       (+ (cdr pos) 1)))
         ((down)  (cons (car pos)       (- (cdr pos) 1)))
         ((right) (cons (+ (car pos) 1) (cdr pos)))
         ((left)  (cons (- (car pos) 1) (cdr pos)))))

(define (new-pos-values-y-x y-pos x-pos dir)
  (ecase dir
         ((up)    (values (- y-pos 1) x-pos))
         ((down)  (values (+ y-pos 1) x-pos))
         ((right) (values y-pos       (+ x-pos 1)))
         ((left)  (values y-pos       (- x-pos 1)))))

(define (next-dir dir)
  (ecase dir
         ((up)    'left)
         ((down)  'right)
         ((right) 'up)
         ((left)  'down)))

(define (turn-right dir)
  (cadr (member dir '(up right down left up))))

(define (turn-left dir)
  (cadr (member dir '(up left down right up))))

#+end_src

The following source block can be tangled to a source file with some very primitive benchmarks for the grid-move
procedures:

#+begin_src scheme :tangle tangled/benchmark-grid-moves.scm :noweb no-export
<<src-grid-moves>>

(use gauche.time)

(define (main args)
  (format #t "args: ~a~%\tnext-dir:\t~a~%\tturn-left:\t~a~%\tturn-right:\t~a~%"
          args
          (time-this 10000000 (lambda () (for-each next-dir '(left right down up))))
          (time-this 10000000 (lambda () (for-each turn-left '(right down left up))))
          (time-this 10000000 (lambda () (for-each turn-right '(left down right up)))))
  (exit 0))

;; from within REPL:
;;	next-dir:	#<time-result 10000000 times/  7.399 real/  9.370 user/  0.050 sys>
;;	turn-left:	#<time-result 10000000 times/ 14.071 real/ 16.140 user/  0.030 sys>
;;	turn-right:	#<time-result 10000000 times/ 14.025 real/ 16.060 user/  0.040 sys>
;; from command line:
;;	next-dir:	#<time-result 10000000 times/  3.030 real/  3.030 user/  0.000 sys>
;;	turn-left:	#<time-result 10000000 times/  8.387 real/  8.390 user/  0.000 sys>
;;	turn-right:	#<time-result 10000000 times/  8.379 real/  8.390 user/  0.000 sys>
#+end_src

The following source block contains defines a procedure =%find-min-max-with-index-and-count= which does support
generic sequence types for =vals= when finding the maximum value and its index.

#+name: src-find-min-max-index-count
#+begin_src scheme

(define (%find-min-max-with-index-and-count vals min-max-start fn-cmp :optional (fn-key identity))
  (let ((res (fold-with-index
              (lambda (curr-idx %curr-val accum)
                (let ((curr-val (fn-key %curr-val))
                      (min-max-idx (vector-ref accum 0))
                      (min-max-val (vector-ref accum 1))
                      (min-max-count (vector-ref accum 2)))
                  (if (fn-cmp curr-val min-max-val)
                      `#(,curr-idx ,curr-val 1)
                      `#(,min-max-idx
                         ,min-max-val
                         ,(if (= curr-val min-max-val) (+ min-max-count 1) min-max-count)))))
              ;; 0: index       1: value        2: count
              `#(-1             ,min-max-start  0)
              vals)))
    (values (vector-ref res 0)
            (vector-ref res 1)
            (vector-ref res 2))))

(define (find-min-with-index-and-count vals :optional (fn-key identity) (min-start (greatest-fixnum)))
  (%find-min-max-with-index-and-count vals min-start < fn-key))

(define (find-max-with-index-and-count vals :optional (fn-key identity) (max-start (least-fixnum)))
  (%find-min-max-with-index-and-count vals max-start > fn-key))
#+end_src

The following source block contains a version of =%find-min-max-with-index-and-count= to find the maximum value and its
index, but where =vals= needs to be a list, whereas =%find-min-max-with-index-and-count= supports any sequence. The
source below was the initial iteration for that functionality, and has been replaced by the one above.

#+begin_src scheme
(define (%find-min-max-with-index-and-count vals min-max-start fn-cmp :optional (fn-key identity))
  (let loop ((vals vals)
             (idx 0)
             (min-max-idx 0)
             (min-max-val min-max-start)
             (count-min 0))
    (if (null? vals)
        (values min-max-idx min-max-val count-min)
        (let ((curr-val (fn-key (car vals))))
          (if (fn-cmp curr-val min-max-val)
              (loop (cdr vals)
                    (+ idx 1)
                    idx
                    curr-val
                    1)                  ;new weight, so start counting again
              (loop (cdr vals)
                    (+ idx 1)
                    min-max-idx
                    min-max-val
                    (if (= curr-val min-max-val) (+ count-min 1) count-min)))))))
#+end_src

#+BEGIN_EXAMPLE
(find-min-with-index-and-count '(5 3 1 7 2 1))
(find-min-with-index-and-count '(5 3 1 -7 2 1 -7))
(find-min-with-index-and-count '(5 3 1 -7 2 1 -7) abs)

(find-max-with-index-and-count '(5 3 1 7 2 1 7))
#+END_EXAMPLE

The following source block contains some refactored code for working with spirals. I assumed that processing spirals
would come up again in later tasks - which did not happend. So the code below is not tested.

/Note:/ this source source block requires =<<src-grid-moves>>=, as that defines procedure =next-dir=.

#+name: src-print-spiral
#+begin_src scheme
(use srfi-1)
(use util.match)

(define (square-values n :optional (fn-square (lambda (i pos vec) i)))

  (define (next-max-moves i pos max-moves)
    (match-let (((x . y) pos))
               (if (= x y)
                   (+ max-moves 1)
                   max-moves)))

  (let ((square-vec (make-vector n)))
    (let loop ((i 1)
               (pos (cons 0 0))
               (dir 'right)
               (moves-done 0)
               (max-moves 1))
      (vector-set! square-vec (- i 1) (list i pos (fn-square i pos square-vec)))
      (if (>= i n)
          square-vec
          (if (< moves-done max-moves)
              (loop (+ i 1)
                    (next-pos pos dir)
                    dir
                    (+ moves-done 1)
                    max-moves)
              (let ((new-dir (next-dir dir)))
                (loop (+ i 1)
                      (next-pos pos new-dir)
                      new-dir
                      1
                      (next-max-moves i pos max-moves))))))))

(define (print-square n square-values)
  (let* ((per-line (ceiling->exact (sqrt n)))
         (prev-square (* (- per-line 1) (- per-line 1)))
         (next-square (* per-line per-line)))
    (format #t "~d: ~a~%" n square-values)))

(define (main args)
  (for-each
   (lambda (arg)
     (let ((n (string->number arg)))
       (print-square n (square-values n))))
   (cdr args))
  0)
#+end_src

*** Bigloo Scheme

For some tasks with significant runtime I did translate the Gauche Scheme code to run with Bigloo Scheme. The single
source code block below defines some common helpers used by these Bigloo sources.

#+name: src-common-bigloo
#+BEGIN_SRC scheme
(define (string-trim-right str::string #!optional (ws (list->string '(#\space #\newline #\return #\tab)))) ::string
   (substring str 0 (+ (string-skip-right str ws) 1)))
;; (string-trim-right "01234  \n\t")

(define (split-lines str::string #!optional (newline (list->string '(#\newline #\return))))
  (string-split str newline))
;; (split-lines "abc\nxyz")

(define (load-txt-string name::string) ::string
  (with-input-from-file name
    (lambda ()
      (string-trim-right (read-string (current-input-port))))))
;; (load-txt-string "tangled/day5-part1-exercise.txt")

(define (load-txt-lines name::string) ::list
  (with-input-from-file name
    (lambda ()
      (read-lines (current-input-port)))))
;; (load-txt-lines "tangled/day5-part1-exercise.txt")

(define (split-words-by line::string sep) ::list
  (string-split line sep))

(define (split-words line::string) ::list
  ;; If delimiters is omitted, it defaults to a string containing a space, a tabulation and a newline characters:
  ;; Note: won't split on '\r', but will split on '\n'.
  (string-split line))
;; (split-words "abc  xyz\t123\n987")
#+END_SRC

*** Kawa Scheme

As done for Bigloo, I also translated the code for some tasks to run with Kawa Scheme. The single source code block below
defines some common helpers used by these Kawa sources.

#+name: src-common-kawa
#+BEGIN_SRC scheme
(import (kawa base))                    ; string-concatenate-reverse, string-split, ...
;; or:
;; (import (scheme base) (srfi 140))
;; but (w/ Kawa 3.0, also w/ "kawa --r7rs" and "kawa --r6rs"): "unknown library (srfi 140)"
;; and w/o srfi 140 I'm missing many string functions.

;; Kawa already supports string-trim-right:
;; (string-trim-right "01234  \n\t")

(define (split-lines str::string)
  ;; Note: '(string-split str (list->string '(#\newline #\return)))' does not work, so using Java instead:
  (vector->list ((as java.lang.String str):split "\n")))
;; (split-lines "abc\nxyz")

(define (load-txt-string name::string) ::string
  (with-input-from-file name
    (lambda ()
      (string-trim-right
       (let loop ((strings '()))
         (let ((s (read-string 4000 (current-input-port))))
           (cond ((eof-object? s)
                  (string-concatenate-reverse strings))
                 (else
                  (loop (cons s strings))))))))))
;; (load-txt-string "tangled/day5-part1-exercise.txt")

(define (load-txt-lines name::string) ::list
  (split-lines (load-txt-string name)))
;; (load-txt-lines "tangled/day5-part1-exercise.txt")

(define (split-words-by line::string sep::char) ::list
  ;; Note: Kawa supports char-set srfi-14, but that char-set cannot be passed to string-split.
  (string-split line (list->string (list sep))))
;; (split-words-by "foo,bar,baz" #\,)

(define (split-words line::string) ::list
  ;; Note: '(string-split "abc  xyz\t123\n987" " \tn")' etc. does not work as expected, so using Java instead:
  ;; Note: won't split on '\r' and won't split on '\n'.
  (vector->list ((as java.lang.String line):split "\\s+")))
;; (split-words "abc  xyz\t123")
#+END_SRC

** Day 1

*** Day 1, Part 1
:PROPERTIES:
:header-args:scheme: :tangle tangled/day1-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)

(define (digit-val c)
  (- (char->integer c) (char->integer #\0)))

(define (sum-digits str)
  (let ((sum 0)
        (char-0 #f)
        (strl (string->list str)))
    (let loop ((char-i (car strl)) (char-i-1 #f) (rest (cdr strl)) (stop? #f))
      (unless char-0
        (set! char-0 char-i))
      (when (and char-i-1 (char=? char-i char-i-1))
        (inc! sum (digit-val char-i)))
      (unless stop?
        (if (null? rest)
            (loop char-0 char-i '() #t)
            (loop (car rest) char-i (cdr rest) #f))))
    sum))

(define (main args)
  (for-each
   (lambda (arg) (format #t "~a: ~a -> ~a~%"
                         (car args) arg (sum-digits arg)))
   (cdr args))
  0)
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day1-part1

tangled/day1-part1.scm: 1122 -> 3
tangled/day1-part1.scm: 1111 -> 4
tangled/day1-part1.scm: 1234 -> 0
tangled/day1-part1.scm: 91212129 -> 9

tangled/day1-part1.scm: 29917128875332952564321392569634257121244516819997569284938677239676779378822158323549832814412597817651244117851771257438674567254146559419528411463781241159837576747416543451994579655175322397355255587935456185669334559882554936642122347526466965746273596321419312386992922582836979771421518356285534285825212798113159911272923448284681544657616654285632235958355867722479252256292311384799669645293812691169936746744856227797779513997329663235176153745581296191298956836998758194274865327383988992499115472925731787228592624911829221985925935268785757854569131538763133427434848767475989173579655375125972435359317237712667658828722623837448758528395981635746922144957695238318954845799697142491972626942976788997427135797297649149849739186827185775786254552866371729489943881272817466129271912247236569141713377483469323737384967871876982476485658337183881519295728697121462266226452265259877781881868585356333494916519693683238733823362353424927852348119426673294798416314637799636344448941782774113142925315947664869341363354235389597893211532745789957591898692253157726576488811769461354938575527273474399545366389515353657644736458182565245181653996192644851687269744491856672563885457872883368415631469696994757636288575816146927747179133188841148212825453859269643736199836818121559198563122442483528316837885842696283932779475955796132242682934853291737434482287486978566652161245555856779844813283979453489221189332412315117573259531352875384444264457373153263878999332444178577127433891164266387721116357278222665798584824336957648454426665495982221179382794158366894875864761266695773155813823291684611617853255857774422185987921219618596814446229556938354417164971795294741898631698578989231245376826359179266783767935932788845143542293569863998773276365886375624694329228686284863341465994571635379257258559894197638117333711626435669415976255967412994139131385751822134927578932521461677534945328228131973291962134523589491173343648964449149716696761218423314765168285342711137126239639867897341514131244859826663281981251614843274762372382114258543828157464392 -> 1141
#+END_EXAMPLE

*** Day 1, Part 2
:PROPERTIES:
:header-args:scheme: :tangle tangled/day1-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)

(define (digit-val c)
  (- (char->integer c) (char->integer #\0)))

(define (sum-digits-2 str)
  (let* ((sum 0)
         (str-len (string-length str))
         (delta (/ str-len 2))
         (char-i+n/2 (lambda (i) (string-ref str (remainder (+ i delta) str-len)))))
    (let loop ((i 0))
      (when (< i str-len)
        (let ((char-i (string-ref str i)))
          (when (char=? char-i (char-i+n/2 i))
            (inc! sum (digit-val char-i)))
          (loop (+ i 1)))))
    sum))

(define (main args)
  (for-each
   (lambda (arg) (format #t "~a: ~a -> ~a~%"
                         (car args) arg (sum-digits-2 arg)))
   (cdr args))
  0)
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day1-part2

tangled/day1-part2.scm: 1212 -> 6
tangled/day1-part2.scm: 1221 -> 0
tangled/day1-part2.scm: 123425 -> 4
tangled/day1-part2.scm: 123123 -> 12
tangled/day1-part2.scm: 12131415 -> 4

tangled/day1-part2.scm
#+END_EXAMPLE

*** Day 2, Part 1

**** Data

#+begin_src txt :tangle tangled/day2-part1-exercise.txt
5 1 9 5
7 5 3
2 4 6 8
#+end_src

#+begin_src txt :tangle tangled/day2-puzzle.txt
121	59	141	21	120	67	58	49	22	46	56	112	53	111	104	130
1926	1910	760	2055	28	2242	146	1485	163	976	1842	1982	137	1387	162	789
4088	258	2060	1014	4420	177	4159	194	2794	4673	4092	681	174	2924	170	3548
191	407	253	192	207	425	580	231	197	382	404	472	164	571	500	216
4700	1161	168	5398	5227	5119	252	2552	4887	5060	1152	3297	847	4525	220	262
2417	992	1445	184	554	2940	209	2574	2262	1911	2923	204	2273	2760	506	157
644	155	638	78	385	408	152	360	588	618	313	126	172	220	217	161
227	1047	117	500	1445	222	29	913	190	791	230	1281	1385	226	856	1380
436	46	141	545	122	86	283	124	249	511	347	502	168	468	117	94
2949	3286	2492	2145	1615	159	663	1158	154	939	166	2867	141	324	2862	641
1394	151	90	548	767	1572	150	913	141	1646	154	1351	1506	1510	707	400
646	178	1228	1229	270	167	161	1134	193	1312	1428	131	1457	719	1288	989
1108	1042	93	140	822	124	1037	1075	125	941	1125	298	136	94	135	711
112	2429	1987	2129	2557	1827	477	100	78	634	352	1637	588	77	1624	2500
514	218	209	185	197	137	393	555	588	569	710	537	48	309	519	138
1567	3246	4194	151	3112	903	1575	134	150	4184	3718	4077	180	4307	4097	1705
#+end_src

Some test invocations for the REPL:

#+BEGIN_SRC
(lambda (arg) (format #t "~a -> ~a~%" arg (load-txt arg)))
(lambda (arg) (format #t "~a -> ~a~%" arg (map class-of (split-rows (load-txt arg)))))
(lambda (arg) (format #t "~a -> ~a~%" arg (map class-of (map split-cols (split-rows (load-txt arg))))))
(lambda (arg) (format #t "~a -> ~a~%" arg (map string-length (split-rows (load-txt arg)))))
(lambda (arg) (format #t "~a -> ~a~%" arg (map (lambda (col) (format #f "~s" col)) (map split-cols (split-rows (load-txt arg))))))
(lambda (arg) (format #t "~a -> ~a~%" arg (map (lambda (col) (format #f "~s" col)) (map split-cols (split-rows (load-txt arg))))))
#+END_SRC

#+BEGIN_SRC
tangled/day2-part1-exercise.txt -> (("5" "1" "9" "5") ("7" "5" "3") ("2" "4" "6" "8") (""))
#+END_SRC

**** Source, Part 1
:PROPERTIES:
:header-args:scheme: :tangle tangled/day2-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)

<<src-txt-io>>

(define split-rows split-lines)
(define split-cols split-words)

(define (check-sum list-of-str-cols)

  (define (max-min str-cols)
    (let ((int-cols (map string->number str-cols)))
      (- (apply max int-cols) (apply min int-cols))))

  (apply + (map max-min list-of-str-cols)))

(define (main args)
  (for-each
   (lambda (arg) (format #t "~a: ~a -> ~a~%"
                         (car args) arg (check-sum (map split-cols (split-rows (load-txt arg))))))
   (cdr args))
  0)
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day2-part1

tangled/day2-part1.scm: tangled/day2-part1-exercise.txt -> 18

tangled/day2-part1.scm: tangled/day2-puzzle.txt -> 32121
#+END_EXAMPLE

*** Day 2 Part 2

**** Data

#+begin_src txt :tangle tangled/day2-part2-exercise.txt
5 9 2 8
9 4 7 3
3 8 6 5
#+end_src

**** Source, Part 2
:PROPERTIES:
:header-args:scheme: :tangle tangled/day2-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)
(use util.combinations)

<<src-txt-io>>

(define split-rows split-lines)
(define split-cols split-words)

(define (check-sum-2 list-of-str-cols)

  (define (even-remainder str-cols)

    (define (evenly-divisable n1 n2)
      (receive (q r)
          (quotient&remainder n1 n2)
        (if (= r 0)
            (values #t q)
            (receive (q r)
                (quotient&remainder n2 n1)
              (if (= r 0)
                  (values #t q)
                  (values #f #f))))))

    (let ((candidates (combinations (map string->number str-cols) 2)))
      (let loop ((candidate (car candidates)) (rest (cdr candidates)))
        (receive (ok? quotient)
            (evenly-divisable (car candidate) (cadr candidate))
          (if ok?
              quotient
              (unless (null? rest)
                (loop (car rest) (cdr rest))))))))

  (apply + (map even-remainder list-of-str-cols)))

(define (main args)
  (for-each
   (lambda (arg) (format #t "~a: ~a -> ~a~%"
                         (car args) arg (check-sum-2 (map split-cols (split-rows (load-txt arg))))))
   (cdr args))
  0)
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day2-part2

tangled/day2-part2.scm: tangled/day2-part2-exercise.txt -> 9

tangled/day2-part2.scm: tangled/day2-puzzle.txt -> 197
#+END_EXAMPLE

** Day 3

*** Day 3, Part 1

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day3-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-1)
(use util.match)

<<src-grid-moves>>

(define next-pos next-pos-cons-x-y)

(define (square-pos n)

  (define (next-max-moves i pos max-moves)
    (match-let (((x . y) pos))
               (if (= x y)
                   (+ max-moves 1)
                   max-moves)))

  (let loop ((i 1)
             (pos (cons 0 0))
             (dir 'right)
             (moves-done 0)
             (max-moves 1))
    (if (>= i n)
        pos
        (if (< moves-done max-moves)
            (loop (+ i 1)
                  (next-pos pos dir)
                  dir
                  (+ moves-done 1)
                  max-moves)
            (let ((new-dir (next-dir dir)))
              (loop (+ i 1)
                    (next-pos pos new-dir)
                    new-dir
                    1
                    (next-max-moves i pos max-moves)))))))

(define (steps-required pos)
  (match-let (((x . y) pos))
             (+ (abs x) (abs y))))

(define (main args)
  (for-each
   (lambda (arg) (format #t "~a: ~a -> ~a~%"
                         (car args) arg (steps-required (square-pos (string->number arg)))))
   (cdr args))
  0)
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day3-part1

tangled/day3-part1.scm: 1 -> 0
tangled/day3-part1.scm: 12 -> 3
tangled/day3-part1.scm: 23 -> 2
tangled/day3-part1.scm: 1024 -> 31
tangled/day3-part1.scm: 265149 -> 438
#+END_EXAMPLE

*** Day 3, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day3-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-1)
(use util.match)

<<src-grid-moves>>
(define next-pos next-pos-cons-x-y)

(define (find-square-pos :key req-sum-neighbours nb-squares)

  (define (can-stop? sum-neighbours curr-square)
    (if (undefined? req-sum-neighbours)
        (>= curr-square nb-squares)
        (>= sum-neighbours req-sum-neighbours)))

  (define *nb-table* (make-hash-table 'equal?))

  (define (next-max-moves i pos max-moves)
    (match-let (((x . y) pos))
               (if (= x y)
                   (+ max-moves 1)
                   max-moves)))

  (define (sum-neighbours pos)

    (define (diag-pos pos dir)
      (ecase dir
             ((up-right)   (cons (+ (car pos) 1) (+ (cdr pos) 1)))
             ((up-left)    (cons (- (car pos) 1) (+ (cdr pos) 1)))
             ((down-right) (cons (+ (car pos) 1) (- (cdr pos) 1)))
             ((down-left)  (cons (- (car pos) 1) (- (cdr pos) 1)))))

    (if (equal? pos (cons 0 0))
        1
        (+ (apply + (map
                     (lambda (dir) (hash-table-get *nb-table* (next-pos pos dir) 0))
                     '(right left up down)))
           (apply + (map
                     (lambda (dir) (hash-table-get *nb-table* (diag-pos pos dir) 0))
                     '(up-right up-left down-right down-left))))))

  (let loop ((i 1)
             (pos (cons 0 0))
             (dir 'right)
             (moves-done 0)
             (max-moves 1))

    (let ((snb (sum-neighbours pos)))
      (if (can-stop? snb i)
          (list snb pos i)              ; return some more details to the caller
          (begin
            (hash-table-put! *nb-table* pos snb)
            (if (< moves-done max-moves)
                (loop (+ i 1)
                      (next-pos pos dir)
                      dir
                      (+ moves-done 1)
                      max-moves)
                (let ((new-dir (next-dir dir)))
                  (loop (+ i 1)
                        (next-pos pos new-dir)
                        new-dir
                        1
                        (next-max-moves i pos max-moves)))))))))

(define (main args)
  (if (string=? (cadr args) "ex")
      (for-each
       (lambda (arg) (format #t "~a / ~a: ~a -> ~a~%"
                             (car args) (cadr args) arg
                             (find-square-pos :nb-squares (string->number arg))))
       (cddr args))
      (for-each
       (lambda (arg) (format #t "~a / ~a: ~a -> ~a~%"
                             (car args) (cadr args) arg
                             (find-square-pos :req-sum-neighbours (string->number arg))))
       (cdr args)))
  0)
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day3-part2

tangled/day3-part2.scm / ex: 1 -> (1 (0 . 0) 1)
tangled/day3-part2.scm / ex: 2 -> (1 (1 . 0) 2)
tangled/day3-part2.scm / ex: 3 -> (2 (1 . 1) 3)
tangled/day3-part2.scm / ex: 4 -> (4 (0 . 1) 4)
tangled/day3-part2.scm / ex: 5 -> (5 (-1 . 1) 5)
tangled/day3-part2.scm / 265149: 265149 -> (266330 (3 . 4) 58)
#+END_EXAMPLE

** Day 4

*** Day 4, Part 1

**** Data

#+begin_src txt :tangle tangled/day4-part1-exercise.txt
aa bb cc dd ee
aa bb cc dd aa
aa bb cc dd aaa
#+end_src

#+begin_src txt :tangle tangled/day4-puzzle.txt
pphsv ojtou brvhsj cer ntfhlra udeh ccgtyzc zoyzmh jum lugbnk
vxjnf fzqitnj uyfck blnl impo kxoow nngd worcm bdesehw
caibh nfuk kfnu llfdbz uxjty yxjut jcea
qiho qif eupwww avyglnj nxzotsu hio lws
xjty usocjsh pivk qnknunc yjcgh bwya djw zpyr
ycfmfe mgq sjiomg nfzjul bjwkmgu yvsnvgj dcjupu wzz blmn
rdowgbt vpwfdoi blzl laghnk gsa vhnpo cztxzlb rtz hvwonhb eciju pfjtbo
bqs bqs dbutvgf mmzb izpyud rap izpyud xlzeb mnj hjncs
xpu vwp nujcos piu irindir tpmfd umtvlm gznu
sfpuxar qcnbte omouazv cnh uaxspfr sepolf rusafpx
xbmaf iceyqqq sabpt gliexel muubepe qqiyqce fmrcc eazk obkeonl fmccr kgk
apg gbycwe gap pag
gagv saqbk lwtllc wnhzz khxsjc
lgc alen rlmsp anel gcbvg
bujlaz rks rlqf deknmee yrp
scqvl weusbc bgvaz vgg cjwsfno vqy zbq aqy tvf bgzav
hbki vei fxdwljs myjuba elbsib pvy xxjxgi dtgv
linzaeu qbwdke fdg pykw
qvtdd aco aav bpu mvkcuc kjfj japgfki jfdl gem hog bdzsiea
wpbigkb lzhwba jssjkn qvb kmwu qddv
iny osyvqnt tumunzb torq bdeneg wywank poza ipp iggorw
tuko mhdbsf vmjdop jomaqpj rcdsud hmgspr lsas nzmwc
cirkjq nmjuu xtgejv gtexvj vjcmtqq unjmu
xsdmezq xvqjvqp exhygy qahju hvd qadmdh lok
wvvys kax rohrrar rwhnvi lhnmefp lsktouy bxilosp
wayf diobnl zvu obnidl oibnld
cewil ygsf ffzp ruxhu vah lnvwt aef lnnjc kgkb gxtlx feko
uti epphrin pywths cpzzh csjei nczhamy gayxmb bdcytq xkx fgmt
qvzyuwi dwo swkw bwjdrn dasgd ijgw vzabaop yefyhmc wgij
dyg sugrf vid etz weyqg nyntx dwfgwm khon hnzzzn xfyra
ofbh bdrsk rdrjj elaxvk jrjdr
msxau rsocvx zxdda mxz lknl
qktaywx dirpdbf unqnd wbrwkuu fvmqwl emxr big
xwz kvsydc ayokjyy qiah omw neo htltxx fxhwqwj colqvbb sxmo ephfkex
ncjxoaf fwjkc czmhv ylg axcjofn dvj bzqjku opvcr jiwzucg vmhzc
gmmnrt zqar twdwrg qiwwki fcbr lixm hjdwwe moiva
roinlxg cxeezve whannk cxeezve pyoj boweioy cpkgxsz
qkct qso xlb xyy aellfet rzt cbboow devfb nih fhbfxzi
qyc ltxia alixt atilx xtgrv
svruz ufvo rvesnxv dik vzurs jjg idk
xeudhrg hudn cilo ljplosb
kpb oyzvywx vldko qhfkwod bkeutk zqcqug pbriu wqocos
qkngzfy whobyri aze jvipdty ocirbep icqwc
kzxxlab sjr zhymws xkbx
nnxs gkwtld dwhkry snuibq dtdl aicug bhtlfzp qzk jctos
regvro mxcq hqof yraucxi jhkol iuxineo pbtnk rfjwc szgjpr ndqqj vfgm
yqrfox xoqrfy utbryu utubyr
jdubjt wqrl wnk rlqw nwiq pnbn qinw uaff ftdo htfrav
rum mur umr tij ovbahl losao imawwpb wadhww tbteyqc
napxd kzeiqcp ppgqucm xkityt frq hugrp gjgtt gmuqppc zwqme
xyuzs ysch howlzgu dkqppbs nvbiz mks mtxv vivouex uvawq
ffe lfsn nlq mpulheq ikcfo wdtz cnwsbph zkib muu
bqkxav wtecb lxwdhr kqbavx aqxvbk
czwswqx ldkxapd pfwd bdkkj iqohla cwosw ihqpd pcc ckhabbn
foiip hau rbqiyhh htm omeubgh symh evfcqg
lqx xlq rsgf izu esetis
npsrkdj fvulgkw eovw mzr uobcze azb tij ihoer ehori jit wknsqhm
gnrksh xwggt oosi bpnmhx qqaa mpmryu jhzyz
yad gbexqcr gbexqcr gbexqcr
ldca xxhznn twyy ytwy zhxnnx xfmpi
floioot kfyh dhibv ezyznar sfg sfg ezyznar
cinioim iiocmin ypla aypl
mhwcjbz dftuqsy wswop eizbf ptsd
ehx mlh nfxgfkz uuw xftmn ptlkbo vsnyo ttwce
oexvf orcg cncnkfk comvhl
lqewsj lyulrcl efixd qvd fhznqnz yvrkwyi xmhgc vzbp
dmr wrxqh thcm giomp rtvl ssc gwq rbklw hcmt fjvud
teozhb dmzwfv qkq pvcqfqq
hvlebc qqmg repxk zwrjdx ztruwb such tyligs ybg
psa rqznokd lgc jstqres yiqt mbiody xazb xjuk dtb
lea ncm rnh myzqzwm
wjml eums ueflvbr cjpgnl qduunu zfxaai jwlm lprzzg vrn ttetyr sume
uwkgeu uiahd plyewgi vveo nwhsitz mcitc uvk zsxehgs sewl
lnbdrka sgtivn sozzq mgd vhxfnlr twrfpk
gadphmk mbx lmlbrf tsnehnr lawdpm fnima gxgl
umty vrn dpow fsnnpjv fsnvnjp nnsvpjf cioaio
euu uue zeskmtk hob stekkzm
ypqpri qwdju ypriqp iprqyp jnoxqa
lkppi ingfxw wlulvp yhwrli nxwigf oyuhq ggfslx
kdd ypvr pyvr waw vyrp khqq mamxca bapq gobfm
iuq upvdpv zxef bfwns lmq lxswr kpsqo pwde iaaou nsw udy
lgzo nil ovgrmt omgtrv jrqp pqrj lit
uumyu iiakfj gvdtzz qbux yxn ejs dvlts
hcm ghutxq zswi tmyhqef hgxtuq
shkhkdk kad seubeax kdl mzu
cpykgr skx rfhpor xsk moyhlai ogv ophfrr dxipuuh
beyw jvrre opodn zdoajhx fhg ijs drczy drczy hjungq
jrzieja gfg yzdn yxm wshibsn fgg
xtylh vxscmvp rfymq uzhpyea spxcmvv dlni msj yxhlt
eov awql miv miv eov
mmvrfbg fjiyf hvqz zpuqmbf fszyuz ldfgni wemfjl fjjpl rbnpy rfb
ppzpeh nam ntv xnchtyk hja hpepzp foj bibvx nmmdlff bsrkp
qiy qiy umhlnh qiy
tyds oepk wae tdsy sdty
ukawr rkwau ghtjhm axy
wtbjiv btjivw ewaf hwk ttq
kdpun myve sqv rhvpy fnjwt puw ujhf thsp nkdadqr
vyw wkkpdpy xlgz lmmcuve ncuq lmotk
pmsfw vxd jpe qxlyasx ejp gwuv
pmgyndm ezofbvx nicbwrw kwnlj yjvnas fdpkfo mqcsyhn pyjpf fbexvzo vkftm erl
trmwvk rywuzoz hbidea kicohfz heidab deaibh
sogf govd dknpk vxrvk rlm vwhjk
xnxbfmw wguzrhd zbmkz piwppa mkbzz xvwrdgy flusfqb
cgduq hbnwr xfx mrejb ckw zkbaihf cloow cwk wuvthv iwqctx
vugx qbucd gxuv ocb cob
ilmet fbelxxz qratdfn unoj hbc duv srmikz
vnzuw zgpbqgf uzm thysyxd dinfh bgvr olungg ksd dsetwqz hpg
omagsf zpr coa kknx bzithq pewp flvoz xiiq weojqr wpep
aagj gcglqt gqcglt xbfx dhdx lbx
pljq plxuscw ilh wfk lhi hli fouieyw
hvnh zvm aqy dzitirm veq ctux
lglhs aqibdii hjbn cfgc qrg pnbntcx owoks ebz
jozngde lwne mbo omb fnyzvvj gndozje
bbdgc igtdj uhahgp sqduko
uuspedu fgnspm ewc slly jbs chl heanm abqijx kadvgxu
akfsft skna kusjqr rkqujs
erc vrljpu lruvjp lpvjur
iors hcdr fsqtcj vop vmn dtqnz tov oscjlw cdrh ctfjsq lrnts
fxp mczo sjlcxa mzoc jmsq hcxybow dmrr bcoxhyw
aac ewraerq odmxpz aac aac
zzio zebmxa szeej poordr gmi owwnnh xfx rzrab lfey jesze
akc yyoj vqod drtne
joxhvyf ymasnbr omouvq isxdrr
qyi ayrkzu jsk vqvvno jkkuxi zufnnwu mrsszdf
ocqi htfb tzjna cdt wkzhynm eergf
yokzugl usyuqu qvotq uweqyow lygkzuo kpmqmb uglyzok
glvshl imqv jrv xlpnsy gcg psj irtiamg wkl
bjcpc nvyloa dkkan efj okubpc cxlowm eone kmpny
cyxqys nmuaftv gqxj gtvsc
beouh dioxiah kizdy hyi cozrray rave fqxmxmj gdm
frjz amrsat lxvhzj azhevtu vxlzhj
zwmnrk sbk txzrcsj sbk oosgfej cvh zuthibi onvwd sbk nhwpzq
gzamt vraw kuk ugayl lyaug bww rwav ijah
bdjirxg vifjr rhbxpa oao yrhjxoi pbn
navb umesiys yhix phuhu aekkciu nlnsiq wjf idqdwp
cmhw rsu urs ziprlfe
kyhxitv cgty bnwjyq cygt sgjn pdab imarvhg yjbnqw
axaa ejancv yau njpc jvwy bpft kwjvg qzrbvtm diu njpc bpft
ambj upe rmqr yudbiqf krudp pqyf
tnb mobnpv vep ohxoc cyip wxyccfo jrbi rwsws kls zlv oohxc
fjh dmb hlbq bqc jhf kax suz fjjg rkpc
wjnn byfirm goeyh xtjmdka
tgyfxx hefpxln mveobqr yeo ftfn srt vim vlcu hevoi xtaaff
imyql xotcl poql rlueapq bkwykm hlalk bkwykm
gkec zff hbmtq rjxjbcf arerlu pvz cdaqi nijmhv uodwjh
mpctof mopftc ksfbat sbkatf
nvdd jub bvi kyggdbx nwtiok gjt mgsm dbhsn rzibgjm dvdn eqi
ysd iirp dfgzza wiyeoou ysd ispkv bcqg wwzqgq xphse
ntq ivposb gsd ezl tlkztp lez qyurp vxsmg dgs
wijs rydbj onm usiyqzb hwrol giusanb kewukl yziuqbs doojam nom
lfacyy xwwast truqtt tzneimn uxsydc ktu eqyaj ndszak
ffleooc kikif fohgop aucy moubqxu
iaxc pnwexdl ncy vmwm xrqoi wpgftq rofx utyzjuf stdxq twpgfq
ppmlp etsvi cjdx poly ynx vfxpslg mqjo qnpsage flpsxvg jwsxiqt
lbyhnb kflrpeq ssoti webxr embbjd kbnx ubzqco
khhc vwuqzb ebocbko rwmonkz edfqn hzh qhncoq gbwdi wjeg ocwow
ghzhd kcxblp lzwkkr gzhdh umk pblcxk
wyajtw jiff ouylv sni lwhlrg avqjiis igzx wbl lhrwgl
glhh kaxha tqii hwzx rgic kaxha rgyidmt qdgxfl ynjc oibfij
bapj bix rjniw ynbql idlvnmt wynpzbl zlpuoix kvn kakwys
aldpxxu iojxp rif xbyqtr jffdvy qnrq tqwsdiu
ulssco ktbymjw bfj zhkg zgc ctyri
ilrmq wfahcgk mrlqi bguad inj
cjzc rekuy ifr wfkg sple
cvjkp qbmumnp mprg ltmwxxh zpemtyb ozzssfd ksu mgrp
nvc sxp mpkxz bhlctq hguaa yrdkm iwsgfg qjssh gobbies hucdh
jdxrjw qmo qmo vobhnu
dnjib wtjp rfdjqdj skpvrb vkwevb kxxovp
fzi kicta zkuvr rfaawv ehklq cfdjsyb tukahwr zkuvr kicta ouq
aba ytdguk gqmpn hvxabff hvxabff dckj
fna wxyqhxd hvy khsu yypoyy lvvue medheua gim slf drdbeh ikihf
jquz wwo wwo ghlz jrbvb jrbvb
jwzvkl yjw ouwla yjw ouwla
zsvlgyf rzqbtj qygynem ukdgjm lbsyh tmdzp fbcaim eymzr
pvw sbs dvsa plmepl pwv ayxk vpw dwt
inayadn pnti yzhxk azga gxq aznbciu gjnmyqm
isgf ndqmk beyqq ebyqq srtzxo aiiw oqfuwp uoqwfp buejctv pxbk
pzl irv tzvzdb wcy eszm ybwiw ycw riizifd iybww
btpu cua azzqffy owcr
ofwq sqlpzat lozdxlc aevjmpc lcolzxd wbbysn qwfo vcrx gdzgi
dbpfmxu ydsxwl ijn svxtop csep ldqeog ffye zcrl soh aclw
wyiyyhv vyhiywy obgi hiyywvy
ddvaoc lhv spurn rgxyy onjw illvn yryxg xyyrg
vid wdttqq kajr myip
wolqlue phlunpt dcmmkfm sgxk dmmckmf sfng jlbsntq dxp
zmneyho fswj xdgsjc oefwjdi htgxvbd tgqrq xodoa
ynw bygqdnh hhmnkuw cojqrke qszzdjo orskwq mdfae asabn
vvpm vkj pcxghao caoxphg axhblxb vvmp
txox nzy eqn zgir dytsi girz ffa ugjjbzj brob fll
kbz pukqbd fiwmuh umwihf bkz dvz
vgs vejs vejs vejs mbkyjjy
viqmnmu bitkyw nddnk dknnd cldnpp hipub plcdpn fdzzpb mmyomn
ndylnfx gozlrx ngptk rnpteb wtacx xmtcjy xldha
fey doyxis ampmtr ycqh syw cqhlj hnngx
dijf nac tvkq ayo akbj lzmngdm wfxpn bpyvrf cvdqpa
zsofz lhho hgat wqskga mnt
mylwm zxsd omzpa waz hcrr lxmpq jsw sqtwak pzoma
rwhgsgt ysdq ztihici mpwcawv alkqg wsxiwx
snldn bcb anjdv cbb awsscc cqxult hjmjew mcycb fdpdg sesrh
kukrqm fawafz qdim wyobtqx bnvjnqg dcvqxta yptr nnpu ughldqp duo zafwaf
knb yjqb bscpnt nzg sqeu zkahna ttuf nsbtpc ixwit vucwj idix
bfqyx xlnpc ijrxu zkqi kjxtahr fgag orusms adi bfqyx bfqyx
dqddc ncbv bvfk hefikb dqddc hqjl otpx zfiu
ntkv qunrzx eztzure ctt rjo bkdt znvd jwdf gqhf mmhrzgt
zeavm hkbf rawqwuf pis dojlkt vnjhmi uvk cufmn qginezd xyut
hnidzk chlctc yst pepd dxntbxg vqk daxfpmu wshyddl
jgd vesqgo bdyqy igl ahstdm wjtd lrtkjsv tjsj sccxbih esn gkkzj
iisiswh jll rhlaf jqwwgfa wmhyo izva vrg zjkak nlxxfer rvhx
mkrkd jlqtpy ukstro ktuors wsj ynqpbp kpiyxzv nxeiwg xpzvkiy
jbr gnct fwklekg cmfqnm ctn gqobrs kwht
pztmjs yiffc kfhsblx yiffc yiffc
biezil iiezbl bzeiil smocoju
viiigm gmmmk yeiv dxzogro qsmzsur hukzwjn lcle syo mdj uruf rxfseu
extchsd adeff ouikoj fyaclr rwwvqsd dooe tcxheds zrdqqhm fdoxv kbxi tlcj
aycnydq qlxhka zoi shplo qll
bfry lbwckm ltq rbfy gpn vojp ruj dpxcve geq
svtvfwh lca lac qia vhwsftv nookdfz xgjiaf yvcdlt
aspgqym fryuzhx bbydf tbn bwutsc fqgi zij lmxhog qnmse
rbb gsys volnas onvlas lonasv vwjdso lnteapy
got iauk kficn jvfuy yvoe jcxwui hyamqx mke mwh jcxwui hyamqx
avutfi ggmha dkopc kothnnb syoi xsd wjedywy
oziejyz yzeijoz hnthyn knj juuq qujtp kgq bymlnlf yicf
zsejuy dybeap hvowmvn okxb yoi epadby cnzjk xfwprzc
lacg iiix fblhxvf nrkkol lnafzw qspzsn gvdy ipj zub uouseo
evukwkh ycjxxc lptwmf pmd izxdsos zrkavf pgjoy zwokg mpjiej
vqw ijwoy eaw wvq svmcq ccxi nyub ynlq eqornax uprt pygfe
plue okbbm btvm gba kutn jacjx ysqt lvx pcxxu qcf
pyw ffjfudq bvk hsdwdva fjnivhf odbmw krpgrj
hziesm bxa dceiwt tmvivjk snl fkh dahsxyx kqlhak lurtk
xss sswyxrg yqff dbkx kbxd mpzbmnl bzplnmm
uvz pjm ilrol pmj uzct ztcu brhkv
heiz jcn syjt zfvlvaq aflvqvz amcjh rxnitw
cxl nxvrn vjnz aewtr cxtko nnvcp ltptd adpxt zvjn fntklj
aymmm tuirj hzngq zhbh paqs kvpfo aqsp kmo acprw sabrso kdqmp
ndqjspv mmhp pndjsvq rti usm
ije oad mvelyg jadz ekm dao zdcmv
qwww tmwmdbb oxxfoza rgmf eonku brh gcgiuoi ojscn
fjedeek ohlax fiydku rbnxpg wfivg cdgs
axwbni hojye mwfe oyqknxp whdgfy ihku mbhr gagnz hehagxj
hibautd blnayq lnayqb gepml mgpel qunw
ircx oeb kujtip zbu ebo cmmn
upyqvot wbponp hnn vav avv tvrky omm
yzqsnf agbfsw dbxoya sfnqzy hqrxek qsnyzf oagyerm xxhukm
xzvk mvcwz oujr hell hoe xexa dqlpqt xdqz ucola hsvv tcmybhl
skldxr mzyol ybzyzd jnnxb rxncdy nkpwy fwlnsw omylz oiwieu fshv ngvha
jkwqf yxrox hejfoq orxyx
rijken xiwf mawqcfu erinjk jsi yyg mmu mdkfqb
ornjes krp eornjs enjros pyqp nnwwjl
wzd uqqo kyeli tikdle aykdjog uiz rbpnw mjxezf ihiz rlgyg
cjm ajqgvkz kfgyy dmczlc mjc kxcm zctyqgh ymsk jwhqfd czpqgan
vxkzvco owo qogj uyictoj kfr pyoo ejrru npluynx bvv jhhzu kuciwc
eqk pcsly kelu arzgoe trfo fotr cuaax
lagonw qvcssqz sdoklh uvovi sfrkmd hnvafj ltg wfjj
viwbkm hpwe kzzwrbr axjtlq mznin wwpjg unlwur
nuzorgo qfoz ydisca qxdfutv hzg
nqgge tobtt hjocx ntyqyi rxzkynw wrnxzyk ciscy trjt ottbt
yuii srawx gljxe eteogz kcu jlgxe tjik ktsnp agudqok jwol vfnyv
vgicg dhnrmxz sjhozy hlalx rutwq
nyoyoje kco hoyam hoyam tta iflud amh gdxcsj vqr fvsqcgv
xdmbtph ueen cskerl rxjvpdc
nricn addljzg obq rikez igq bxygkmv qmgojou uheubk qor
snzd ztusvr vrstzu mceddga hgu
vvrbfjg mcdhmsf ldtwl otuna gmjurrx jgrurxm rxmurjg yrioq
iotkvo sftfvn vvoit lllju xvlg rdsb ywmdf mzxigu kzq
sgqw gqsw lqfu wgqs xpiwou jurgucd azq wgaqpm
ijntzi chlnfj yjqatz hjflcn vys ofq oqf oadthe jrfw
mmc motjo vcwmod rpaszfk zgkkua bpja vjb htrk
bpfvvka kmger mnvvfl hakudy yfprdoo mvnlfv rgmek evnwg
mykpu juavkn cecdvi aszbi lxm hmps oaqoif
fshizd fsdzhi lvcq hhpb eavwno auqlwz rpv owcdojx amsmf qgnddd
pohmcn hlcxk qsesxh rncr
fgyrsis ldem avxmnh frpodq oefzn
plfpu qdyojz xdrzrjy kpv abkh fge bbnotvp liikmcu czvwl oyh
ovha muitw pzy edfjoo fhsxuh dliyruc dikcd cqem ywfy
exyry jtzqn tscr qbtxno cikk poqgr tnjzq eofe sxea anlikep kick
zcie purpw dmhhms bcdo prwup uprpw wfejgjd
kwtjc cmixp dodfwj hcgmmat pkeyspo ubnl ajxvj ffkh xvw
nvlgq oduus psufiqg lrwpn dleftn xtllqvf usgz
liarf sczsf sczsf wky qtzq qvve qvve
cit vtjsh jrhkyvi txj urmq hppx
rhblmxn rhblmxn lkgow dylurwc beyk gfcewxj ehpl disoe tjbjy lkgow
nbkrm jvk ffux ars agns bebic jzjfm kmnbr gptvtsa ufxf
hrlvup jaz tafyr qcgq wkd fiz bgsrx jmtcvo qkbvj
eontk djf tiafrng mtwat puainel nyjoh meynxbf eqdw
aspvmbx tgzuszm fpj xkl nzpr fjp vnomk byx sbtov tnu utn
ldyww gwmiddv hwyh gcgsdit gtgdisc suufl xsw dlwyw
sye dgbd wyf ixqzthx dgdb esy
nsdgera fqz xwbdgui ngdgbcd bcn qrdxml cwcmxws tncm mqsodj cqgk
estayas cocmbpv cdcf vygtswo aplwa estayas
ndc ndc wntr sfls sfls
gse svv esmi lcdii lnr kemrk gnk ildic blnqy wvn
mwlpm awkr sxsudub yauwww hnktbog fpnqc nmxoq yoparu tqjpkug nbipft
czwnkk hrodtmx yyzpil ooqjb cvxzfh
kwa wak gipak gsgrw
jyy fja jjk kuvoqdy urqx
doyu chgn gvtxi qjdigvy kxr dizwrjc sll zenl yyblj
epxeqih kfi hlog pakk kkiidrh hiufw wuhif baqzxzi bgcd phi jzjdxjp
hllhyad sodc nyrtfe kygof hyyqi txddqg wcwxvnt ewqmj wwv
vxymuoe caat diqwbo vfruxdf sqniefn hetcbl nvtttu ouesb
yvoez pvthzc tdowuci wjijicn fhpmq kfobag yctdwj
xaugkb rprkg tidpx pjk tpwwm pbcfhr wmwpt sfynrl iouaw zbnyu
auakc culuxg bffg rodyhea ixlmtfb jdurl szoa
xgona fjzho buh khbvti ddh mgj ptgaqps
dqldupd udpldqd poku gfgpcg zsvk grvk kntx jih uwvxdvq sivk
mwdnq wmqdn uzto mdqnw
alvfm qxqo thwru xqqo jilnsgs rnonk fwntuby ogbha
gvxlxyf cdpv khvpka kgt gshlaa tenb
mtgvvxh mrjrsd truk rrerzx tujweaz
ozepw gsqkr rtmmc cmrtm
spnthg xhlzuu xwcrxz aqqejhh bpzh
ectdftk rgp mkp vxp pevriz wkgfkaw vfygj peg gep wjn
bksbu ywsszf tsbrps vxicr hfustju ynnlbo
sio urbvf ujezjk vkyc ukjezj bvrfu qwwgqmw uqfekvx bzipxus qfumwh
druru kycweog ycmef rjyy fkgp
rmf ifbip rsztco coju wlr bfbmsug lwr bsufbgm nwmp
jjuxtyd yif rkldsvu binq spepa mfg aszm
ghilaau ncm sgbavz omzeotz azukf bgjw zqzo gjbw pld
gtog iqheik budeu guvljmi
qqlj jqql ttk xcxu
cfq cfq kpagib dxfxufw hhksbjh gpcp
xkeax acnia jjubfc mhot uxlhh gnkj pavta rciondm rkquh xudqian
wqhqzg psqh rnnc uujlgq
hpjpaoa maa rdndl xewqj nmagwx xewqj hxuyvou xziv rdndl fbxmbz hmfwghy
dtwnrca hbfcptw qrmvat sdatx les zwizogq
bodiwzg sgoas fsf wgkrn zgbdowi wfkz
ngcsg grtao wcfxpyl gngcs fxwycpl fkpt
txvngo vxngot tkoap zqjc qzcj oeruix myh ihgdfik qtt
rxeh fcbnoo rxeh lve wvoc pmnxej dlcbrh rztt noibg
zyvq lwxqu oyjv bvidmf wxuql
wzc zcw czw dnhkvrg nzslrf
cfgl uwhxu qnsfmt tgyabes mqnq nkitq hmcvxlt qqmn yzmb uomqp
lwziur hgmdmv zuvipkp vir apr gfaq zeo dunat mqgafzg
prq pqkr xlrw njf ncqni kgpoma cmtklv
jwfuc poz opz fuple
fgleub lcgnifu lkwo kftbc onvwvdx lukpod xgmh rnj
rwqvv ezjmoni llq ekd cdvv kzcci gzsj vuipv fnw
rtnua gbnzg kqtogns iozzwc kjpzz kiiurey yzlvzx cpy xrue
fexcjmw ebwssx ewbcgwd uwolou nfdhic vupiykn jss djoo xftbkgo
idf ipvmez qyevwd wfsjxja dif dig
szpbtsa bssaztp sptzasb qppgz odur cpmn wpmg
pxn zjmq rbnr azwstzm mln upaqyty nxp oge nlm
bfaryqv hag phtvh ypi
epeeog lip zqio wuehlnb bau sbd dsb
xbrrp sej agrqnpa aarpnqg bnwyi jbn
uqmsvd asmuyy czxviw pznnmvc
sddwmek wnaea iwphupk sabo
cingdks ksh mtyip zltgafm dflkcd wbdnqup uokm gmxpyd libz svv akce
qge ewv dkabkmb xcpi nrkmsu mkmb djvamg mhhrwjh
krjt etfhm bxzatw zdkvz ehov seyxbw mkiirs plzoplu sogmwb wodfcle
qwea adibdp emo homrd pjcrhlc eqaw kqsrp rphjlcc
gajzo nwjg qxjra jztcnir ijvjwez avxb afz zyywqz kcszgh elmlkfh
lbz ozia bctf bumoji anhil rta xvit
ejybire ypjl qevak fzalx mlh qxlei zib
xmzas kwojjz ntrnrw nbmxlv mdgxs xjhxg suo zdcrxl qkujisz pxmu
eezyd unrtm wyu vhufvto rpb isfcy ygh hgy
nszvbzv ebtt memrsva ebtt qwcaq bhbas pvzfbov ppjbdy nszvbzv jabvrp
rlo zbmi lugvu yeby
tfcd tvl faaq mnural nyarh xnxk ctdf bodz
vwdrhc gub bgu fpcovx rcvwhd jukwsue
aekrhi lpknnrh bett tkib ioqrap igwnst aekrhi lhha
acg mknhazp pcgjuk tajplv
masq fyjkn agq qhxbbl qga npzj fme xtihic rntisg iqv aqg
ipagh fjth mswztpi iexd cocojy vhqrla joe wrsrmw
njztu tsh auqrxca zpp
jctn webxi haq irrr qox irrr webxi
reaw axmnvd voakf lnz ftbxfh zjyxzl pryfjpv sistgb pov mshs
gsy ctsngl ptmnyx vpjx zpvtori pfu ioycdrq
aobdtlj osdnrth sgqe geqs qegs
oamrlxk ygbb rkamoxl nztl sarbmtj yqupjt plu sbtarmj vpa rxea
yvhgp yznko epwpza gqrsod rilukp cglhomj wnaplu ugvdko qdr
cggztg ajw gggzct ubmiefj kpa
rel lvasbh kobm mdnzla pwnyj ehep gzx nhjdnsg rxa
qaz gook rplqwh vsht
dhe aneq ivrn awekad ckcbt zsqca ehd rvni oulwfuu
oxgzzow wntz tkqaoi oxgzzow lwkdpgy lhd aekjasp tkqaoi dnhaw
alxghco cpanoa onjh hyeyebe whxn zfu zozbll gojn
zdqulsa dlqsazu zqudals sfedw
rydtrsv rrtvysd fvyza drdgh lsfzt blnxr cnxe tslzf iijyds ylcxn
cczea nxx kwol kopaza wuvr cyvoo whlicv
zbmrwdq tlzbevx jwzpsc uvkwpd bmss rbzblj
jogx jgi gji hypmtkg ijg oscjv
flkoqja kwmrqv wzehel fvmcfap mkwqvr ivwxg jqfwdvo hweezl
vgjg nzucho nuohcz ggvj tmxci
fqaqx zeybhtg bxeic lftuqp wzuerz sww qfltxk
keiy myrvp blkxcg lncqmsu diittlg fqrf digrel cpwrk ipan dkxb bymlzo
owm irygdz pyhj mow wmo
noul pbvvt zcv ueqyjl zhetlw lpjfhli
felvwb wdykz kyibdz haq qkouj vuav oztyqh
dyxo njcr hcuk ysrr pucw qbajztc
ooyaz pmt hqwu gjx tmp tpm pwz
lyhzajz dfot avyifo kdwka pwypcep kyyw tirlku zdpjmft
aexle hfxo dacwvcy xsiotyg cifq ibupshj aktt rzvf pgafj
pxubhw ibpm jxtxg iwnssf osbpj
exmtfyx blbfg emrunru zkuhoi lfzn zrj unmcece phuppi
icomb rmy mvsqqkh zwjubz lumq wekx
cmdgs gsr pfhqx pfhqx cmdgs pga
rpyf jejc adaiou dutv imbenyu dqw zhebjhu pryf vtxs yprf
cxj roprjn rqoh qacagru snxd
rczvi hfpl luc yowgj nvavlhw vjudkmv dwu teq
klwc cktzh ksnvswl nsgeu xyohp mhs fxnjhm fwrcg rdeadkx cim
ounvb vzqje ujctzzk iyy vxck ebtvbqr uswsmcr jveqz qejzv jmi pboq
lwffygh mqsh vnnj ufz qhms gqfuxo lurzmu
buf psdluck gapwoo wgll sbfavbc lljfvzx cdgo rpt sfvabcb
svefr kubbri fervs nboi zkvq
jwr vtc zkcpzb kczbzp cdned pzbzkc wigjuak fszgweu odflfek
vwdqm khnnj plokjg vnce venc vecn yzxtgb
tawl yrhoz tawl yrhoz
vvehsl kdhzgme rix rcs btm pxnlsps vlhesv sxpnslp yqjtool
eqpyw kpmkcyw wqhglxg ajfzo hbd qvmhy nhokah iisqvad kxuyd fxek
jsz txhwhah hxt djnvl srylveu pxp dzmmn epek tzs
joyzql jqczueb rtdyw fyc fjirfyn tjcalz joyzql fyc
pjrmiz xwnmwns kcqjuut zfgxhdr octwn kqppg zhfgxrd wmwnnxs
ema yqxqs aljjo ajloj wozb
urgmhiz epqj vhhaxdm ptlsvig qzbmm cumbho lkg gyzmg eaopyzf ncfy mqe
ijvwvo oszkees ugvyk hjdj ftip itfp
ylfw qutzdj mgqp cyjss yzsdqqi iykvs fyor sthyqp mrjtzee hgo zwqbtgk
bkfkns gco bykzc mje dwmkrwt ljegqor yxjxp oaleuu
xeltq ggyqis aud frtyxhx iwz wiz fwoxz fozxw
zdu nwduqsa nced iphaaxo
bqjj oah ezd brhgxrc pmkz kdog exw
ihatt hck iepn egemprp wrz wzcuo xjzeaa wku ivjvihh
cwkuof bmj qmxd qbtms zgdei bsqmt ssndhw eeenku lcsqy bvvodr
tek zsgytci vgoun kwwu
jcxvp ijxc buqgix uil zfoku
ggndshq bmjeo yqaxtik blspz yofh edaroy
ipvtxh ouye elln dllvx iqza nhwf zyfw pvlky
iydcx gvarm gvarm wegmiy
sfjd liiflle mulboe qywzs tzbns trojl pad mnfcrhb sltb
gthqj jvpsof jwlfyeg jwhlfj
qckv umzrge gnzc mnr xde
gvgxmhv txnait taxint ius iboqdj
vsfex kbpvsby qembkb efxvs vhflzvm eaazg dyg bbmekq
wxpfk xwfpk xwkpf cjsyi
knzg eefq feqe seppop ttxz qnqfn atgsy cch mkjlbwt uyhct
quzw jbiw miqehe qvf jyipqh kzcjxyh
teuvzf tdtwoi pcuafa cwgjk ccur lgmqv jpjdkk efrnw uloqn dpkjkj lwloeph
yaffjy xntstsv gygq sxttvsn tvnstxs
cvbmdf pfrfkna wupv van iocb hsiyke obspj ytyfkl hbsqtij hkcw
oeddmnu koso mdodeun ybe mhjbmwy ubejz soko yxvuv
nylhy ylnyh olb vcdik
gsp ilba llnu jjk urbvuma qzypf bkceotg ezxq hyvjngf
tfnegyq rue waeif tfnegyq mvqm
wvgnsk cpd oib wrdfaz kohwgkc kzzig hogkwck gkizz
fecuuyp yfq bvanvxb cjeqwf unw dccr qzh zqu voakj
utoazh bjuq kmhcre izmny mirorsy twnl jyoc
fnnpd dmr ccgu eqgewc zuqivf
kkxiba qdabuen oikaz dnuywmm
aogud adugo uzcglpj lucv dgoua mdsqa mvrg
lymhv sof hvyml mlvhy nit
chu bwxp xpbw ghaix seklnc ola zofnrwt uch
wtt abob vblijtd oabb qjws
uozrpw kgf gxidxm uehdr fta pqakkrq atf fat woaolk
gaee voshd ghlyy emvzlkg cmcgk tuwlsj jwtsul znrta mjieqph glker
qiugxas gkg cbzmoz kahs obzzcm
puz omcokz gjc heuqb
dgndhb wid wdi scwnrjf juaisgo eivaw hgdndb
mgcrd hnqg pkpeb vprxcp
atlcnzp fyp cpkivxi bzj ypf cqpt bysu
pnd jiitmzs csw mxnpck vxutdrs ivipzy cws xiegsy qut
txlk avcvbuu hnq yyriq ajyswd urgiwc
qgiqut gvblizs giqnfrk tty mvoj wpikl giqnfrk bkdpndu xztmxn hsmqxf
llthg zjslki wilj rcyfois bavz hrqxn
ytbw hlkl vip skycogy ejiirhx
ndmtg bthlbw lsoq cvlvo sqol sqlo bppl sdkbls dtpyzrq vgm
psm xpj xjp lqi spm gqirw aglpj
htg fcchvyt xffev szdu lieadft
nbjo qohgzu vofg vvild dbtyi pdolxn plnoao jxze xlpbxj brajzg
urpp jjv lihmvp ivkwdqr sesyp ypbry qok sesyp ivkwdqr was
yinepzv qvnzdtf apv ucxo bdioo juga hjfsyl hmowo avc
dmiv tplae iiuiaxx tpale pyzkc
giwhst mpexd byfyc swuzkc
yydkwp xuu vjya kav ujmcxy qrtp zvlk
lsvdyn tkw qxu omvlc wwmfvov mrgcoov dhpu tfair hupd zbx njzgwtw
zuz rsxc xsrc gdwwf nycsv zzu kcu
unlvzv jerqqgm nozma ykbflj qihqkx
pctffo begf ivrvy ezru mvqt waocq
tubtuk gxkc ikgw bjrird kxjebbh sbjyc yafkd khqajmt aclpmf gqfo yrpf
rdt vrxa fyudo myeosb ursflwk
wbjras edlbwdp ctobtw jbvtvcd xjgoo cmunxm mjtbpi klovx bypmsab unc
xckml uztr htublq vilabvr jdiwus qejxur evfw qqm
tzqq tzqq wkb wkb
dgmg ljzc dgmg mbmco cgze qsap jccvot uors iiq
rwvac woylk dmn teorprx nyuvz hcwwxlj lvej drbjo asjgq
ljen tpfl vixcivr guaf lnje waim jlen
djgaa janhi adudm yzv zkcb xqw fgvrz
kpkjoon ggzx skp rqcsw xgzg zgxg jtf ghc
rtnyxo qixfd nphekk mouzk gny fpzquw qgywx rpr gqydze
gawdlv vrivoof rte iyp gaih sfzplm
csojx wzojode uzy qulr lylmb guvtkwv
ovxj aamms ftxo ebckdqw wqvsdci jwfqxks jafrcrn yyomrot
qnu jqwr ywudxk qpsez rdc kiyfz iiecf dthxjjb bown
typ zxcvjo rip acjhl paaab qhqipg xkguye sbxy pomkvn
ofvaegv hgak oafevgv hkemar rqkha grklnsp msvkkku rekahm bxmjnw
ahoihju sdyn phi uhz lupbx
lavt jef klmq oqyfpf kis nazul ymezxek xpla fxyrfnt
nwnagwy hvpjqfg sgm ungfstr gso owqqxjh
hey hye ipyrt qxmthg jth wpbr hxgmtq cvfkfux qykdzhk movcfnl vxyoc
zsras abnrj fgaczuk ssazr xzf cnxu gns wnqqy dwjh szars
uhb zanlvh lvdotkb xekl kcofo
lhx iccy ibkjw ciykxaj imsx ehamqlz iwzapxc rhaltv
pofit owmpqej vwrobh jvox gdqehss yyxd styu tfkm fiotp
ecz mdpoqsv mdpoqsv yxx rexok hcfll yvury hdhcfu juhkvpt rspnfj hxvgdir
ohed mtigaoe eodh agmiteo
vjvv hfco cppbxtw hawsjxz ovlsq qgs risgwhg auhj
togivgg czrtvw ccz wzvtrc bse lsk
ndc ndc lrfi iyleol nchx jxpv xdcsfmp nnx wtvq pih tgc
hzpf sur zhfp klfmhx lbuidp xiqimnf
qddpdk trfxpip pnsowj hidgvnf prur rsrautp aamykfm fysqjmq xwzjane mbmtxhf oqctt
lfd eops govslp ultbye vrqai hcjkcf snpape
cbok koumkad otpozb pqcs emilpe wpcyvxd bock
spjb xkkak anuvk ejoklh nyerw bsjp zxuq vcwitnd xxtjmjg zfgq xkpf
juo pmiyoh xxk myphio ogfyf dovlmwm moevao qqxidn
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day4-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)
(use srfi-113)

<<src-txt-io>>

(define (is-valid? line)
  (let* ((words (split-words line))
         (word-symbols (map string->symbol words))
         (word-set (list->set eq-comparator word-symbols)))
    (if (= (set-size word-set) (length word-symbols))
        1
        0)))

(define (main args)
  (for-each
   (lambda (in-file)
     (let* ((lines (split-lines (load-txt in-file)))
            (sum (apply + (map is-valid? lines))))
       (format #t "~a: ~s -> ~d / ~d~%"
               (car args) in-file sum (length lines))))
   (cdr args))
  0)
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day4-part1

tangled/day4-part1.scm: "tangled/day4-part1-exercise.txt" -> 2 / 3

tangled/day4-part1.scm: "tangled/day4-puzzle.txt" -> 466 / 512
#+END_EXAMPLE

*** Day 4, Part 2

**** Data

#+begin_src txt :tangle tangled/day4-part2-exercise.txt
abcde fghij
abcde xyz ecdab
a ab abc abd abf abj
iiii oiii ooii oooi oooo
oiii ioii iioi iiio
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day4-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)
(use srfi-113)

<<src-txt-io>>

(define (is-more-valid? line)
  (let* ((words-sorted (map string->symbol (map sort (split-words line))))
         (words-set (list->set eq-comparator words-sorted)))
    (if (= (set-size words-set) (length words-sorted)) 1 0)))

(define (main args)
  (for-each
   (lambda (in-file)
     (let* ((lines (split-lines (load-txt in-file)))
            (sum (apply + (map is-more-valid? lines))))
       (format #t "~a: ~s -> ~d / ~d~%"
               (car args) in-file sum (length lines))))
   (cdr args))
  0)
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day4-part2

tangled/day4-part2.scm: "tangled/day4-part2-exercise.txt" -> 3 / 5

tangled/day4-part2.scm: "tangled/day4-puzzle.txt" -> 251 / 512
#+END_EXAMPLE

** Day 5

*** Day 5, Part 1

**** Data

#+begin_src txt :tangle tangled/day5-part1-exercise.txt
0
3
0
1
-3
#+end_src

#+begin_src txt :tangle tangled/day5-puzzle.txt
0
2
0
-1
0
-4
-5
-5
-4
1
-6
-10
-9
-1
-1
1
-15
-15
-13
1
-2
-13
-6
-22
-10
-15
-3
-19
1
-26
-18
-13
-15
-15
-10
-4
0
-35
-4
-37
-29
-30
-38
-38
-13
-36
-42
-5
-28
-17
-34
-41
0
-41
-36
-46
-7
-51
-49
-47
-45
-30
-58
-33
-22
-38
-49
-37
-44
-53
-18
-66
-46
-47
-58
-22
-34
-41
-13
-41
-30
-34
-15
-38
-60
-61
-73
-20
-62
-48
-19
-40
-69
-86
-75
-9
-29
-2
-48
-96
-46
-89
-76
-34
-65
-38
-69
-5
-12
-54
-72
-87
-23
-82
-12
-24
-16
-115
-83
-3
-109
-72
-42
0
-48
-9
-34
-67
-83
-20
-33
-76
-81
0
-16
-106
-58
-91
-102
-123
-135
-85
-109
-61
-70
-103
-43
-104
-119
-75
-129
-104
-87
-95
-63
-1
-118
-49
-71
-34
-129
-52
-103
-98
-132
-119
-50
-36
-35
-24
-98
-139
-58
-25
-93
-82
-87
1
-14
-109
-89
-25
-96
-60
-79
-5
-124
-62
-44
-98
-119
-189
-66
-121
-151
-4
-14
-16
-154
-39
-51
-127
-13
-129
-98
-28
-6
-174
-169
-139
-22
-4
-2
-48
-62
-58
-163
-169
-124
-104
-205
-211
-43
2
-135
-41
-88
-208
-28
-124
-172
-223
-76
-98
-146
-55
-209
-197
-134
-93
2
-227
-39
-235
-240
-206
-70
-65
-38
-175
-198
-80
-10
-246
-228
-23
-84
-177
-81
-119
-161
-246
-75
-72
-243
-78
-233
-50
-204
-7
-206
-220
-46
-249
-135
-130
-143
-42
-65
-52
-79
-112
-147
-273
-54
-88
-200
-227
-24
-166
-113
-189
-30
-174
-55
-107
-14
-144
-148
-46
-263
-225
-85
-14
0
-197
-10
-6
-93
-153
-302
-176
-182
-251
-213
-9
-221
-111
-39
-134
-214
-155
-321
-212
-2
-207
-298
-124
-28
-78
-213
-194
-111
-159
-171
-240
-175
-99
-63
-162
-115
-147
-265
-153
-325
-19
-134
-49
-240
-322
-79
-61
-66
-127
-292
-282
-49
-114
-89
-16
-353
-181
-151
-72
-290
-313
-279
-351
-111
-220
-172
-98
-28
-223
-58
-51
-194
-138
-143
-308
-123
-28
-347
-87
-115
-295
-148
-116
-108
-267
-51
-346
-215
-44
-379
-309
-237
0
-212
-119
-231
-140
-270
-91
-146
-245
-232
-119
-131
-398
-264
-181
-303
-186
-404
-280
-412
-375
-292
-251
-138
-36
-18
-217
-117
-56
-272
-312
-160
-70
-130
-16
-279
-159
-6
-268
-283
-259
-197
-378
-24
-45
2
-390
-50
-246
-233
-294
-231
-364
-316
-189
-231
-74
-288
-286
-25
-317
-371
-434
-249
-54
-151
-234
-95
-158
-335
-362
-28
-438
-103
-173
-332
-97
-444
-459
-255
-295
-26
-120
-2
-152
-432
-191
-63
-313
-465
-1
-228
-468
-331
-231
-123
-403
-479
-441
-19
-75
-264
-483
-371
-277
-343
-52
-160
-489
-182
-338
-461
-233
-459
-291
-54
-61
-352
-276
-206
-290
-456
-81
-14
-331
-385
-241
-149
-421
-24
-12
-297
-93
-412
-478
0
-219
-157
-328
-344
-367
-343
-123
-349
-441
-197
-317
-165
-329
-515
-74
-443
-197
-75
-52
-534
-330
-178
-509
-199
-502
-429
-362
-422
-555
-183
-221
-461
-338
-496
-28
-507
-276
-271
-511
-298
-426
-144
-112
-198
-496
-158
-350
-326
-219
-315
-394
-555
-10
-422
-420
-216
-386
-344
-374
-567
-15
-23
-434
-44
-346
-110
-561
-198
-505
-103
-374
-107
-298
-38
-26
-171
-235
-324
-427
-359
-130
-500
-31
-221
-402
-240
-283
-47
-20
-422
-453
-31
-470
-115
-97
-120
-41
-590
-437
-53
-563
-440
-254
-545
-256
-341
-325
-417
-9
2
-442
-370
-317
-404
-498
-340
-402
-506
-381
-484
-582
-274
-157
-325
-445
-200
-56
-324
-31
-448
-407
-460
-84
-44
-387
-515
-206
-617
-322
-168
-340
-553
-629
-407
-344
-166
-619
-313
-222
-139
-199
-93
-474
-246
-165
-503
-636
-40
-298
-629
-294
-73
-438
-628
-632
-464
-512
-496
-683
-406
-241
-41
-251
-95
-264
-565
-183
-256
-634
-436
-660
-256
-528
-405
-4
-184
-513
-338
-476
-393
-449
-373
-585
-197
-334
-165
-161
-559
-424
-203
-1
-234
-511
-562
-234
-324
-339
-422
-269
-399
-249
-61
-630
-648
-37
-190
-196
-478
-150
-264
-40
-409
-600
-253
-708
-130
-463
-568
-292
-10
-350
-280
-617
-25
-218
-310
-72
-484
-741
-701
-284
-654
-442
-679
-718
-360
-488
-563
-192
-282
-342
-368
-95
-213
-511
-767
-194
-216
-574
-496
-770
-145
-652
-203
-26
-74
-564
-533
-605
-236
-183
-170
-755
-98
-174
-478
-476
-194
-167
-439
-724
-605
-364
-213
-35
-67
-378
-452
-59
-340
-663
-762
-506
-650
-223
-785
-53
-32
-241
-214
-274
-602
-308
-182
-367
-351
-327
-157
-526
-424
-229
-66
-669
-571
-538
-240
-379
-528
-667
-401
-832
-524
-651
-91
-102
-27
-586
-128
-836
-35
-653
-809
-109
-70
-707
-387
-351
-41
-7
-149
-10
-614
-181
-560
-24
-257
-305
-303
-91
-848
-249
-401
-624
-265
-751
-752
-367
-554
-715
-419
-449
-570
-62
-568
-203
-341
-751
-657
-347
-751
-639
-742
-307
-861
-706
-487
-644
-612
-390
-474
-565
-174
-263
-377
-307
-383
-390
-484
-722
-806
-874
-247
-570
-221
-51
-215
-641
-534
-427
-277
-647
-912
-787
-834
-270
-607
-354
-593
-740
-25
-222
-500
-494
-940
-442
-592
-938
-904
-580
-20
-938
-671
-199
-677
-917
-903
-206
-411
-917
-424
-300
-889
-501
-100
-117
-315
-678
-664
-579
-749
-636
-949
-642
-968
-343
-628
-190
-700
-705
-339
-240
-216
-628
-917
-724
-481
-900
-74
-291
-234
-934
-642
-874
-594
-955
-951
-341
-463
-706
-735
-556
-681
-985
-285
-604
-44
-153
-14
-78
-958
-44
-338
-765
-787
-487
-441
-518
-772
-632
-70
-74
-630
-362
-533
-684
-328
-407
-193
-727
-230
-454
-141
-568
-802
-326
-725
-464
-880
-990
-34
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day5-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)
(use srfi-113)

<<src-txt-io>>

(define (exec-jumps jump-vec :optional (start-pos 0) (count-jumps 1))
  (let ((jumps (vector-ref jump-vec start-pos)))
    (vector-set! jump-vec start-pos (+ jumps 1))
    (let ((new-pos (+ start-pos jumps)))
      (if (or (< new-pos 0) (>= new-pos (vector-length jump-vec)))
          count-jumps
          (exec-jumps jump-vec new-pos (+ count-jumps 1))))))

(define (main args)
  (for-each
   (lambda (in-file)
     (let* ((lines (split-lines (load-txt in-file)))
            (jump-vec (list->vector (map string->number lines))))
       (format #t "~a: ~s -> ~d~%"
               (car args) in-file (exec-jumps jump-vec))))
   (cdr args))
  0)
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day5-part1

tangled/day5-part1.scm: "tangled/day5-part1-exercise.txt" -> 5

tangled/day5-part1.scm: "tangled/day5-puzzle.txt" -> 343364
#+END_EXAMPLE

*** Day 5, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day5-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(use srfi-13)
(use srfi-113)

<<src-txt-io>>

(define (exec-jumps jump-vec :optional (start-pos 0) (count-jumps 1))
  (let ((jumps (vector-ref jump-vec start-pos)))
    (let ((new-pos (+ start-pos jumps)))
      (if (or (< new-pos 0) (>= new-pos (vector-length jump-vec)))
          count-jumps
          (begin
            (vector-set! jump-vec start-pos
                         (+ jumps (if (>= jumps 3)
                                      -1
                                      1)))
            (exec-jumps jump-vec new-pos (+ count-jumps 1)))))))

(define (main args)
  (for-each
   (lambda (in-file)
     (let* ((lines (split-lines (load-txt in-file)))
            (jump-vec (list->vector (map string->number lines))))
       (format #t "~s: ~s -> ~d~%"
               (car args) in-file (exec-jumps jump-vec))))
   (cdr args))
  0)
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day5-part2

"tangled/day5-part2.scm": "tangled/day5-part1-exercise.txt" -> 10

"tangled/day5-part2.scm": "tangled/day5-puzzle.txt" -> 25071947
7.01user 0.04system 0:05.80elapsed 121%CPU (0avgtext+0avgdata 17040maxresident)k
0inputs+0outputs (0major+3020minor)pagefaults 0swaps
#+END_EXAMPLE

*** Alternative Bigloo Implementation for Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day5-part2-bigloo.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
(module day5-part2-bigloo (main main))

<<src-common-bigloo>>

(define (main args)
  (for-each
   (lambda (in-file::string)
     (let* ((lines::list (load-txt-lines in-file))
            (jump-vec::vector (list->vector (map string->number lines))))
       (printf "~s: ~s -> ~d~%" (car args) in-file (exec-jumps jump-vec))))
   (cdr args)))

(define (exec-jumps jump-vec::vector #!optional (start-pos::int 0) (count-jumps::int 1)) ::int
  (let ((jumps::int (vector-ref jump-vec start-pos)))
    (let ((new-pos::int (+ start-pos jumps)))
      (if (or (< new-pos 0) (>= new-pos (vector-length jump-vec)))
          count-jumps
          (begin
            (vector-set! jump-vec start-pos
                         (+ jumps (if (>= jumps 3)
                                      -1
                                      1)))
            (exec-jumps jump-vec new-pos (+ count-jumps 1)))))))
#+END_SRC

Results, for example and puzzle input. Runtime is roughly half of runtime with Gauche Scheme, where adding type hints
did not change much.

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day5-part2-bigloo

"tangled/day5-part2-bigloo": "tangled/day5-part1-exercise.txt" -> 10

"tangled/day5-part2-bigloo": "tangled/day5-puzzle.txt" -> 25071947
3.36user 0.00system 0:03.37elapsed 99%CPU (0avgtext+0avgdata 9916maxresident)k
0inputs+0outputs (0major+1432minor)pagefaults 0swaps
#+END_EXAMPLE

*** Alternative Kawa Implementation for Day 5, Part 2

I Tried various options to compile to a class file and then run that - but that didn't work. Whatever I tried, I got the
error "Could not find or load main class ...".

/Note:/ No need to set the class path since the default class path is the current directory.

#+BEGIN_EXAMPLE
cp day5-part2-kawa.scm Day5Part2Kawa.scm && kawa --main -C Day5Part2Kawa.scm && ls -calt *.class && javap -p Day5Part2Kawa.class && java Day5Part2Kawa

cp day5-part2-kawa.scm Day5Part2Kawa.scm && kawa --full-tailcalls --no-warn-unused --main -C Day5Part2Kawa.scm && ls -calt *.class && javap -p Day5Part2Kawa.class && java Day5Part2Kawa
#+END_EXAMPLE

So instead I run the script with the interpreter, see the respective Makefile targets above. Sadly this also means that
we cannot compare benchmarks results to a hair.

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day5-part2-kawa.scm :noweb no-export
:END:

#+BEGIN_SRC scheme

<<src-common-kawa>>

(define (exec-jumps jump-vec::vector #!optional (start-pos::int 0) (count-jumps::int 1)) ::int
  (let ((jumps::int (vector-ref jump-vec start-pos)))
    (let ((new-pos::int (+ start-pos jumps)))
      (if (or (< new-pos 0) (>= new-pos (vector-length jump-vec)))
          count-jumps
          (begin
            (vector-set! jump-vec start-pos
                         (+ jumps (if (>= jumps 3)
                                      -1
                                      1)))
            (exec-jumps jump-vec new-pos (+ count-jumps 1)))))))

(define (main argv)
  (let ((args (vector->list argv)))
    (for-each
     (lambda (in-file::string)
       (let* ((lines::list (load-txt-lines in-file))
              (jump-vec::vector (list->vector (map string->number lines))))
         (format #t "Kawa: ~s -> ~d~%" in-file (exec-jumps jump-vec))))
     args)))

(main command-line-arguments)
#+END_SRC

Results, for example and puzzle input. Including script compilation, runtime is roughly the same as Gauche Scheme, where
I only tested the coded with type hints.

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day5-part2-kawa

cd tangled/ && kawa --full-tailcalls --no-warn-unused -f day5-part2-kawa.scm day5-part1-exercise.txt
Kawa: "day5-part1-exercise.txt" -> 10

cd tangled/ && /usr/bin/time kawa --full-tailcalls --no-warn-unused -f day5-part2-kawa.scm day5-puzzle.txt
Kawa: "day5-puzzle.txt" -> 25071947
6.31user 0.37system 0:04.68elapsed 142%CPU (0avgtext+0avgdata 340296maxresident)k
0inputs+96outputs (0major+81903minor)pagefaults 0swaps
#+END_EXAMPLE

** Day 6

*** Source, common parts

#+name: src-day6-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>
<<src-find-min-max-index-count>>
#+end_src

#+name: src-day6-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (in-file)
     (let* ((lines (split-lines (load-txt in-file)))
            (init-vals (map string->number (split-words (car lines))))
            (nb-mem-banks (length init-vals))
            (mem-banks (make-vector nb-mem-banks 0)))
       (vector-copy! mem-banks 0 (list->vector init-vals))
       (format #t "~a: ~a : ~a -> ~a ==> ~a~%"
               (car args) in-file init-vals mem-banks
               (run-it nb-mem-banks mem-banks))))
   (cdr args))
  0)
#+end_src

*** Day 6, Part 1

**** Data

#+begin_src txt :tangle tangled/day6-part1-exercise.txt
0 2 7 0
#+end_src

#+begin_src txt :tangle tangled/day6-puzzle.txt
2	8	8	5	4	2	3	1	5	5	1	2	15	13	5	14
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day6-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day6-common-header>>

(define (run-it vec-len mem-banks :optional (nb-calls 0) (known-hashes '()))

  (define (mem-hash)
    (let ((mult 1))
      (apply + (map
          (lambda (block-idx)
            (let ((res (* (vector-ref mem-banks block-idx) mult)))
              (set! mult (* mult vec-len))
              res))
          (iota vec-len)))))

  (define (distribute max-idx but-last rest)
    (for-each
     (lambda (block-idx)
       (cond
        ((= block-idx max-idx)
         (vector-set! mem-banks block-idx rest))
        (else
         (vector-set! mem-banks block-idx (+ but-last (vector-ref mem-banks block-idx))))))
     (iota vec-len)))

  (define (distribute-partly max-idx how-many)
    (vector-set! mem-banks max-idx 0)
    (for-each
     (lambda (iota-idx)
       (let ((block-idx (modulo (+ max-idx iota-idx 1) vec-len)))
        (vector-set! mem-banks block-idx (+ 1 (vector-ref mem-banks block-idx)))))
     (iota how-many)))

  (let* ((blocks-to-spread (- vec-len 1)))
    (receive (max-idx max unused)
        (find-max-with-index-and-count (vector->list mem-banks))
      (receive (q r)
          (quotient&remainder max vec-len)
        (if (and (= r 0) (> q 0))
            (distribute max-idx q q)
            (receive (q r)
                (quotient&remainder max (- vec-len 1))
              (if (> q 0)
                  (distribute max-idx q r)
                  (distribute-partly max-idx r)))))
      (let ((new-hash (mem-hash)))
        (if (member new-hash known-hashes) ;; Note: memq doesn't work here
            (+ nb-calls 1)
            (run-it vec-len mem-banks (+ nb-calls 1) (cons new-hash known-hashes)))))))

<<src-day6-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day6-part1

tangled/day6-part1.scm: tangled/day6-part1-exercise.txt : (0 2 7 0) -> #(2 4 1 2) ==> 5

tangled/day6-part1.scm: tangled/day6-puzzle.txt : (2 8 8 5 4 2 3 1 5 5 1 2 15 13 5 14) -> #(0 13 12 10 9 8 7 5 3 2 1 1 1 10 6 5) ==> 3156
#+END_EXAMPLE

*** Day 6, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day6-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day6-common-header>>

(define (run-it vec-len mem-banks :optional (nb-calls 0) (known-hashes '()))

  (define (mem-hash)
    (let ((mult 1))
      (apply + (map
                (lambda (block-idx)
                  (let ((res (* (vector-ref mem-banks block-idx) mult)))
                    (set! mult (* mult vec-len))
                    res))
                (iota vec-len)))))

  (define (distribute max-idx but-last rest)
    (for-each
     (lambda (block-idx)
       (cond
        ((= block-idx max-idx)
         (vector-set! mem-banks block-idx rest))
        (else
         (vector-set! mem-banks block-idx (+ but-last (vector-ref mem-banks block-idx))))))
     (iota vec-len)))

  (define (distribute-partly max-idx how-many)
    (vector-set! mem-banks max-idx 0)
    (for-each
     (lambda (iota-idx)
       (let ((block-idx (modulo (+ max-idx iota-idx 1) vec-len)))
        (vector-set! mem-banks block-idx (+ 1 (vector-ref mem-banks block-idx)))))
     (iota how-many)))

  (let* ((blocks-to-spread (- vec-len 1)))
    (receive (max-idx max unused)
        (find-max-with-index-and-count (vector->list mem-banks))
      (receive (q r)
          (quotient&remainder max vec-len)
        (if (and (= r 0) (> q 0))
            (distribute max-idx q q)
            (receive (q r)
                (quotient&remainder max (- vec-len 1))
              (if (> q 0)
                  (distribute max-idx q r)
                  (distribute-partly max-idx r)))))
      (let* ((new-hash (mem-hash))
             (hash-mem (member new-hash known-hashes)))
        (if hash-mem
            (+ (- (length known-hashes) (length hash-mem)) 1)
            (run-it vec-len mem-banks (+ nb-calls 1) (cons new-hash known-hashes)))))))

<<src-day6-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day6-part2

tangled/day6-part2.scm: tangled/day6-part1-exercise.txt : (0 2 7 0) -> #(2 4 1 2) ==> 4

tangled/day6-part2.scm: tangled/day6-puzzle.txt : (2 8 8 5 4 2 3 1 5 5 1 2 15 13 5 14) -> #(0 13 12 10 9 8 7 5 3 2 1 1 1 10 6 5) ==> 1610
#+END_EXAMPLE

** Day 7

*** Source, common parts

#+name: src-day7-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>

(define-record-type <node> make-node #t
  (name node-name)
  (weight node-weight)
  (childs node-childs set-node-childs!))

(define (parse-line line)

  (define (parse-prog str)
    (let ((parts (rxmatch-substrings (#/(\w+)\s+\((\d+)\)/ str))))
      (make-node (string->symbol (cadr parts))
                 (string->number (caddr parts))
                 '())))

  (define (parse-sub-progs str)
    (match (string-split str #\,)
      ((sl ...) (map string->symbol (map string-trim-both sl)))))

  (match (string-split line "->")
    ((ll)    (parse-prog (string-trim-both ll)))
    ((l1 l2) (let ((n (parse-prog (string-trim-both l1))))
               (set-node-childs! n (parse-sub-progs (string-trim-both l2)))
               n))))

(define (parse-progs infile)
  (map parse-line (split-lines (load-txt infile))))

(define (find-root-name progs)

  (define (%find-root-name progs known-childs)
    (car (set->list (set-difference (list->set eq-comparator (map node-name progs))
                                    (list->set eq-comparator known-childs)))))

  (let loop ((rest-progs progs)
             (known-childs '()))
    (if (null? rest-progs)
        (%find-root-name progs known-childs)
        (let ((prog (car rest-progs)))
          (match prog
            (($ <node> name weight childs)
             (loop (cdr rest-progs) (append known-childs (node-childs prog)))))))))
#+end_src

#+name: src-day7-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (infile) (format #t "~a: ~a -> ~a~%"
                            (car args) infile (process-infile infile)))
   (cdr args))
  0)
#+end_src

*** Day 7, Part 1

**** Data

#+begin_src txt :tangle tangled/day7-part1-exercise.txt
pbga (66)
xhth (57)
ebii (61)
havc (66)
ktlj (57)
fwft (72) -> ktlj, cntj, xhth
qoyq (66)
padx (45) -> pbga, havc, qoyq
tknk (41) -> ugml, padx, fwft
jptl (61)
ugml (68) -> gyxo, ebii, jptl
gyxo (61)
cntj (57)
#+end_src

#+begin_src txt :tangle tangled/day7-puzzle.txt
qgcmjz (87) -> skzkx, pzkofch
remwlv (18)
ngrmq (80) -> cluej, ywrxbgi, saznyj
omqech (119) -> asqih, chotekn
xekwze (70)
qzjln (86) -> gstsuq, hwbzs
hpltlm (94)
diwnw (43)
losei (80)
xkzbkz (16)
rzzcyrh (7)
xkkyybu (7)
gcricg (135) -> oowec, vfsonrs, fcszioo
ikkvv (12)
ugdngw (79)
dotrpsi (42)
xxemgkm (34)
zfcck (18)
haumg (7)
knlyr (51)
nzeiwlc (51)
cuoso (35)
diphdjt (44)
pcafsei (61) -> aenhbm, urjmc, ckarib
cnaxol (35)
ydsxmg (40)
kmybac (1311) -> sjlax, cyvwqu, siiztl
lpano (18)
idgqyfk (12)
fqxtra (261) -> aclfkav, aaovpqz
erqjic (5)
ikmaui (13)
myxnc (14)
imzgw (120) -> gyprs, dxswnz, xxzms
uckfdi (25)
fcphzy (27)
bnyaw (30)
iujsypy (34)
nrkpq (96)
iylhfc (27)
fkxei (241)
rmxzhgl (39)
xxwpir (94)
rfvjk (49)
zdkvsp (65)
dqiievh (63) -> oemva, cnaxol, lsmev
aivrgc (50)
gvrkyb (12)
seasb (34)
qjnqrxg (91)
zlunbf (67)
rqpripo (1383) -> aergp, jhubo, yfznza
kutjx (19)
wrntht (12)
vjdkx (90)
uzxcmdh (7)
exlobhb (80) -> fuixzt, lbhoabl, actgtp, cdfdg
sxjxk (21)
bebmszs (75)
wvghqb (60) -> qvqwp, jafchi
ieqcv (245) -> areod, lrsaprr
mupmhq (77) -> iavoj, tnlit
urvmk (26) -> hpltlm, odyxpkn, owwucfr
zhmjupz (1101) -> lafvy, jzczzhm, cytrtqs
udjtzas (92)
nuxmb (97)
zaqhiy (30)
slijas (78)
vbkifa (32)
ginnjra (67)
blsrmal (20)
xdjqk (48)
fuixzt (45)
eczncbr (92)
hzlhf (323) -> fgvyiz, pjssop, yffeaia
urmzp (297) -> gfodmz, mixlrfs
ypixztf (80)
deuia (2103) -> xpcyuu, bjgwnd
akkjr (12)
rupuyo (31)
fotck (62)
gnkzi (8441) -> cqcmf, bhsmhi, lkisrer, wkwylw, xunaojn
aokaek (55) -> hqzsf, iraqghm
kfwcftc (66)
iefrt (81)
kcehqft (92)
qqfrfmp (114) -> rwzuaru, ypixztf, wvxne
qgxkjj (70)
ffxfi (81)
aecfqhz (35)
jyhalw (92)
ijymh (94)
rfprjll (81)
brbnff (942) -> rlyuhm, duqiho, opsqo
iouzaj (198)
udmpb (19)
gavjcu (24)
npqgif (21)
vwjmeq (12)
nlxvg (32)
shorw (163) -> rdlqapx, dzkxl
exmqzmu (226) -> ssqlqmn, jfwnt
vsznmk (94)
bfkxr (226) -> qurkt, egfqvs
gyuxgla (48)
cuanrjw (120) -> rtdsov, ypbvxys, gzlbsml
llzufnq (456)
kzvxp (67) -> amomsn, ucocpbv, vlmua, zigfqp, exmqzmu, batiqxv
vptuwar (181) -> zdkvsp, bdank
jywenab (449) -> uvdikh, kdamqdd, pksdzch
minal (8) -> shwec, ltkwjkw, koyyc
zsdbkwn (90)
gsbka (18)
rpvpz (132) -> xvikaq, efiio
bbrmw (1738) -> eimqx, mvrpacv, grmzk
xciyqzi (27)
cmxxnel (223) -> vwjmeq, afowbn
vedvg (63)
jxwep (642) -> pnygn, ufjyqh, svouyu, eqkks, tdkdi
tysfacj (14)
eoqoqq (94) -> emuzuk, cmcjml
rllanu (38) -> kgxms, cguyudo, cdvkhp
xlafbbu (99)
agnojmu (54)
lhdtxwa (79)
cnmtugy (23) -> blrmjo, blkwmr
zvwli (233)
bdank (65)
eebealj (7)
ugeuc (67)
vybcj (166) -> fknwa, aecfqhz, cuoso, okcpk
ewlzxp (284)
iystzy (35) -> xiqdw, ecxsy, kikilp, ozsipa
vumoui (25)
dahxznk (74) -> munngu, erpdbe
hkbpff (94)
nkiyss (97)
mlouksr (16) -> qmuueat, owmxj, uhnaw, dazqtu
wtjxdv (10)
mixlrfs (35)
vvcwap (1351) -> ltcqa, ieaho, apdrocp
afazbmw (74)
kskmlk (31)
xvanyc (65) -> tqpztin, nrkpq
fgvyiz (83) -> cyzdj, zmmze
rxkiw (153) -> aamnwt, ttqxk
vqhncp (107) -> agoptjb, qyeifkn
uvwbxrr (83) -> ghmke, bkzek, dpyrzzy, gcricg, pwxkp, nawqww, cfgjwaj
fszyth (30900) -> agvbghb, xopcltl, ifdqaup
ufaji (64)
xgxzul (18)
peokst (5)
xinic (215) -> cboxdc, atvmevd
ydkppqv (10) -> jqers, rllanu, ifztqrk, urvmk
srsjjft (52)
fwnnw (22) -> vyilf, wycodto, rmxzhgl
afowbn (12)
hwyjqlo (23)
qyjvqwn (270) -> xmrocio, pojbfof
riaadk (72)
pydqh (93)
mngflny (91)
fuwwn (50) -> rgxjg, pvuyft, yqsufra
cypafs (209) -> uloaqjr, yvlzlnd, wydgy, uquuws
pnnbt (40)
vtodml (176) -> rfvjk, njfxxqe
fqjafn (172) -> ebmdbz, utltope
eibjdy (12) -> idgwugs, cbazit, rmungsh
uapkd (91)
apdrocp (5) -> uhzdjta, icaiy, wfchmxn, rnsmk
skcmm (30)
pkoykgl (23)
oyatmo (21)
nhgqoun (67)
qaslzm (95)
agoptjb (56)
tqdtgzi (751) -> fxplut, ablnk, citooti
chcuadg (67)
cdvkhp (90)
nsbse (99)
gwbbe (12)
qcytpf (58)
vxxmj (113) -> kcehqft, pgzmhg
kylrxvv (153) -> ktoxzno, vfjmx
kcfvm (433) -> kvfus, vmkyxsn, dclvnt, yvkzq
lwqwrpg (90)
yixuf (120) -> rkjzfmm, kcxjnz
vqrzfp (164) -> ekmhno, smyqf, wzecczv
enuyf (54)
pczzyg (55)
gugquvb (72)
dnojir (83)
hsronxu (235) -> pgbhv, ottdek, jumdiue, xsrrz
ffkubc (60)
spzex (20)
naifqx (55) -> dzsqc, fzluu, pncikdq
yipippp (86)
ofegal (85)
doqco (155) -> apmra, xsrotj
rdlqapx (34)
lopis (245) -> hfwmhrn, wbugpb
azwmgvy (63)
apmra (53)
yxikq (95) -> jsilno, uyzvco
ietzw (733) -> fylsk, bqedfkt, hmpstv
xopcltl (69) -> cadju, zndcv, shxnlm, kmybac, sjaufyu, aluvk, zhmjupz
nsronp (38) -> xpulso, rxsllr, liatu, wvltmyv
qjcjey (93)
raopje (31)
gtbbe (466) -> jxfhkc, cugcfjb, lmijj, vqhncp, xbmjza, uekierg, xwsxb
keazs (49) -> qphnx, bdrjupf
rkjzfmm (10)
fhtyxty (65)
ejfvc (78)
mhotdh (237) -> udmpb, kutjx
swrda (16)
pcdwwsx (92) -> tyujzc, lghlhb
ygjfl (80) -> toarg, odiiboe, kqlidl, vjcjl
yimhrw (373) -> wewaq, woiffy
iysaej (30)
cguyudo (90)
uohzm (150) -> aozkpqv, ugvump
hpyjk (69)
hmpstv (205) -> isbsl, zfvrxs, gjmiong
seygrud (79)
nvdacd (48)
zzffzbm (24)
lgfhkns (23)
cyvwqu (40) -> cbgrkw, qancsuo, ppwjh
gbloa (78)
vtvhz (98) -> whpko, yvxlc
jcrbv (79)
ucalkgd (21)
ruvqq (33)
wbugpb (6)
jkenxh (178) -> flahmx, pjmvysc, ujfkgpk
yanech (194)
nvncoj (624) -> quvvrml, nilbqer, liwvo, rxkiw, cvzubu, gonle, tyannz
fqrqvhm (500) -> pcdwwsx, iouzaj, frdln
ydtamvm (94)
xsrrz (31)
wdclggm (81) -> szqbyiy, ngrmq, bfkxr, bvmnols
kndlm (86)
hxlom (8)
wwniofg (7)
gvwdr (12)
nhitw (66)
tnbuu (957) -> bpdjd, zmxnypj, sjldep
lynlnjr (7)
csbdis (99) -> utiueqf, gsbka
skzjwi (56)
agvbghb (3128) -> tfpggg, ugnsbfr, aidxe, djihb, otzlwo, nkhrpg, qctjxs
jsilno (31)
cqmdp (76)
aenhbm (278)
jturbxp (50)
iewhsnf (81) -> gilke, ohedu, grzkzam, dzino, ockea, seddq, hzggfe
gyprs (29)
yvkzq (111) -> gjoof, bqile
ukvepc (94)
ihdujet (23)
vncffh (13)
wtwmmmy (66)
pwydd (89)
jjkkl (195) -> lgfhkns, pkoykgl
aclfkav (18)
ggqyz (10)
eyekgw (95)
nafqfvw (94)
yocxio (62)
vvvvgzx (40)
sfbfkb (1699) -> fzhiga, jpjufo, wvpln
ufnshbq (82) -> ipkqb, rnllfw, vjdkx
ouciqi (45)
isbsl (16)
hdgar (23) -> deuia, wkfpb, yqdhlr, qojdy, uvwbxrr, njtrh
rmvsw (48)
vpicsc (61)
qeenjrf (96)
rhygakw (83)
soyuwm (52)
unknkby (96)
rjppftm (64)
frdln (30) -> tqyhzm, fpfvv, hltmydl
cbbyjs (8)
wrkgz (168) -> iylhfc, fcphzy
cdwtclt (151) -> thkezk, zzffzbm, lluabe, cyjex
qyguegc (38)
vdzxo (227) -> coyodgw, qgxkjj
rtkjnq (55)
pkikya (9) -> wcdiup, maajj, qfqhlzi
tjxtjg (7196) -> yhqov, kzvxp, nvncoj
owsfeci (227) -> juogz, sqzyu, pxyfbvy, csbxo, sbpdtfq
ogljepx (8)
ssufgph (237) -> vxgadew, iujsypy
ikkvmpl (21)
ohyndb (98)
eoqzo (51)
krodu (33)
hflxhw (50)
ouvco (90)
kktaa (309) -> ofvivee, vumoui
ipqrsx (18) -> kxvmq, cdgxjqk
hfwsmrn (12)
rlyuhm (103) -> igorbc, tnagy
duqiho (5) -> zuuor, lwqwrpg
lubvf (38)
aozkpqv (24)
bdnbvsc (60)
fuclj (51)
cwzgcb (72) -> eweeq, kmvor
yodjjz (51)
pbngkw (7)
wjuxxef (62)
mggnu (63)
lcwnle (94)
zcdwm (26)
aajog (52)
mwcqrpu (55) -> yocxio, fotck, qdchc
jlenggo (94)
rgljpm (67)
vvenem (59)
shkxavi (58)
tdxow (7867) -> mrxqlw, htzrkz, ghwgd
cqgfeau (90)
cyjex (24)
xhtqxz (40)
dzkxl (34)
sknyb (76)
aqgnukp (72)
ucqqqi (143) -> zojod, eijqpl
fwyuklw (39) -> axzwwto, ufaji, hxrppz, izfjh
fmtjcxp (94)
vcwxkxy (18)
thkezk (24)
aidxe (118) -> xzaleu, pwyqnm, zfnpy, cjowcmb, rzgwqq
ctjkvre (95)
lxsycwm (215) -> aqtupw, ogffnth
otrpt (59)
yhqov (1441) -> xzhdixq, rxctq, arajafq
zmtzdj (216) -> vweupv, ktmepg
tuxbrfu (52)
ehpsber (92)
qsxpo (1427) -> mlouksr, zcqzjv, fxejcg
msmar (58)
qhehe (1428) -> junno, hhugr, yixuf
azsjzcr (75)
aabivaf (7)
ktpudp (81) -> jczjrin, tdsznt
mlgxkzg (43)
yobqdj (111) -> gmkrufv, puvkwv
fvvsis (97)
nqctxw (98)
uxczdzb (6693) -> gcaev, bqruuvx, pcafsei, ubahwni, kgqfw
gbsjs (69)
bllys (18)
klzefiz (28)
gkejxoc (78)
vtifny (42)
lsvrn (408)
ebknkgh (75)
bvntvu (170) -> ynybi, nxweh, oyatmo
hwkly (43)
ggqznq (69) -> qnywf, kndlm
jafchi (73)
bhnnrnz (7)
moolvq (69)
qdnqx (83)
vyilf (39)
shmrpov (257)
yvusemj (63)
cboxdc (9)
vfjmx (61)
ycbet (188) -> runmsjd, jzgllr
rxgbyox (82)
oufdzsi (30)
hpoeayk (72)
vchyhs (102) -> unuscm, dmuhap
wpawu (65)
pwvjth (69)
cxgcf (102) -> moolvq, vskve
kxvmq (71)
feqwmhy (9)
pgiixde (59)
llhhjb (68)
kyktl (123) -> ednxkm, hbdvy
hrdvgwl (27)
xxmermc (22)
vuvsu (7)
grmzk (251) -> kzwvmh, kwxkc, zoyfhq, xccabhd
kmvor (75)
rnnoy (99) -> ihekxpi, bhbwz
zlekeh (18)
lxbgm (52) -> vxudcio, pwydd, rjncwf, kdhwxo
ciigv (90)
axcqrvp (59)
ixzpx (85)
sqqrkn (12)
ikygytk (205) -> iriwf, lpano
fjuytze (90) -> ucapgv, riaadk, tczoglq
jrwycer (31)
xewyur (190) -> iigqx, zzbbtqs
ldbfz (94)
pigll (57) -> rpjxbhc, ilbhxw, jjrqd, rgfhr
tcuxy (211) -> vbkifa, qecdd
jscxey (12)
pjmvysc (39)
nzoczg (15)
actgtp (45)
sgoep (81)
wfchmxn (40)
isnxyg (67)
jouzv (48)
xpulso (78) -> pydqh, qjcjey
ivlvuhq (73) -> gvrkyb, qnuhxta
fvaiqyr (634) -> ufnshbq, uuskq, qyjvqwn
gopevi (67)
qojdy (1003) -> hxxhe, jkenxh, kyktl, fwyuklw
ntozie (48)
gjmiong (16)
idrncu (73)
txoamw (96) -> iefrt, sgoep, skaiivy, gqdwda
kawbxw (123) -> pmuxnac, wndlhkf, qhcuolm
kdvfpg (68)
bfqjth (80) -> kcentfc, wxftfvc, bqnykil
mebzrnn (32)
yojkhdg (33)
uscpxzv (39) -> ntozie, jouzv
gcaev (43) -> ewlzxp, azreib, bkzadqb
cadju (633) -> kktaa, bfqjth, hsronxu
xbaebbl (43)
vlzkjc (47) -> cyygfy, bebmszs
vlxxwu (70)
znxhe (79)
sqnpby (45)
emacdc (42)
nzznh (36)
idbik (65)
zrxjkr (653) -> fpffxl, ekgfr, txoamw
jfwnt (46)
hjiiezg (44) -> yvusemj, azwmgvy
kcxjnz (10)
hxrppz (64)
wcdiup (63)
stoosc (55)
xhbqmie (68)
lmijj (103) -> txgxosp, gzjkmy
uinplcz (405) -> vpuqipd, csisv, shmrpov, zvscftj, lopis
uekierg (153) -> ruvqq, acgyx
fiazqvj (51)
znfoyv (25) -> bzgeoqg, ftvwc
cybok (31)
gilke (96) -> hlchui, utzqyl
gtlmfhu (36)
dqukfsg (37)
dlyei (87)
tngwf (68) -> txodvj, xkjagrq, qgcmjz, imzgw
wzzdih (79)
vginql (139)
kmheqrj (185)
hycppt (310) -> wupzqha, dmyewr
bwefj (31)
twvwpd (7577) -> skiyk, qhehe, cpjawpx
zuevpk (79)
sbvhk (30)
vrzzc (59)
ejbtd (41)
acilnmg (83) -> ciigv, kqxsjt, bpnbtab, pumgsq
yufve (8)
hcktpld (61)
ygprn (49)
quvvrml (105) -> wruwjn, qqskz
fknwa (35)
wydgy (11)
yrrds (65)
gzbnkz (12)
asqih (57)
fvcfdo (27) -> cdaccdo, hlrknn
dqntfx (281) -> lsvrn, suhmny, kawbxw, lxbgm
waewrc (92)
tqoul (17)
dxvyfrf (31)
qdcyv (125) -> hvptp, abzahfo
tsoub (222) -> akkjr, ikkvv
ufdpy (44) -> qaslzm, eyekgw
zgigo (8)
csbxo (153) -> gfqcad, ftuet
nxweh (21)
yujxzit (69)
ybddxou (33)
ygara (10729) -> fqrqvhm, nsronp, qbbsz
dmobyt (11)
anmam (66)
qayqkk (9)
icbkonc (23)
npkvkpu (1870) -> fkpxwb, shorw, tibqjki
loziss (59)
qnywf (86)
xbmjza (135) -> kspoovz, qwezgho
ixbgkw (20)
xwsxb (83) -> pbrsgs, rxzgrn
dclips (49)
uypdm (94) -> iaphph, ukvepc, nafqfvw, xgnrwy
xxzms (29)
lkisrer (129) -> aywhbw, qdcyv, vlzkjc, tihtr, okzwi
ieaho (31) -> tzitsb, etlto
vvsvez (57) -> utlqx, xzhdy, tlmvaep, nbyij, fszyth, zimrf
obvji (37)
luewm (195) -> mlgxkzg, hlbdk
efavpu (210) -> xklqajg, vtqjrpy
sqkepae (177) -> ksuqm, ygxgxmd
sfdsda (81)
cluej (84)
zssmks (57)
wcqclc (99)
xmuewfv (191) -> vhldh, ppbsza
ahbqrkw (20) -> gjimeu, mbvkb, ipuzdkg, hsycxw
bvmnols (220) -> pminuvd, omxbi
farimk (5992) -> wbqbr, igvsrs, ofauy, kbskq
kzwvmh (6)
uotii (191) -> emacdc, cedwljx
uyzvco (31)
susvwaq (21)
emlmom (62)
cytrtqs (59) -> aqgnukp, ekfimhl
rhutj (82)
fcdmywz (170)
xzaleu (109) -> hcktpld, beqrsjx
jczjrin (42)
pyvfqx (64)
ezgozo (141) -> gopevi, fmvboqy
dazqtu (35)
eotjep (37)
oujeg (25)
kuplqir (89)
lmzoi (647) -> wnryzjo, kykmrh, hjiiezg, huhjt, fcdmywz
ynybi (21)
bfweit (631) -> smryqv, llzufnq, temngvm
mhzsyy (97)
uavous (100) -> pnnbt, qafsun, ydsxmg, vvvvgzx
tipds (347) -> hxlom, gfopy
wmvdmad (39)
drooh (20)
bajystl (23)
tqppbf (73) -> nkiyss, tbbpr, odzlc
czvcms (1990) -> hefdj, ntmyjat, roxewb
rnllfw (90)
saznyj (84)
jtrpn (58)
ccmobzb (49)
kyigxxe (50)
hzhtm (71)
wnryzjo (20) -> azsjzcr, pkggwf
kyijav (48)
zmucrfa (71)
jzclx (86) -> iysaej, zaqhiy, skcmm, wuglbn
puvkwv (74)
orhboz (64)
mcpjzd (261)
ockea (220) -> zwzrlp, cdrivrb
urjmc (32) -> gnjdzkp, qyptue, opkqf
wazmp (50) -> tslnnk, hepcmft, gkejxoc
tibqjki (73) -> zuevpk, josri
hozmnv (75)
wgetx (165) -> enwcj, cqkxj
ybauin (97)
sgdaxgh (167) -> xkzbkz, mohfmrr
atvmevd (9)
wubtbdp (171) -> rupuyo, jrwycer
lmsrcz (113) -> fqxtra, iyhif, nwnfwyw, ssewuyv, vxxmj, eibjdy
oqnerup (998) -> jhsnju, ssufgph, rcrlwms
zimrf (1412) -> twvwpd, agtwdyf, lsuiiih, hdgar, tjxtjg
rkdhv (50)
vkdfymy (132) -> acjnfd, isnxyg
rcrjah (57)
qqskz (44)
txgxosp (58)
ctbne (70)
xegbm (58)
mrxqlw (566) -> xewyur, jzclx, nweseg
inovvz (87)
qbmqlty (1099) -> ruuad, equpkvw, wwzreqg, sgdaxgh
dzsck (90)
vxudcio (89)
dqeoi (25)
njfxxqe (49)
jjrqd (50)
ekqlbr (18) -> wclwqix, bfweit, iewhsnf, veriopw, gtbbe, ftgff, nscyh
eweeq (75)
xzhdixq (34) -> nvdacd, kyijav, miymqw
qekcxr (49) -> cwlwzhy, ircgvnq, qsxpo, lmsrcz, qbmqlty, uizzbd
kdamqdd (119) -> kacgf, yynsrtq
rlals (13)
pbrsgs (68)
icblguo (82)
odzlc (97)
xjicbre (91)
hokdx (48)
xaacva (72)
yagku (31) -> xihae, vlxxwu, xekwze, jqeuxjc
hpiil (54)
tetnp (50)
tdsfl (93)
xkjagrq (41) -> rfbgops, qdnqx
acrpk (24)
ynevzr (9)
elxtgq (345) -> ybddxou, cuuuxw
wclwqix (963) -> nqswhd, mpxji, sqkepae, yobqdj
ghwgd (370) -> vtodml, nvxdw, eoqoqq
jybokd (61)
svouyu (225) -> ntkgyj, dvmpj, bnyaw
ofvivee (25)
ftvwc (80)
xdilahf (27)
qwcnhxs (19) -> ybauin, rftle
hxxhe (169) -> acfgtnp, xnniv
gmkrufv (74)
qafsun (40)
slthtvl (7)
tcsisyq (42)
pdclutm (86)
gvdqk (228) -> dnwfv, orhboz
wewaq (35)
bzhsmk (29) -> mqkpcxq, qzxdbvb, rxgbyox
dzqvp (67)
bkaowc (99)
xvikaq (54)
wtyeqkr (81)
efiio (54)
scpwjv (37) -> dvtfl, btvche, cvdfmn
fzluu (14)
orohja (48)
ksuqm (41)
ssewuyv (24) -> wtdgjd, dowcukk, qoyyyzt
vlqciig (49)
enwcj (34)
qdpcofy (763) -> nmgoh, wvghqb, gfiogpk, qzjln, pjdxt, qsatxh
hbmcb (160) -> lduyqm, npqgif, rsiom, ucalkgd
fumrjy (113) -> ugtwn, mgybe
ueyfa (117) -> ecdmtkz, ivibm
lbhoabl (45)
vrdezgb (83)
xytanzt (246) -> lhqqfh, giwrnux
lsmev (35)
hefdj (191)
lluoxxt (83)
tyujzc (53)
hbdvy (86)
wwzreqg (46) -> eoqzo, wzahu, quzew
qwnxufh (33)
zhzkbp (88)
zqxrmoi (23)
cfgjwaj (248) -> ikmaui, gmsrhnn, eatuwzc, rlals
rgqyd (259) -> ufdpy, zmtzdj, stxzzh, aikjla, hmbxr
xgnrwy (94)
siiztl (133)
vtqjrpy (8)
fyopf (27)
ckarib (232) -> sqqvakc, icbkonc
jjgevqi (60) -> jttvktl, wkuajq
ppbsza (28)
elkot (264) -> atzvica, rkdhv
mxtwfot (8)
oyxhn (90)
mxvto (86)
hwbzs (60)
dtmeth (112) -> klzefiz, nvmabz
jhfos (6318) -> dovmewj, qytejsk, kcfvm, nuiiywb, rgqyd
jtikqy (27)
gfqcad (25)
dxswnz (29)
vfsxpt (15) -> ezjxspt, mntzj, rnnoy, cmxxnel, jdhjjhc, xmuewfv
ujttt (30)
gqtmcy (26)
nbiyql (25) -> jcrbv, wzzdih
wftvt (90)
quzew (51)
gjimeu (84)
junno (14) -> chvgdm, vtifny, xhdds
gstsuq (60)
usogal (98)
iwqsdq (40) -> uotii, mhotdh, fvajjc, ezgozo, ajnqxgs, fumrjy
sqzyu (7) -> usogal, ohyndb
hzggfe (73) -> rgljpm, zlunbf, nhgqoun
oneomye (96)
rwpoq (22)
pdqzeg (158) -> wedvahi, vedvg
trkbjbk (52)
ndjwipm (89) -> dfmrj, uhlnlw, gyuxgla
wgsgkq (59)
wkwylw (74) -> pqpekm, exlobhb, ywarcbi, uavous
nwnfwyw (60) -> olmnek, ugdngw, shfeab
mteeayt (5630) -> zcykfzl, sfbfkb, vvcwap
pttbcl (7)
jqbxuq (31)
zelmrru (94)
wtdgjd (91)
fkkxcix (288) -> khhatd, qwnxufh
vklogmf (1412) -> sszzsjd, ucqqqi, lfztken
iigqx (8)
wkfpb (1892) -> naifqx, tieyaxc, ivlvuhq
toamjok (279) -> feqwmhy, qayqkk, tzaid
nltbv (82)
pnkitlq (75)
jqeuxjc (70)
kbjmz (85)
ifztqrk (232) -> kdcvok, aslbzb
koyyc (92)
ubahwni (415) -> ipqrsx, yptpysa, dkeamn
qdchc (62)
wsotig (50)
wxzcum (95)
jhsnju (143) -> sfdsda, lbuolhp
hexej (8)
ucapgv (72)
misjfqx (275)
hlrknn (54)
uloaqjr (11)
batiqxv (252) -> cipzul, yojkhdg
lduyqm (21)
dyfcem (10775) -> jywenab, hzlhf, tngwf
kbskq (54) -> bbbfnkl, duilfrb, fqjafn, dvvvpt, fuwwn
lluabe (24)
uuvzvmg (54)
fzhiga (49)
gzjkmy (58)
pjslph (41)
wvmctd (88) -> pdapop, gvwdr
oqhtqmi (1485) -> mnogvuo, nbiyql, dbulh, rxdfefu
hsidbv (246)
sosvey (48)
jttvktl (83)
gcjpmr (18)
dryio (99)
yqsufra (66)
rudbse (32)
ggypng (84)
cpjawpx (1750) -> dclips, eobrn
izfjh (64)
yfznza (200) -> zcdwm, fzjpfb, gqtmcy
bdojny (81)
ipkqb (90)
kwxkc (6)
iiena (67)
zojod (12)
aaovpqz (18)
bcyanf (60)
fxytl (66)
jdtauge (27)
vvqzxz (98) -> crjir, unbny
wkuajq (83)
zuuor (90)
oemva (35)
wndlhkf (95)
zcykfzl (11) -> pyxmwku, aqkvjip, vdzxo, urmzp, iystzy
lirus (30)
otzlwo (868) -> csbdis, fvcfdo, uscpxzv
nnamrm (68)
kgobcze (23)
urbny (156) -> wsotig, aivrgc, hxrif, yipmpvi
hvptp (36)
hlchui (89)
cyygfy (75)
lqmiv (74)
lvkwwuz (128) -> jybokd, wjivis, uacplos
ecdmtkz (65)
lgusee (16)
yadsolh (37)
uhwcb (3172) -> qiaaqj, unecu, sdjzoik, qdpcofy
aqkvjip (367)
pqniaz (53)
pmuxnac (95)
coruedm (31) -> iiena, htozjym
qbbsz (170) -> gtycci, xnuirq, sppbjqu
hnowl (61)
zvscftj (93) -> wuqaqh, nbiacm
jdhjjhc (121) -> mggnu, kdyjdi
ppwjh (31)
dlbakk (82) -> uckfdi, oujeg, orirs
sjgdfv (21)
wxwvh (99)
ezjxspt (105) -> djjagoc, hzhtm
xougi (97)
runmsjd (29)
zigfqp (66) -> czzfhvy, gkakcm, ggypng
smryqv (392) -> mebzrnn, rudbse
zfvrxs (16)
jrdlhg (40)
qancsuo (31)
rkkgpaw (3708) -> dxagp, ygjfl, tqdtgzi, jkilh, ietzw
kdhwxo (89)
ktygd (24)
odiiboe (253) -> tetnp, hflxhw
wedvahi (63)
pumgsq (90)
hqzsf (89)
pgzmhg (92)
bdrjupf (99)
uoturc (50)
ewgmy (60)
wvltmyv (204) -> lirus, ujttt
swgte (84) -> ouvco, oyxhn, rahcz
owwucfr (94)
xhdds (42)
optwjd (55)
bbufm (50)
kykmrh (41) -> diwnw, xbaebbl, pvxboe
nmgoh (152) -> xciyqzi, xdilahf
sjaufyu (79) -> aokaek, xeylx, omqech, zvwli, bvntvu, flimltt, ndjwipm
yynsrtq (15)
ofauy (823) -> yxikq, pajwswk, dlbakk
cduoay (91)
afqqpy (7)
cmcjml (90)
emadjac (75)
bqruuvx (571) -> nyzee, ykble, jdpmxgj, wtyeqkr
lsuiiih (8630) -> brbnff, vfsxpt, lmzoi
munngu (60)
bhqrhda (198) -> hfwsmrn, gwbbe, cemrson, idgqyfk
ircgvnq (1400) -> ktpudp, coruedm, dwpvwz
dnwfv (64)
lkqitr (57)
oowec (55)
tbbpr (97)
yvtrb (78)
eytlyat (51)
fydwas (58)
ugtwn (81)
zmmze (54)
crzaveq (85)
zmxnypj (95)
ntxgz (85)
ipuzdkg (84)
lbuolhp (81)
tczoglq (72)
xeylx (207) -> vncffh, thcgrv
ergsxv (99)
rcrlwms (8) -> ergsxv, xlafbbu, bmgddk
cjuyp (9)
utiueqf (18)
ajdhm (68)
grxap (96)
ogffnth (13)
txodvj (97) -> rtkjnq, optwjd
mzaane (98) -> afazbmw, mbdfm
acfgtnp (63)
tlmvaep (24984) -> gnkzi, ygara, ekqlbr
cdfdg (45)
qwdbvr (2969) -> nogrr, jdxxshy, fvaiqyr, uinplcz, iwqsdq
ottdek (31)
mntzj (157) -> sqnpby, jlcod
cjkhs (39) -> zerav, kskmlk, cybok, jqbxuq
bcwwbdp (76)
wxftfvc (93)
vxgadew (34)
rxctq (40) -> yujxzit, gbsjs
zadepxs (31)
fitvk (7)
vwobzsl (15) -> lqmiv, adkuh
ntmyjat (123) -> xxemgkm, havvqw
nqswhd (87) -> mxvto, yipippp
vfsonrs (55)
zhujwor (38)
ugvump (24)
pdapop (12)
rhxwwg (98) -> pqniaz, acqzje, btqdqx
hsycxw (84)
shxnlm (934) -> lzqin, vdycf, dahxznk, yanech
pjdxt (128) -> sfhnsel, wmvdmad
saome (163)
uuskq (328) -> ctycwjv, gzbnkz
jygig (88)
toarg (77) -> udjtzas, muymzj, ehpsber
atzvica (50)
iaphph (94)
wvnelsw (62)
ohlnw (24)
ghmke (108) -> unknkby, qeenjrf
tzitsb (67)
ozsipa (83)
ekfimhl (72)
qphnx (99)
bqnykil (93)
jkilh (68) -> urbny, ahbqrkw, gvdqk, hcmunl
vmkyxsn (51) -> wxwvh, bkaowc
ypbvxys (16)
yxhcygc (80) -> wdvfpay, chcuadg, dzqvp
sfhnsel (39)
kqxsjt (90)
qctjxs (421) -> jizwj, qwcnhxs, zcrsj, cwfgc
ijdjfr (58)
djihb (988) -> wxzcum, ctjkvre, vrjgl
tieyaxc (97)
hlbdk (43)
amrdo (41)
dmuhap (82)
dvvvpt (84) -> ethprq, rhutj
sjldep (81) -> wwniofg, afqqpy
btxsnrj (22)
kvfus (72) -> rrgsu, vrzzc, axcqrvp
upybuz (89) -> uhuhant, dqeoi
tivyb (5)
gmsrhnn (13)
mvrpacv (38) -> seygrud, lhdtxwa, znxhe
hltmydl (56)
vuahzfe (12)
omxbi (56)
ufjyqh (213) -> yodjjz, eytlyat
ugnsbfr (163) -> hzexlou, cwzgcb, crzrj, crnnojj, wrkgz
nscyh (1327) -> dqiievh, ykwyv, dtmeth, cuanrjw
ebedhd (72)
zlhwvo (55)
dvmpj (30)
pgdkb (60)
tfpggg (574) -> nteowjj, mupmhq, leyrvh
tqyhzm (56)
citooti (53) -> zdhuaa, nuxmb
ywvsf (61) -> hzjpu, pdclutm
ouchsl (91)
vdsxce (311)
areod (59)
nyzee (81)
rxsllr (166) -> dzgdexe, duozw
cwfgc (159) -> jtikqy, jdtauge
xihae (70)
eqkks (95) -> pczzyg, pnjhr, uhhgvga, mjwry
zfnpy (185) -> uffjcpm, enmfum
hzjpu (86)
wjivis (61)
vdyit (92)
jumdiue (31)
wupzqha (52)
cvdfmn (63)
miymqw (48)
rzgwqq (61) -> vgknyq, scbgse
dfmrj (48)
jcffy (291)
bpnbtab (90)
rgxjg (66)
cbazit (95)
tyannz (193)
ykble (81)
rrgsu (59)
qgjhab (87) -> dksoeb, ezdusg, pwvjth, mdlfse
enmfum (23)
ekgfr (392) -> aabivaf, rzzcyrh, jbwibse, bhnnrnz
shfeab (79)
pncikdq (14)
sppbjqu (138) -> kbjmz, ntxgz
jlcod (45)
jolfxq (35)
mgybe (81)
qyhyr (70)
jtzqhn (183) -> bcwwbdp, cqmdp, bercxo
awvths (33) -> rvhfdxw, mjzfv, uypdm, rroehj
xrnukee (93)
cemrson (12)
abzahfo (36)
pzkofch (60)
gtycci (294) -> xkkyybu, slthtvl
wwoii (125) -> jtrpn, msmar
jzgllr (29)
xnniv (63)
vgknyq (85)
qfqhlzi (63)
muymzj (92)
vsrrjw (63) -> kyigxxe, jturbxp
vzheyuj (92)
kgxms (90)
mnogvuo (23) -> ezxtmg, losei
ktoxzno (61)
dkeamn (118) -> susvwaq, ikkvmpl
aywhbw (197)
vggzc (83) -> bonch, cgfkphb, rqpripo, jxwep, oqhtqmi
rmfrx (90)
hmbxr (40) -> xougi, fvvsis
blrmjo (70)
azreib (86) -> wcqclc, nsbse
kyvgzk (38)
okcpk (35)
ednxkm (86)
orirs (25)
eiuijrv (99)
scbpz (59)
ivibm (65)
rjrtpwq (66)
nrestbe (77) -> ikeoki, eggqth
wkdyv (12)
mtmritp (182) -> pgkir, shkxavi, ijdjfr, xegbm
mqkpcxq (82)
iribjrc (36)
iuufms (103) -> hpoeayk, ebedhd
pjssop (45) -> lszon, idrncu
kdfxz (250) -> ulgkks, qaxbdi
cipzul (33)
mjwry (55)
vpuqipd (171) -> wpyaqv, hwkly
uelpws (287) -> hnlcfix, vnofuwc, cbbyjs
xunaojn (559) -> iovdh, znfoyv, kmheqrj
thxmp (72)
ctycwjv (12)
lrhseuy (748) -> xinic, wzimpmr, wubtbdp, ywvsf, wgetx
qytejsk (417) -> olhcanq, pydacw, cypafs, idzrtvp
ehiqt (38)
ndevzln (23)
sqqvakc (23)
crzrj (152) -> inkckep, jolfxq
xsrotj (53)
qzxdbvb (82)
lafvy (203)
cwlwzhy (75) -> xytanzt, tqppbf, awzfel, elkot, kdfxz
rftkw (10)
qecdd (32)
leyrvh (215) -> ynevzr, cjuyp
vhldh (28)
xklqajg (8)
xmrocio (41)
vskve (69)
ablnk (67) -> pgdkb, bcyanf, mqjxhhh
beqrsjx (61)
nilbqer (161) -> lgusee, swrda
kspoovz (42)
mbvkb (84)
kidyka (38)
gonle (23) -> qbovld, crzaveq
przui (83)
thvlvgt (10)
uffjcpm (23)
rpjxbhc (50)
egfqvs (53)
iszlpa (91)
ekmhno (37)
kqlidl (305) -> csfsklt, acrpk
uhnaw (35)
jdxxshy (226) -> wnvhd, ddzkbox, hbmcb, cgzumy, kggsq, godbrn
aslbzb (38)
kggsq (100) -> thxmp, gugquvb
utlqx (13165) -> dyfcem, icubrz, okuup, jhfos
wuglbn (30)
dxagp (769) -> wwoii, vvmay, mwcqrpu
nawqww (126) -> inovvz, dlyei
pyxmwku (95) -> xhbqmie, kypfh, sjkmq, ajdhm
chvgdm (42)
wzecczv (37)
qbovld (85)
wpyaqv (43)
uquuws (11)
inkckep (35)
dowcukk (91)
lhqqfh (59)
nvmabz (28)
dovmewj (99) -> vchyhs, vkdfymy, dwtvr, qvqdwx, wixuzd
dfxhfex (280) -> eqrcoq, dqukfsg
jdpmxgj (81)
urzurmc (89)
kuojws (97)
rroehj (342) -> rjppftm, pyvfqx
qvqdwx (78) -> fmtjcxp, lcwnle
pqpekm (260)
xccabhd (6)
agtwdyf (8894) -> ppodfft, wdclggm, yiyld
bbfkxd (10)
nteowjj (141) -> bajystl, pdlkc, ihdujet, kgobcze
kdcvok (38)
mjzfv (374) -> hokdx, sosvey
epbdtie (40)
hhugr (84) -> myxnc, tysfacj, bbbtpgn, yllqo
pgbhv (31)
ltkwjkw (92)
utzqyl (89)
wdvfpay (67)
sjlax (17) -> qcytpf, mgxbrrh
jhubo (248) -> bbfkxd, rftkw, ggqyz
nbiacm (82)
szqbyiy (146) -> wjuxxef, wvnelsw, emlmom
hzexlou (222)
rvhfdxw (336) -> ugeuc, ginnjra
adhga (7)
hepcmft (78)
lmdmcw (170) -> cduoay, iszlpa, mngflny
vuounm (208) -> vlqciig, ccmobzb
bpdjd (73) -> hsqujmf, awjacds
bhbwz (74)
rsffyjw (70)
uhtbx (93)
godbrn (140) -> tuxbrfu, poezvkv
ohtefz (24)
ajnqxgs (87) -> ldbfz, vsznmk
hxrif (50)
fmqozb (157) -> bwefj, zadepxs, dxvyfrf, raopje
awzfel (202) -> rfprjll, bdojny
lovrin (144) -> yufve, zgigo, evhuki, hexej
tqpztin (96)
hnlcfix (8)
jqers (248) -> jpjqz, ixbgkw, spzex
mohfmrr (16)
odflw (118) -> ejbtd, pjslph, amrdo
dbulh (183)
rahcz (90)
aikjla (234)
leavyf (69)
pydacw (117) -> bbvdc, nnamrm
flimltt (103) -> yrrds, wpawu
cbgrkw (31)
nkhrpg (43) -> bhqrhda, mzaane, hsidbv, tsoub, ycbet
rsiom (21)
yipmpvi (50)
dfodke (281) -> kdavcr, nzoczg
lrsaprr (59)
rprkjk (225) -> rjzjdh, krodu
ruxkyn (471) -> rhxwwg, pigll, xvanyc
skaiivy (81)
qyeifkn (56)
xugpwfp (311)
acgyx (33)
seddq (90) -> mewbsd, eczncbr
czzfhvy (84)
pwxkp (18) -> gtcmb, hkbpff, jlenggo
mqjxhhh (60)
qaxbdi (57)
iovdh (69) -> loceai, fydwas
kcentfc (93)
uuanft (81)
ftuet (25)
xzhdy (9) -> vggzc, mteeayt, uhwcb, farimk, uxczdzb, rkkgpaw
tihtr (109) -> xbypaw, diphdjt
pwyqnm (37) -> mhzsyy, kuojws
vxnfqtl (51)
olmnek (79)
tzaid (9)
yqekzzg (34)
ucocpbv (180) -> hpyjk, krltz
ulgkks (57)
hglgopo (17)
fuognlx (75)
ntvcnae (68)
llufp (306)
vvmay (169) -> remwlv, gcjpmr, zlekeh, zfcck
dmyewr (52)
igvsrs (1132) -> jvchu, muckfu, uuvzvmg
cqcmf (910) -> llhhjb, kdvfpg, ntvcnae
rbcqg (23)
pvuyft (66)
sdjzoik (1184) -> cnmtugy, saome, cjkhs, vwobzsl, vsrrjw
wzpfe (16)
cqkxj (34)
limohv (36) -> lubvf, zhujwor
rfbgops (83)
xotwwe (85)
xbypaw (44)
qokvy (226) -> lynlnjr, pbngkw
uhzdjta (40)
csisv (32) -> fuognlx, ebknkgh, eqoiqq
cyzdj (54)
gzlbsml (16)
btvche (63)
dvtfl (63)
ikeoki (85)
cgfkphb (1881) -> wvmctd, limohv, kewktnf
pnjhr (55)
bbvdc (68)
nogrr (448) -> pdhmo, hycppt, mtmritp
utltope (38)
pkggwf (75)
icubrz (72) -> dqntfx, lrhseuy, oqnerup, jaizfy, awvths, zrxjkr, vklogmf
temngvm (88) -> vzheyuj, waewrc, vdyit, jyhalw
awjacds (11)
kypfh (68)
oehtgj (24)
ohedu (109) -> grpvwt, xqbglc, xbhqpqp
aagqoya (55) -> zpgcqq, fpcqopg, enuyf
rxzgrn (68)
hcavfz (149) -> bbhrg, ndevzln, rbcqg, zqxrmoi
cedwljx (42)
cgjzvr (224) -> fhtyxty, idbik
fpcqopg (54)
xqzaqn (23)
suhmny (360) -> sqqrkn, tmvvgp, jscxey, vuahzfe
ttqxk (20)
icaiy (40)
dwtvr (72) -> ikwfxuh, rqxyfp
uhuhant (25)
qhcuolm (95)
gfdae (22)
flahmx (39)
grpvwt (55)
pdhmo (74) -> mxnrle, ixzpx, xotwwe, ofegal
xpcyuu (40)
ywarcbi (218) -> sxjxk, sjgdfv
zcrsj (57) -> ejfvc, slijas
cvzubu (43) -> gepvnm, xitkni
vjcjl (231) -> vpicsc, hnowl
cdaccdo (54)
zzbbtqs (8)
rkhbff (55) -> hpiil, agnojmu, zrwaek
ltcqa (117) -> sicsb, wzpfe, eowhrxj
liatu (98) -> xynwm, pxnhs
mxnrle (85)
uvdikh (128) -> fitvk, haumg, eebealj
eqrcoq (37)
mbdfm (74)
mewbsd (92)
gfopy (8)
ebmdbz (38)
xitkni (75)
uacplos (61)
aqtupw (13)
skzkx (60)
kdyjdi (63)
giwrnux (59)
ggampur (75)
xfgqwg (27)
cdrivrb (27)
zrwaek (54)
jizwj (57) -> yvtrb, gbloa
coyodgw (70)
grzkzam (274)
bbhrg (23)
zndcv (990) -> cxgcf, ogchry, xbddnc
skiyk (12) -> toamjok, fjuytze, llufp, vybcj, orcobz, vuounm
jaizfy (141) -> yimhrw, ltlss, lmdmcw, acilnmg
xynwm (83)
hauoc (90)
feoaqz (98)
mdlfse (69)
fxejcg (102) -> vcwxkxy, xgxzul, bllys
qvqwp (73)
maajj (63)
xnuirq (92) -> oozsasi, ojktrz, xaacva
emuzuk (90)
iraqghm (89)
hsifio (75)
mgxbrrh (58)
szsnk (55)
zdhuaa (97)
tslnnk (78)
zoyfhq (6)
gtcmb (94)
jzczzhm (173) -> dzydw, wtjxdv, thvlvgt
nffqvwl (32)
qoyyyzt (91)
ktmepg (9)
qyptue (82)
bercxo (76)
ndpeic (83)
ikwfxuh (97)
fzjpfb (26)
ddzkbox (58) -> tdsfl, xrnukee
jfblzs (217)
vxxftx (71)
ilbhxw (50)
akwhbb (90) -> ggampur, hozmnv
nuiiywb (340) -> tipds, ieqcv, qgjhab
ppodfft (419) -> gvuocj, vtvhz, uohzm, vvqzxz, pkikya
vweupv (9)
xfclvc (80)
rtemycc (58)
woiffy (35)
nftkch (335) -> kidyka, qyguegc
duilfrb (226) -> pqfijv, dmobyt
okzwi (77) -> ewgmy, ffkubc
jpjqz (20)
whpko (50)
rgfhr (50)
liwvo (97) -> orohja, rmvsw
eobrn (49)
hcmunl (240) -> dbedpz, rtemycc
yffeaia (11) -> wftvt, cqgfeau
ptakb (40)
unecu (74) -> gjljql, kylrxvv, vqrzfp, misjfqx, bzhsmk, zlaps, tcuxy
fkpxwb (215) -> ogljepx, mxtwfot
olhcanq (55) -> eiuijrv, dryio
wuqaqh (82)
sicsb (16)
yptpysa (84) -> kyvgzk, ehiqt
huhjt (56) -> lkqitr, rcrjah
oedpdc (48)
iriwf (18)
uhhgvga (55)
yiyld (689) -> rpvpz, akwhbb, qokvy
gfodmz (35)
ftgff (764) -> nrestbe, keazs, cdwtclt, ueyfa, iuufms
aluvk (1182) -> lovrin, batqran, zexqvx
eijqpl (12)
wzahu (51)
crjir (50)
ecxsy (83)
aamnwt (20)
etlto (67)
wixuzd (220) -> hwyjqlo, xqzaqn
rwzuaru (80)
ujfkgpk (39)
zexqvx (176)
yllqo (14)
xbhqpqp (55)
jvchu (54)
usgap (71)
cgzumy (223) -> vuvsu, adhga, mygwo
unbny (50)
kdavcr (15)
tnlit (78)
ehamxte (97) -> jtzqhn, ukbby, tivtbk, nftkch, dbvkk, elxtgq
muckfu (54)
gjljql (275)
eimqx (275)
dbvkk (315) -> nlxvg, nffqvwl, azcfch
pajwswk (55) -> fiazqvj, knlyr
hxvnrl (73) -> xxwpir, zelmrru
ntkgyj (30)
acqzje (53)
eatuwzc (13)
equpkvw (101) -> ygprn, fcyxxfb
wvxne (80)
kuhkj (69)
jpjufo (49)
shiyju (59)
pojbfof (41)
nvxdw (142) -> nhitw, fxytl
rjncwf (89)
duozw (49)
cdgxjqk (71)
idzrtvp (71) -> xjicbre, uapkd
sjkmq (68)
yvxlc (50)
okuup (648) -> bbrmw, ehamxte, eqsowyp, npkvkpu, czvcms
fwmiit (83)
ebyuo (51)
zcqzjv (66) -> ouciqi, lvwcbl
glbaiy (106) -> obvji, eotjep, yadsolh
lzqin (76) -> loziss, otrpt
qurkt (53)
qtwrr (93)
hydzhez (57)
xiqdw (83)
acjnfd (67)
yvlzlnd (11)
pminuvd (56)
tdsznt (42)
gfiogpk (10) -> feoaqz, nqctxw
nweseg (104) -> fuclj, vxnfqtl
htzrkz (99) -> rkhbff, jfblzs, glbaiy, aagqoya, lcfsvbf
khhatd (33)
gjoof (69)
amomsn (230) -> xxmermc, btxsnrj, rwpoq, gfdae
tivtbk (377) -> tqoul, hglgopo
kgqfw (682) -> usgap, zmucrfa, vxxftx
mrvqj (82)
acqqab (5)
vdycf (56) -> leavyf, kuhkj
htozjym (67)
fpffxl (302) -> scbpz, shiyju
eggqth (85)
fmvboqy (67)
dzino (114) -> xfclvc, shjzwy
evhuki (8)
smyqf (37)
qmuueat (35)
hsqujmf (11)
juogz (71) -> rjrtpwq, kfwcftc
pdlkc (23)
ygxgxmd (41)
vgszctg (59)
bbbtpgn (14)
xqbglc (55)
bzgeoqg (80)
gepvnm (75)
uizzbd (1052) -> yxhcygc, luewm, fmqozb
pqfijv (11)
krltz (69)
rftle (97)
dzydw (10)
havvqw (34)
orcobz (204) -> ebyuo, nzeiwlc
shjzwy (80)
cuuuxw (33)
tnagy (41)
ihekxpi (74)
dwpvwz (141) -> wkdyv, wrntht
batqran (14) -> uuanft, ffxfi
veriopw (1835) -> mrvqj, nltbv
aergp (96) -> qjnqrxg, ouchsl
pnygn (149) -> rhygakw, ndpeic
crnnojj (57) -> zlhwvo, szsnk, stoosc
ezdusg (69)
unuscm (82)
wvpln (49)
djjagoc (71)
blkwmr (70)
chotekn (57)
ruuad (199)
kikilp (83)
fcyxxfb (49)
rnsmk (40)
pvxboe (43)
ifdqaup (5829) -> owsfeci, ruxkyn, kcelbg, tnbuu, ydkppqv
wnvhd (64) -> hauoc, zsdbkwn
dzsqc (14)
kobrbu (66) -> hsifio, pnkitlq, emadjac
bbbfnkl (234) -> pttbcl, uzxcmdh
btqdqx (53)
fpfvv (56)
bkzek (240) -> sbvhk, oufdzsi
lszon (73)
fcszioo (55)
azcfch (32)
rqxyfp (97)
vnofuwc (8)
eqsowyp (1711) -> minal, wazmp, pdqzeg
dksoeb (69)
wzimpmr (129) -> aajog, soyuwm
lcfsvbf (39) -> urzurmc, kuplqir
dtqdwgm (83)
uhlnlw (48)
sszzsjd (167)
ltlss (233) -> ctbne, qyhyr, rsffyjw
erpdbe (60)
kewktnf (72) -> blsrmal, drooh
ethprq (82)
dclvnt (168) -> hrdvgwl, xfgqwg, fyopf
ssqlqmn (46)
ogchry (76) -> nigtunz, icblguo
zwzrlp (27)
bqile (69)
zpgcqq (54)
shwec (92)
loceai (58)
ezxtmg (80)
gnjdzkp (82)
qnuhxta (12)
roxewb (11) -> dzsck, rmfrx
jbwibse (7)
pxnhs (83)
rtdsov (16)
owmxj (35)
dpyrzzy (300)
rjzjdh (33)
sbpdtfq (11) -> oneomye, grxap
arajafq (178)
rmungsh (95)
qiaaqj (312) -> odflw, ggqznq, ikygytk, lxsycwm, hcavfz, fkxei, jjkkl
thcgrv (13)
fxplut (163) -> dotrpsi, tcsisyq
lghlhb (53)
nbyij (32760) -> tdxow, qekcxr, qwdbvr
dzgdexe (49)
dbedpz (58)
tmvvgp (12)
josri (79)
wycodto (39)
nsrad (76)
vrjgl (95)
adkuh (74)
hfwmhrn (6)
ukbby (79) -> dnojir, przui, vrdezgb, lluoxxt
fylsk (253)
vlmua (218) -> uoturc, bbufm
cjowcmb (111) -> bdnbvsc, ynwkyia
rxdfefu (79) -> srsjjft, trkbjbk
cugcfjb (43) -> jygig, zhzkbp
yqdhlr (1505) -> jjgevqi, efavpu, scpwjv
tdkdi (207) -> iribjrc, nzznh, gtlmfhu
zerav (31)
ojktrz (72)
lfztken (53) -> hydzhez, zssmks
bmgddk (99)
bonch (40) -> xugpwfp, dfodke, vdsxce, vptuwar, lvkwwuz, uelpws, yagku
wruwjn (44)
iavoj (78)
oozsasi (72)
gvuocj (46) -> nsrad, sknyb
opkqf (82)
npoan (66)
kcelbg (825) -> vginql, fwnnw, upybuz
ynwkyia (60)
wbqbr (421) -> rprkjk, kobrbu, jcffy
poezvkv (52)
odyxpkn (94)
pxyfbvy (85) -> vvenem, xuctchl
xbddnc (240)
qsatxh (186) -> erqjic, tivyb, peokst, acqqab
opsqo (8) -> pgiixde, wgsgkq, vgszctg
bkzadqb (188) -> oedpdc, xdjqk
jxfhkc (171) -> ohlnw, oehtgj
kacgf (15)
qwezgho (42)
xuctchl (59)
bjgwnd (40)
mpxji (191) -> seasb, yqekzzg
lvwcbl (45)
eowhrxj (16)
iyhif (131) -> dtqdwgm, fwmiit
zlaps (87) -> ijymh, ydtamvm
pgkir (58)
njtrh (413) -> dfxhfex, qqfrfmp, cgjzvr, fkkxcix, swgte
fvajjc (163) -> skzjwi, nlkvr
gqdwda (81)
axzwwto (64)
stxzzh (48) -> uhtbx, qtwrr
nigtunz (82)
pksdzch (77) -> ktygd, gavjcu, ohtefz
idgwugs (95)
scbgse (85)
mygwo (7)
igorbc (41)
bqedfkt (55) -> npoan, wtwmmmy, anmam
ykwyv (8) -> ptakb, jrdlhg, epbdtie, xhtqxz
bhsmhi (331) -> hxvnrl, doqco, mcpjzd
csfsklt (24)
eqoiqq (75)
nlkvr (56)
ywrxbgi (84)
gkakcm (84)
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day7-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day7-common-header>>

(define (process-infile infile)
  (find-root-name (parse-progs infile)))

<<src-day7-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day7-part1

tangled/day7-part1.scm: tangled/day7-part1-exercise.txt -> tknk

tangled/day7-part1.scm: tangled/day7-puzzle.txt -> vvsvez
#+END_EXAMPLE

*** Day 7, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day7-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day7-common-header>>

(define (find-unbalanced-child prog-name all-progs)

  (define (find-prog-by-name prog-name)
    (car (filter (lambda (prog) (eq? prog-name (node-name prog))) all-progs)))

  (define (get-prog-weight prog)
    (+ (node-weight prog) (apply + (get-child-weigths prog))))

  (define (get-child-weigths prog)
    (map get-prog-weight (map find-prog-by-name (node-childs prog))))

  (define (get-child-own-and-total-weigths prog)
    (map
     (lambda (child-prog)
       (list (node-weight child-prog)
             (get-prog-weight child-prog)
             (node-name child-prog)))
     (map find-prog-by-name (node-childs prog))))

  (define (%find-own-and-total-min-max own-and-total-weigths start-w fn-cmp)
    (let loop ((o-and-ts own-and-total-weigths)
               (min-max-w start-w)
               (own-w 0)
               (count-w 0)
               (name-w #f))
      (if (null? o-and-ts)
          (list own-w min-max-w count-w name-w)
          (let ((o-and-t (car o-and-ts)))
            (if (fn-cmp (cadr o-and-t) min-max-w)
                (loop (cdr o-and-ts)
                      (cadr o-and-t)
                      (car o-and-t)
                      1                 ;new weight, so start counting again
                      (caddr o-and-t))
                (loop (cdr o-and-ts)
                      min-max-w
                      own-w
                      (if (= (cadr o-and-t) min-max-w) (+ count-w 1) count-w)
                      name-w))))))

  (define (find-own-and-total-min own-and-total-weigths)
     (%find-own-and-total-min-max own-and-total-weigths (greatest-fixnum) <))

  (define (find-own-and-total-max own-and-total-weigths)
     (%find-own-and-total-min-max own-and-total-weigths 0 >))

  (let* ((prog (find-prog-by-name prog-name))
         (child-weights (get-child-own-and-total-weigths prog))
         (o-and-t-min (find-own-and-total-min child-weights))
         (o-and-t-max (find-own-and-total-max child-weights)))
    (if (= (caddr o-and-t-min) 1)       ;the single prog is too leight
        (or (find-unbalanced-child (cadddr o-and-t-min) all-progs)
            (format #f "add-to-min (~s): **~d** -- min: ~a, max: ~a"
                    prog-name
                    (+ (car o-and-t-min) (- (cadr o-and-t-max) (cadr o-and-t-min)))
                    o-and-t-min o-and-t-max))
        (if (= (caddr o-and-t-max) 1)   ;the single prog is too heavy
            (or (find-unbalanced-child (cadddr o-and-t-max) all-progs)
                (format #f "sub-from-max (~s): **~d** -- min: ~a, max: ~a"
                        prog-name
                        (- (car o-and-t-max) (- (cadr o-and-t-max) (cadr o-and-t-min)))
                        o-and-t-min o-and-t-max))
            #f))))

(define (process-infile infile)
  (let* ((progs (parse-progs infile))
         (root-name (find-root-name progs))
         (unbalanced (find-unbalanced-child root-name progs)))
     (format #f "~a: ~a -> ~d" infile root-name unbalanced)))

<<src-day7-common-main>>
#+END_SRC

Results, for example and puzzle input (after multiple tries - and not reading the description correctly and therefore
not descending down to the topmost unbalenced child):

#+BEGIN_EXAMPLE
make -f tangled/Makefile day7-part2

tangled/day7-part1-exercise.txt -> tangled/day7-part1-exercise.txt: tknk -> sub-from-max (tknk): **60** -- min: (45 243 2 padx), max: (68 251 1 ugml)

tangled/day7-puzzle.txt -> tangled/day7-puzzle.txt: vvsvez -> sub-from-max (tdxow): **362** -- min: (566 1184 2 mrxqlw), max: (370 1192 1 ghwgd)
#+END_EXAMPLE

** Day 8

*** Source, common parts

#+name: src-day8-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>

(define (process-line line)
  (split-words line))

(define (make-registers :optional (max-hash 18278)) ;max-hash : (reg-index "zzz")
  (make-vector max-hash 0))

(define (reg-index reg-str)
  (let loop ((str (string->list reg-str))
             (hash 0)
             (base 1))
    (if (null? str)
        hash
        (loop (cdr str)
              (+ hash (* (+ (- (char->integer (car str)) (char->integer #\a)) 1) base))
              (* base 26)))))

(define (get-register reg-str registers)
  (vector-ref registers (reg-index reg-str)))

(define (inc-register! reg-str val registers)
  (inc! (vector-ref registers (reg-index reg-str)) val))

(define (dec-register! reg-str val registers)
  (dec! (vector-ref registers (reg-index reg-str)) val))

(define (eval-line tgt-reg action amount src-reg operator r-operand registers)
  (let* ((amount (string->number amount))
         (l-operand (get-register src-reg registers))
         (r-operand (string->number r-operand))
         (op-res (cond ((string= "<"  operator)      (<  l-operand r-operand))
                       ((string= ">"  operator)      (>  l-operand r-operand))
                       ((string= ">=" operator)      (>= l-operand r-operand))
                       ((string= "<=" operator)      (<= l-operand r-operand))
                       ((string= "==" operator)      (=  l-operand r-operand))
                       ((string= "!=" operator) (not (=  l-operand r-operand)))
                       (else (error "Bad operator" operator)))))
    (when op-res
      (cond ((string= "inc" action) (inc-register! tgt-reg amount registers))
            ((string= "dec" action) (dec-register! tgt-reg amount registers))
            (else (error "Bad action" action))))))
#+end_src

#+name: src-day8-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (infile) (format #t "~a: ~a -> ~a~%"
                            (car args) infile (process-infile infile)))
   (cdr args))
  0)
#+end_src

*** Day 8, Part 1

**** Data

#+begin_src txt :tangle tangled/day8-part1-reddit-sample.txt
a inc 12 if b < 1
a dec -8 if b < 1
a dec 12 if b < 1
#+end_src

#+begin_src txt :tangle tangled/day8-part1-exercise.txt
b inc 5 if a > 1
a inc 1 if b < 5
c dec -10 if a >= 1
c inc -20 if c == 10
#+end_src

#+begin_src txt :tangle tangled/day8-puzzle.txt
ebu inc 626 if iq < 0
obc dec -809 if sdw == -2
vb inc 568 if k > -2
wl dec 721 if wui <= 2
xbh dec -310 if bx != 1
qun inc 741 if qun > -4
k dec 661 if sdw != 0
wui inc 628 if k >= -4
qet inc 563 if skh == 0
ebu dec 197 if wl < -716
qun dec 239 if sdw < 7
n dec 655 if azg == 0
iq inc -857 if kxm <= -9
qet inc -959 if tzy > 5
azg inc -643 if qun >= 510
ebu inc 537 if c >= -8
eh inc -677 if bx >= -1
c dec -267 if ebu < 341
sdw dec 811 if tzy != -1
wui inc -775 if qet >= 562
iq inc 215 if azg >= -8
qun inc 949 if sdw > -813
xjo inc -652 if vb != 563
skh inc -560 if n < -645
xjo dec 978 if ne == 5
skh dec 913 if k > -6
iq inc 783 if azg != 1
skh inc 955 if ne == 0
xbh inc -981 if n > -660
eh inc -361 if vb == 578
iq dec 304 if obc != -3
eh inc 408 if tzy >= -2
w inc -576 if tzy == 0
iq dec 102 if udh < 7
k inc -627 if qet > 558
xjo inc -232 if ne == 0
azg dec -739 if j > -5
a dec -141 if qet == 567
a dec -731 if a < 2
i dec -839 if as < 8
v dec 855 if xbh >= -672
wl dec -602 if wl == -721
obc inc -613 if ebu == 340
j inc 605 if wui >= -148
kxm dec -192 if skh > -521
skh dec 551 if skh >= -512
xbh dec 340 if bx != -9
qet inc 156 if w <= -575
azg dec 627 if eh < -276
qet inc 7 if ne != 5
vjx inc -922 if as == 0
vjx inc -680 if k <= -623
as dec -807 if w != -576
tzy inc -808 if qun != 1458
wui dec -905 if a <= 740
bx inc 371 if n != -655
xbh inc 721 if n != -664
xbh inc 79 if w == -576
udh dec 217 if azg > 738
eh dec 300 if a > 721
k inc 684 if xbh >= -215
i inc -281 if qet >= 717
v dec -408 if kxm > 187
as inc 923 if xbh <= -202
v dec 640 if vjx < -1592
kxm inc 537 if xbh < -215
xbh dec 426 if eh == -564
obc dec -269 if c < 272
udh dec -256 if wl == -119
xbh inc -519 if v <= -1083
eh inc 134 if wl >= -117
azg dec 485 if eh >= -576
obc dec -134 if as != 925
wui inc 549 if udh < 42
eh dec -323 if obc >= -219
a dec 553 if w < -575
vjx dec 311 if qet == 726
vjx dec 602 if as != 930
tzy dec -588 if udh < 41
i inc 479 if eh < -238
eh inc 602 if j != 609
wl inc -800 if sdw == -811
qet dec -493 if k >= 48
obc dec -469 if v >= -1084
ne dec 100 if skh == -518
c inc 574 if tzy >= -225
wui dec -390 if bx > -7
ebu dec 786 if v < -1079
kxm inc -637 if i == 1037
as dec 378 if w == -576
ne dec -946 if v <= -1092
udh inc -433 if obc <= -220
azg dec 660 if w >= -581
v inc 61 if qun == 1451
v inc 644 if v <= -1025
udh inc 531 if k >= 52
obc inc 381 if n <= -655
xjo inc -485 if a != 174
tzy dec -526 if obc > 179
azg inc -831 if skh == -518
sdw dec 288 if sdw <= -808
kxm inc 759 if kxm != -451
n inc -847 if c > 839
skh dec 384 if tzy != -220
i dec -532 if obc > 163
a inc 570 if eh == 356
c dec 437 if wui > 1687
i inc -403 if vb >= 564
wui dec -223 if azg >= -1238
vb dec 370 if vb != 574
qun inc -251 if skh == -518
n inc 490 if iq < 594
kxm inc -542 if v >= -376
c dec 49 if kxm == 314
a inc -970 if xbh >= -734
skh inc -258 if j == 605
kxm dec 180 if j == 605
j dec 243 if k >= 54
vb inc 832 if azg >= -1231
udh dec 662 if tzy >= -229
c inc -327 if bx != -6
obc dec 973 if kxm == 128
udh dec 543 if vb <= 196
n inc 534 if qun < 1208
xjo dec -734 if eh < 362
j dec 629 if azg == -1237
wl dec -205 if qet <= 1219
qet dec -811 if a <= -214
azg inc -936 if sdw >= -1099
udh dec 222 if azg < -2172
j inc -526 if obc < 174
ebu inc -725 if n >= -484
eh inc 120 if i == 1166
wl dec 292 if n >= -487
k inc -718 if c == 28
qet inc -472 if ne < -109
ne inc -426 if qet == 2030
a dec 351 if iq < 600
sdw inc -446 if qet >= 2023
i inc 666 if qun <= 1194
obc dec -915 if udh > -315
tzy inc 281 if a == -573
udh inc -18 if as == 545
k inc 767 if as >= 552
as inc 84 if xjo != -641
vjx dec -321 if qun != 1204
v inc 799 if i > 1162
qet dec -575 if obc > 1079
vb dec -671 if obc < 1077
bx inc -976 if vb == 198
tzy dec 316 if qun == 1200
skh dec -352 if qet <= 2600
sdw dec 407 if qet <= 2605
c dec -398 if iq != 597
i dec 943 if a < -569
wui dec -455 if as != 625
skh inc 392 if k > -668
qun inc 162 if k != -667
xbh dec -311 if sdw == -1962
sdw dec 219 if wl < -1012
vb inc 610 if qun < 1372
bx dec 314 if azg != -2170
xjo inc 298 if wl >= -1007
iq dec -229 if vjx != -2194
obc dec -71 if kxm >= 127
k dec 936 if n > -485
azg dec -282 if v >= 417
j dec 8 if qet < 2614
j dec 599 if tzy >= -254
w inc -111 if v >= 416
skh inc -365 if wui <= 2375
vb inc 830 if qun <= 1362
bx dec -992 if qun >= 1366
obc inc -254 if obc != 1150
azg dec -557 if udh >= -326
c inc -438 if sdw >= -1953
eh inc 41 if as < 635
eh inc -725 if sdw != -1958
azg dec 515 if vb <= 1640
vb dec 149 if qet >= 2597
a inc 431 if wui < 2381
qun inc 596 if c >= -14
i dec -520 if a != -151
v dec -500 if j == -803
wui inc -581 if vjx == -2204
vb inc -753 if a < -139
tzy inc 309 if j > -796
xbh inc -182 if w > -685
qun dec -315 if j < -792
as dec 688 if eh < -202
bx inc -348 if ne > -533
n dec 198 if w >= -690
eh inc 179 if azg == -2406
qun dec -636 if eh == -19
skh dec 684 if a == -137
i dec -501 if wl < -1005
w inc -894 if obc >= 903
qun dec 529 if ebu < -1172
sdw inc -303 if eh != -34
wui inc -912 if bx >= -1630
wui inc 222 if bx != -1643
ebu inc -907 if c < -17
tzy inc -871 if tzy > -256
bx inc -119 if iq > 591
udh dec 56 if n > -678
qun inc -839 if vjx <= -2189
udh inc 867 if j < -791
w inc 26 if i <= 1247
i inc 633 if vb <= 745
v inc -384 if skh >= -757
ebu inc 876 if ne >= -529
udh inc 116 if a <= -145
a dec 179 if a >= -146
ne dec 643 if c == -12
c dec -490 if bx > -1764
qet inc 286 if ebu > -291
as dec -213 if i < 1884
sdw inc -80 if wui != 2597
xjo inc 59 if azg != -2406
n inc 640 if azg > -2399
k dec 444 if wl >= -1006
sdw inc -45 if qun != 1437
kxm inc -330 if bx >= -1757
wui inc 934 if i == 1884
qet dec 295 if azg > -2416
j inc 435 if xbh > -736
a inc -454 if eh >= -36
obc dec -533 if iq == 592
w inc 388 if ne > -1170
wui inc 866 if udh >= 474
wl inc -858 if vb != 736
wl inc -90 if vb < 745
wui dec 794 if vb >= 727
w dec -198 if eh <= -22
n dec 203 if qun != 1431
a inc 252 if bx <= -1757
udh dec 589 if vjx != -2194
azg inc 10 if azg < -2403
vb inc -293 if xbh > -739
udh inc -737 if a != -519
j dec -582 if obc >= 1433
xjo dec -892 if xjo == -337
qun inc 668 if obc <= 1443
udh inc -124 if bx == -1757
azg inc -210 if wui < 2665
i inc -312 if wl > -1087
ebu dec 356 if k > -2041
qet inc 928 if skh == -749
tzy inc 299 if i != 1874
vb dec 151 if vb <= 447
qun dec 936 if eh < -25
eh inc 782 if vjx < -2191
n inc 515 if j < 226
udh inc 482 if obc > 1434
azg dec -244 if n < -356
n inc -192 if kxm == -196
wl inc -573 if bx > -1760
sdw inc 423 if vjx >= -2195
c dec -72 if wui <= 2670
k inc 984 if a == -523
eh inc -288 if a > -525
ebu dec 855 if a < -514
kxm dec -261 if a > -533
wui inc -58 if udh == 100
sdw inc -304 if skh <= -742
vjx dec -86 if qet < 3247
w dec 163 if v >= 32
kxm inc 231 if ne != -1169
vb inc -291 if udh <= 97
v dec 759 if iq >= 584
xjo inc 390 if xbh < -728
bx dec -760 if j > 215
wl dec 370 if kxm > 57
kxm inc 871 if vb >= 285
c dec 4 if n > -556
i dec 813 if v > -734
v dec 129 if udh <= 100
qun dec -762 if ebu == -1150
v dec -415 if as >= 151
ne dec 366 if obc == 1440
udh inc 298 if a <= -533
tzy inc -245 if wl != -2038
i dec 992 if as > 151
c inc -400 if a == -523
wl dec 317 if qun < 1933
azg dec 174 if tzy < -1067
vb dec -780 if vb < 302
udh dec 273 if ne < -1166
obc inc -669 if wl <= -2354
as dec 843 if k >= -1064
as inc 902 if kxm < 944
qun inc -154 if i >= 69
j dec -894 if azg > -2334
as inc 233 if w > -1140
xjo dec 14 if xjo >= 940
sdw dec 999 if tzy != -1066
qun inc -351 if wl > -2363
kxm inc -503 if qet >= 3230
kxm dec -843 if bx != -1003
obc dec -318 if sdw > -3187
wl inc -243 if n >= -564
a inc -873 if sdw < -3179
bx dec 602 if wl >= -2601
wui dec 237 if c >= 145
wui inc -999 if qun >= 1420
w dec 329 if bx != -1599
a inc -550 if xbh > -735
ebu inc 359 if azg != -2328
tzy inc 965 if tzy >= -1067
wui inc -608 if c >= 141
vjx inc -168 if as <= 447
qun dec -183 if qet < 3241
xbh inc -456 if tzy <= -1069
j dec 581 if j != 1110
qun inc 677 if udh >= -173
udh dec 783 if xjo > 924
kxm inc 775 if w == -1132
k dec -961 if v == -440
qet dec 970 if skh != -753
qet dec 566 if vb >= 1064
sdw inc -639 if j == 1110
ebu dec -22 if kxm <= 2051
as dec 9 if tzy == -1072
w inc -513 if obc < 1083
k dec 669 if sdw <= -3822
obc inc -795 if c >= 142
n inc -980 if bx == -1599
obc inc 176 if qet <= 1697
j inc 517 if tzy != -1065
wui inc 394 if qun != 2276
tzy dec -833 if ne == -1170
eh dec 112 if k < -88
wui inc -648 if udh > -964
wl dec 918 if w < -1125
qun dec 846 if skh >= -755
sdw dec 287 if tzy == -1064
udh inc 902 if as != 443
skh dec 793 if ebu > -777
w dec 689 if j > 1621
j dec 415 if azg == -2326
obc dec -869 if k > -101
c dec -524 if eh == 353
j dec 519 if a > -1949
n inc -811 if xbh > -1193
udh dec 980 if qet == 1702
iq inc 358 if qun == 1428
w dec -719 if vb <= 1076
wl inc -543 if vjx >= -2284
vb inc -778 if wui == 517
iq inc -611 if azg != -2330
xbh dec 716 if azg < -2326
obc inc 997 if tzy > -1067
vb inc -645 if kxm <= 2058
iq dec -703 if sdw != -3819
xjo inc -766 if xjo < 924
obc inc 345 if c > 670
i dec 435 if qet > 1697
kxm inc 895 if ne <= -1173
kxm inc 387 if udh < -1041
k dec 851 if wui <= 508
vjx inc -957 if iq >= -26
wui dec -102 if wui < 523
ebu inc -441 if qet < 1710
qet dec -774 if vjx < -3224
skh inc -554 if qun >= 1431
xbh dec -924 if sdw < -3816
a dec 250 if qun <= 1438
xjo dec -430 if wui != 619
sdw inc -845 if kxm >= 2044
udh dec 607 if a <= -2191
w inc -940 if v >= -440
w inc -224 if bx == -1599
ne dec 856 if v != -441
tzy inc 431 if vjx == -3233
azg inc 370 if skh <= -2091
tzy inc 530 if qet > 2468
w inc 371 if vjx != -3233
kxm inc 348 if azg < -1959
n inc -611 if a <= -2190
k inc 365 if c < 681
kxm dec -734 if skh <= -2093
n inc 243 if w == -2266
skh inc 537 if j > 684
j dec -127 if wl <= -4066
n inc -903 if a > -2199
udh inc 685 if kxm == 2785
j inc 656 if v > -435
vb dec 193 if bx == -1599
eh inc -251 if ebu == -1210
qun inc 882 if ebu > -1215
k dec 705 if w == -2266
xbh inc -92 if sdw != -4657
w dec -689 if iq != -19
qun inc 962 if sdw > -4671
wui inc -476 if obc == 1504
azg inc 946 if i > -360
ebu inc 50 if n <= -3616
iq inc -284 if a == -2196
vjx inc -470 if v == -440
w dec 888 if ebu < -1151
a dec 369 if ebu <= -1153
udh dec 3 if kxm > 2777
qet dec -606 if tzy <= -106
kxm inc -483 if sdw <= -4661
vb dec 706 if tzy > -120
udh inc 111 if kxm >= 2296
iq dec 77 if xbh == -354
tzy dec -534 if sdw != -4655
tzy dec -300 if tzy >= 421
ne dec 258 if skh <= -1552
qet dec 363 if i == -357
ebu dec -16 if bx != -1591
eh inc -420 if a <= -2567
qet inc 674 if azg >= -1962
k inc 891 if azg != -1956
ne dec 730 if wl < -4058
ebu dec 497 if wui != 147
udh inc -969 if j <= 699
tzy dec 536 if eh != 101
xjo inc -70 if tzy < 193
xjo dec -873 if tzy < 188
udh inc -923 if k != -442
qet dec -56 if tzy != 193
wui dec -982 if sdw < -4661
iq dec 690 if qet > 3805
azg inc -961 if i > -360
udh dec 856 if wui != 1113
bx inc -710 if j <= 701
n inc 914 if i < -360
eh dec -772 if qet != 3812
ne dec 70 if vb < -470
j dec -460 if i <= -355
qun dec -837 if c != 674
w inc 961 if azg <= -1948
ebu dec -192 if k > -439
w inc 795 if xbh >= -359
wl inc 68 if v <= -436
eh inc 555 if qun >= 3288
vb inc 322 if eh != 95
xjo inc 995 if sdw != -4669
k dec 623 if w != -1388
udh inc 533 if azg > -1960
xbh dec 700 if ebu <= -1441
xbh dec 570 if udh > -3070
vb dec -434 if w == -1398
as inc 173 if bx != -2300
w inc 634 if bx == -2309
vjx dec -719 if i <= -361
w dec -796 if c <= 677
i dec -410 if azg != -1956
udh inc -738 if as != 602
vjx inc -617 if ebu <= -1446
ne dec -518 if ne == -3091
vjx dec 135 if n == -2704
wl dec 78 if tzy == 187
tzy dec 753 if wl > -4075
ebu dec 679 if c >= 683
tzy dec -276 if w <= 34
a dec 82 if wui < 1126
skh inc 473 if azg < -1948
udh inc -26 if tzy < -289
xjo inc 407 if eh == 102
i dec 909 if kxm >= 2306
udh dec -97 if xjo > 3564
tzy dec -858 if eh != 110
ne inc -102 if c != 678
iq dec -655 if iq >= -1063
tzy dec -283 if obc <= 1497
vjx dec 874 if udh < -3728
xjo dec -521 if tzy > 576
ne dec -532 if skh == -1086
j dec 316 if i != -362
sdw dec -256 if vjx >= -4612
ebu dec -695 if v > -443
azg dec 154 if k >= -1062
vjx dec 933 if sdw <= -4399
bx inc 696 if iq > -1069
skh inc -130 if wui <= 1126
eh dec -961 if c >= 669
bx inc 482 if k >= -1061
vb dec 177 if wui == 1121
n dec 169 if i == -355
eh dec 29 if xjo == 3558
xjo inc 59 if xbh == -1624
xjo inc 435 if wl <= -4074
udh dec -642 if skh >= -1224
iq dec 794 if udh != -3098
eh dec -962 if c > 673
wui inc 489 if as <= 613
iq dec -353 if v <= -435
iq inc -293 if n == -2704
n dec -667 if vb > 102
j dec 763 if eh == 2025
kxm inc 100 if i >= -367
tzy inc 757 if j <= 82
i inc -902 if i != -359
ne inc 3 if i < -1261
vb dec 272 if qet != 3818
skh dec -348 if j <= 76
w dec 399 if eh == 2027
skh inc 995 if c != 680
wl inc 343 if a > -2653
eh dec 628 if eh >= 2017
w dec 544 if azg >= -2116
bx inc 54 if xbh != -1624
as dec -724 if vb == -165
tzy dec 48 if vjx == -5543
sdw inc -837 if as != 1333
i inc 692 if obc != 1496
k dec -395 if tzy > 1283
ne dec -925 if vjx > -5549
xbh dec -670 if wl > -3735
obc dec 947 if wui >= 1619
k dec -480 if sdw != -5245
a inc -919 if vb > -158
wui inc 8 if qet == 3812
i inc -855 if eh == 1397
azg inc -41 if j > 74
xbh dec -945 if v > -431
xjo dec -95 if iq >= -1802
w dec -122 if kxm <= 2405
xjo inc -721 if bx >= -1833
xbh dec -182 if ebu < -751
obc dec 694 if wui >= 1614
tzy inc 755 if qet <= 3815
vjx dec -537 if c < 682
v dec 631 if qun > 3275
j dec -573 if xjo >= 2895
ebu dec 592 if xbh <= -776
xjo dec -748 if skh == 128
iq inc 30 if j < 657
bx dec 693 if sdw <= -5240
wui inc -953 if qet < 3817
qet inc 969 if xjo > 2909
as dec 963 if as < 1344
wl inc -997 if as != 372
xbh dec 514 if w <= -383
tzy inc 343 if xjo <= 2905
azg inc 470 if ne < -1725
kxm dec 126 if bx >= -2527
vjx dec -213 if c != 684
wl dec -491 if as >= 377
a dec -769 if azg <= -2114
obc dec 576 if qun >= 3286
udh inc 227 if obc != 805
ne inc 528 if v < -1062
as inc 124 if skh <= 135
a inc -896 if skh <= 131
k dec 949 if ebu == -754
c dec -541 if iq > -1783
wl dec -662 if udh > -2863
xjo inc -41 if qun != 3284
n dec -486 if iq > -1775
vjx dec 982 if obc > 803
kxm dec 349 if azg >= -2115
ebu dec -19 if bx >= -2515
xbh dec 199 if kxm < 1937
ebu dec -907 if wl > -4066
w inc 196 if bx == -2520
bx inc -534 if udh > -2871
skh inc 296 if iq < -1777
azg inc 169 if v < -1063
ne inc -187 if qet >= 3820
qun dec -15 if skh != 130
skh inc -909 if c < 1220
obc dec 583 if obc < 812
ebu dec -879 if qun < 3298
a dec 818 if obc >= 219
sdw dec 169 if as < 505
as inc 971 if sdw != -5422
wl dec 453 if a <= -4361
a dec 584 if udh > -2866
n dec 486 if w != -192
w dec -423 if iq > -1784
ebu inc 681 if as <= 1470
skh dec -585 if sdw <= -5421
qun dec -569 if n != -2038
bx inc -705 if qun >= 3857
w inc -198 if iq <= -1773
ne inc -345 if k <= -2005
vjx inc -368 if n > -2044
eh dec -267 if v == -1071
j inc 959 if c != 1222
c dec -544 if ebu < 1718
c dec -14 if xbh >= -1490
eh dec -746 if as <= 1458
azg dec 746 if tzy <= 2376
a inc -306 if c >= 1781
i inc 655 if azg == -2692
a inc -201 if eh >= 1666
bx inc 426 if qet == 3812
n dec 234 if c < 1776
azg dec -43 if qun < 3867
a dec 527 if a == -4945
iq dec 317 if qun != 3865
iq dec -685 if ne >= -1547
azg inc 309 if v == -1071
as inc 269 if udh <= -2866
a dec 764 if obc == 227
eh inc 918 if qun > 3861
udh dec 450 if wl <= -4509
eh dec -56 if j <= 1615
wui dec -557 if wl >= -4519
skh dec 479 if bx > -3340
skh dec 359 if kxm > 1917
as dec -754 if xjo <= 2868
eh inc -50 if wui >= 1213
xjo dec 883 if j != 1606
qet inc -687 if vjx < -6145
k dec 899 if udh != -3318
azg dec 242 if ebu != 1710
w dec -837 if as == 2217
ne dec 419 if obc > 225
skh dec -258 if qet != 3820
kxm dec -149 if azg != -2581
qet inc 264 if tzy == 2381
xjo dec -46 if qun <= 3866
w dec -772 if ebu > 1705
eh inc 7 if ne > -1955
xbh dec 149 if vb > -159
w inc 830 if xjo >= 2906
xbh dec -341 if v < -1062
obc dec -849 if w == 1633
qet dec 632 if ne >= -1959
j inc 599 if bx >= -3333
ebu dec -326 if vjx != -6133
i inc 752 if udh == -3313
iq dec 305 if skh < -1366
k dec 641 if eh == 2588
vb inc -652 if eh < 2597
skh inc -926 if v >= -1076
j inc -59 if k > -3556
wl dec 958 if wui < 1230
obc inc 871 if xjo < 2919
j inc -220 if k < -3540
c dec -411 if qet >= 3806
wl dec 874 if w < 1634
skh dec 285 if udh <= -3306
udh inc 627 if i != -1431
bx dec -633 if xbh != -1140
i inc -815 if wl >= -6354
c inc 892 if qet > 3811
wl inc 794 if azg != -2568
obc inc 103 if skh < -2566
k inc -188 if ebu < 2049
k dec -356 if vjx != -6149
sdw inc -314 if k > -3384
wl inc 198 if j < 1934
a inc -533 if i != -2251
ne dec -231 if iq <= -1084
ne inc -339 if tzy <= 2382
kxm dec 641 if w != 1640
iq dec 492 if skh <= -2567
sdw dec -229 if obc >= 2047
skh inc -194 if ebu <= 2041
xjo inc 275 if azg >= -2583
iq dec 826 if obc == 2053
sdw dec -993 if kxm > 1444
obc dec 15 if ebu == 2035
skh inc 297 if c <= 3080
sdw dec 748 if udh == -2684
v inc 793 if c <= 3083
obc dec -62 if qun >= 3861
vjx inc -703 if xjo >= 3188
wl dec 68 if ne >= -2077
udh inc 199 if iq < -1579
azg inc 991 if n == -2271
bx inc -554 if vb != -812
w dec -754 if kxm != 1445
vb inc -301 if iq <= -1582
udh inc 849 if wui < 1231
qun dec 495 if xbh == -1144
n dec -349 if w == 2387
n inc 172 if wl < -5416
wui inc -192 if wl <= -5426
vb dec 676 if kxm != 1436
n inc -365 if as >= 2224
eh dec -938 if vb != -1492
j dec -936 if j >= 1923
eh inc -889 if qet != 3802
tzy inc 629 if iq <= -1574
bx dec -333 if c <= 3073
j inc 118 if c <= 3085
bx inc 217 if eh >= 2640
xbh dec -587 if wl >= -5428
kxm inc 9 if tzy != 3011
qet inc 433 if c != 3074
tzy dec 408 if obc > 2108
ne inc -17 if vb >= -1502
tzy dec -223 if azg == -1586
azg dec -925 if azg >= -1580
bx dec -645 if tzy >= 2823
eh dec 870 if sdw > -6252
obc dec -355 if udh != -1645
ne inc -191 if obc != 2477
c inc -88 if wl < -5417
skh inc -36 if sdw > -6251
w inc -404 if sdw <= -6247
as inc 126 if vb <= -1491
iq dec -456 if c != 2991
skh dec -407 if v > -278
a dec 621 if iq > -1135
xjo dec -514 if kxm != 1447
wui dec -912 if iq != -1124
xjo dec 373 if c == 2982
ne inc 61 if ebu != 2048
qet inc -691 if iq == -1125
as inc 553 if vjx > -6148
qun inc -479 if qun == 3370
tzy dec -851 if ebu == 2039
xbh inc -52 if skh >= -2514
udh dec -853 if wl == -5423
udh dec 868 if i != -2245
wl inc 665 if w < 1986
qet inc -975 if w == 1983
kxm dec 677 if kxm < 1446
i dec 964 if j != 2978
i dec 719 if a <= -7385
w inc 142 if qun > 2887
xbh inc 547 if sdw >= -6256
ebu inc 102 if azg > -1592
i inc -255 if v <= -272
udh inc 681 if c < 2987
a inc 535 if qun >= 2887
udh dec -66 if xjo < 3707
vjx inc -496 if j != 2985
tzy inc -131 if v == -278
wui inc 414 if azg >= -1579
vb dec -579 if qun < 2896
v inc -275 if kxm != 767
vb inc -848 if w > 2127
j dec -601 if vjx > -6641
bx dec 311 if wl < -4756
n dec -995 if kxm != 764
iq inc -35 if sdw == -6247
sdw inc 153 if v >= -271
iq dec 219 if j == 3589
tzy dec 183 if j > 3577
a inc 193 if a > -6858
qet inc -847 if xjo >= 3697
iq dec -515 if n <= -755
j inc -690 if j == 3581
v dec -478 if a == -6662
n inc 602 if wl < -4753
xjo dec 532 if ne > -2213
i inc 958 if bx != -3556
k inc -587 if a <= -6662
c dec -82 if eh > 1763
vjx inc 668 if j < 2891
ebu inc -357 if as < 2906
n dec -283 if ne == -2216
w dec 778 if iq <= -640
vb dec 408 if ebu < 1784
azg dec 271 if vjx != -6639
udh dec -46 if ebu != 1784
k dec 628 if azg >= -1592
vb inc -962 if obc < 2467
wl dec 408 if v != 198
a dec 554 if vjx < -6631
c inc 442 if udh > -1591
i dec -417 if eh >= 1763
qet dec -856 if c > 3519
iq dec -144 if as < 2899
sdw inc -229 if skh != -2507
i dec -920 if i < -2800
qet dec -244 if n != 138
vb dec 811 if k != -4600
k inc 560 if qet != 1976
v dec 42 if w != 1342
a inc -588 if skh > -2514
qet inc 56 if obc < 2472
i inc -870 if eh < 1770
ebu dec -915 if w >= 1345
xbh dec 455 if i <= -2752
xbh dec 384 if xjo <= 3699
wl inc -895 if xjo != 3692
kxm inc -190 if sdw <= -6475
vjx dec 450 if xjo != 3698
skh dec 0 if skh > -2514
xjo dec 896 if udh >= -1589
udh inc 811 if k > -4587
eh inc 520 if n != 130
iq inc 873 if i == -2756
eh dec -76 if skh == -2506
ne inc -833 if wl <= -6057
tzy inc -687 if xbh == -901
n dec -232 if iq >= 223
vjx inc -968 if qet == 2032
as inc 503 if c == 3512
a inc 952 if qun != 2892
c dec -290 if wui >= 2128
a dec -777 if wui != 2140
qun inc -472 if tzy >= 2664
vb inc -589 if qet < 2041
tzy dec -548 if v > 153
wui inc 152 if ebu <= 2706
w dec 905 if tzy != 3224
udh dec -241 if obc <= 2473
v dec -532 if sdw <= -6473
bx inc 818 if wui == 2281
skh dec 547 if a != -6070
qet inc 146 if a <= -6067
n inc -528 if iq != 232
qet dec -864 if ne < -3044
qet inc -121 if azg < -1583
i inc 363 if vjx > -7609
k dec -105 if ne > -3040
a inc 480 if i <= -2398
udh inc 173 if ne == -3049
n inc -712 if as < 3405
j dec 597 if bx == -3565
sdw inc -637 if vb < -2311
qet dec -871 if obc == 2458
tzy dec -927 if bx <= -3560
xjo inc -471 if w == 442
wl inc 976 if j < 2304
tzy dec -505 if xbh <= -894
a inc 929 if azg == -1586
eh inc -265 if n < -877
w dec -393 if obc < 2469
a inc 406 if xjo > 2324
c inc -437 if j < 2301
a inc -589 if i <= -2399
c inc -101 if obc < 2471
iq inc -478 if iq <= 232
xjo dec 635 if v >= 685
w dec 485 if vjx == -7604
wl dec 490 if eh >= 1571
wl dec 923 if k == -4595
azg inc -237 if bx == -3558
azg dec 820 if vb >= -2322
kxm inc -371 if qet < 2918
i dec 405 if wl != -6507
qun dec -596 if udh > -1178
v dec 973 if wui == 2286
as dec 840 if sdw <= -7121
udh dec 373 if w <= 831
ebu dec 372 if iq > -253
n inc 469 if qet == 2916
udh dec -123 if obc > 2457
wui inc 517 if c != 3270
wl dec -729 if kxm < 578
vb dec 934 if wui >= 2800
qet inc -307 if wui >= 2803
sdw inc -935 if c <= 3266
tzy dec 14 if w < 841
k dec 167 if eh <= 1579
j dec 438 if bx >= -3573
obc dec -452 if azg >= -2415
xjo dec -41 if ne > -3056
qet inc -482 if qet != 2614
obc dec 390 if bx >= -3571
v inc 289 if azg <= -2410
k dec -777 if azg <= -2397
xjo dec 658 if azg <= -2406
c dec -681 if ebu > 2332
n dec 877 if ebu != 2334
ne inc -602 if azg > -2410
w inc -334 if eh == 1574
c dec 64 if sdw < -8051
bx inc -76 if udh > -1043
vjx dec -169 if c >= 3263
as inc 941 if vb != -3248
i dec 131 if xjo < 1084
as dec 222 if n <= -1750
i inc -249 if wui < 2811
obc dec 28 if tzy == 4635
n inc -816 if xjo <= 1087
obc dec 872 if qet >= 2624
vjx inc -201 if ne == -3649
eh dec 602 if iq >= -250
w dec -596 if i != -3188
w dec 212 if vjx < -7436
xbh dec 523 if kxm == 577
n inc 962 if v <= -281
iq dec 30 if c <= 3268
obc dec -300 if sdw == -8050
vjx inc 125 if eh <= 984
sdw inc -470 if j >= 1854
vb inc 295 if udh >= -1045
skh dec -79 if wui > 2795
skh dec 307 if iq <= -272
azg inc -74 if j != 1865
qun inc 745 if as == 3182
i dec -928 if wui < 2809
obc inc 63 if wui >= 2800
xjo inc 114 if ne < -3644
qun dec -92 if as <= 3185
obc inc -363 if w != 1211
tzy inc 194 if ne == -3651
xjo dec 569 if as < 3185
i dec 295 if j >= 1848
ne inc 946 if w == 1219
skh dec -149 if j >= 1866
kxm inc -579 if c != 3271
a dec -979 if iq < -275
xbh dec 281 if k == -3985
xbh inc 88 if obc != 2207
vjx dec 881 if udh <= -1042
i inc 641 if qun < 3117
vb dec -132 if vjx != -8192
udh inc 952 if obc <= 2195
ne dec 562 if iq > -287
xbh inc 673 if wui <= 2800
bx inc -737 if kxm != 8
w inc -766 if wui >= 2798
tzy dec 838 if vjx > -8198
i inc 435 if obc != 2195
a inc -582 if wui > 2796
azg inc -87 if vjx == -8194
udh dec 634 if ne >= -3274
j dec 235 if kxm != -2
v dec 143 if vb < -3114
as inc 70 if bx > -4308
w inc 864 if n < -1616
bx inc 959 if n < -1604
tzy dec 933 if i != -1469
ne dec 369 if ebu > 2320
v inc 387 if qet >= 2621
qun inc 616 if k != -3985
xbh dec 901 if skh != -3276
k dec 770 if bx > -3347
c inc 345 if azg > -2567
sdw inc 485 if udh != -1672
ebu dec 697 if xbh == -2515
qun inc -223 if obc < 2203
vb dec -329 if as == 3250
i dec -828 if qet == 2614
i dec 457 if ebu > 2317
c inc 859 if vb >= -2794
vjx dec -324 if xbh < -2519
tzy dec 350 if sdw >= -8037
wl dec -546 if a <= -4346
ne dec -422 if vb <= -2784
iq dec 933 if udh == -1682
vb dec -354 if w < 461
as inc 222 if ne == -3211
i inc -488 if c == 4123
v inc 466 if bx < -3338
vb dec -779 if iq < -1208
i inc -54 if i > -1581
vb inc -124 if as > 3248
qet inc -25 if i >= -1586
ebu dec -572 if qet == 2589
bx dec 699 if k >= -4763
iq inc -184 if kxm != 2
kxm dec 986 if xbh <= -2515
j inc 904 if vb != -1773
a dec 862 if vb == -1778
wui inc -604 if ne >= -3223
a dec 682 if qun == 2884
qun inc -315 if iq <= -1395
n dec -930 if qet < 2598
n inc -532 if iq <= -1406
w inc -921 if xjo > 618
bx dec 728 if a > -5891
skh dec 463 if sdw > -8038
i inc -119 if c != 4128
n inc 651 if ebu >= 2894
xjo dec 978 if eh != 982
i inc -948 if n == -28
skh inc -459 if v < 41
j inc 625 if kxm == -988
skh inc 38 if k >= -4757
eh inc 207 if eh > 968
k dec 771 if sdw < -8027
vjx dec 73 if qet <= 2592
j dec -53 if iq >= -1403
vb inc 952 if vjx <= -8263
azg dec -345 if as > 3240
w dec -802 if ebu <= 2901
azg dec -861 if iq <= -1394
xbh dec 160 if xbh > -2522
vb dec 170 if wui != 2201
xbh dec -607 if azg <= -1361
obc inc -204 if as >= 3245
n dec 717 if wl == -5769
tzy inc -417 if qet < 2594
qet inc 516 if kxm > -990
tzy dec -355 if azg < -1356
xbh inc 946 if eh >= 1192
iq dec 221 if ebu <= 2904
c inc -692 if vb > -1006
xjo dec -599 if obc < 2004
ne inc -255 if vb >= -1000
vjx inc 144 if sdw != -8038
tzy inc -905 if ne >= -3467
j inc -71 if qet < 3108
as inc 289 if skh == -4165
i dec -621 if azg > -1371
xjo dec 703 if w == 334
wl inc 657 if azg < -1358
n inc 152 if sdw < -8041
skh inc 258 if vjx == -8123
iq inc -613 if w >= 330
azg dec -55 if azg < -1366
w inc -504 if n == -745
vjx inc -100 if kxm < -996
j dec -699 if tzy > 3577
wui inc -120 if i > -2038
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day8-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day8-common-header>>

(define (process-text txt)
  (let ((registers (make-registers)))
    (for-each
     (lambda (line)
       (let ((words (process-line line)))
         (match words
           (() 'noop)
           ((unused) 'unused)
           ((tgt-reg action amount "if" src-reg operator r-operand)
            (eval-line tgt-reg action amount src-reg operator r-operand registers)))))
     (split-lines (string-trim-right txt)))
     (let ((max-r (apply max (vector->list registers))))
       (list max-r (filter positive? (vector->list registers))))))

(define (process-infile infile)
  (process-text (load-txt infile)))

<<src-day8-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day8-part1

tangled/day8-part1.scm: tangled/day8-part1-exercise.txt -> (1 (1))

tangled/day8-part1.scm: tangled/day8-puzzle.txt -> (4066 (3431 4066 40 1183 3539 1997 2079 2569 3105 2899 3579))
#+END_EXAMPLE

*** Day 8, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day8-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day8-common-header>>

(define (process-text txt)
  (let ((registers (make-registers))
        (max-max-r 0))
    (for-each
     (lambda (line)
       (let ((words (process-line line)))
         (match words
           (() 'noop)
           ((unused) 'unused)
           ((tgt-reg action amount "if" src-reg operator r-operand)
            (eval-line tgt-reg action amount src-reg operator r-operand registers))))
        (let ((max-r (apply max (vector->list registers))))
           (when (> max-r max-max-r)
              (set! max-max-r max-r))))
     (split-lines (string-trim-right txt)))
     max-max-r))

(define (process-infile infile)
  (process-text (load-txt infile)))

<<src-day8-common-main>>
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day8-part2

tangled/day8-part2.scm: tangled/day8-part1-exercise.txt -> 10

tangled/day8-part2.scm: tangled/day8-puzzle.txt -> 4829
#+END_EXAMPLE

** Day 9

*** Source, common parts

#+name: src-day9-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>
#+end_src

#+name: src-day9-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (infile) (format #t "~a: ~a -> ~a~%"
                            (car args) infile (process-infile infile)))
   (cdr args))
  0)
#+end_src

*** Day 9, Part 1

**** Data

#+begin_src txt :tangle tangled/day9-part1-exercise.txt
{}
{{{}}}
{{},{}}
{{{},{},{{}}}}
{<a>,<a>,<a>,<a>}
{{<ab>},{<ab>},{<ab>},{<ab>}}
{{<!!>},{<!!>},{<!!>},{<!!>}}
{{<a!>},{<a!>},{<a!>},{<ab>}}
#+end_src

#+begin_src txt :tangle tangled/day9-puzzle.txt
{{{{{{<!!u!'a<e!!!'!"!>,<o!!!!o>,<oio{>},{{{<,!>o!>},<!>},<!i!{,a!!}!!!>!>},<!!a'>,<!!!!!>>},{{<"!!!>'!>},<!>},<!,!>},<!>eu">},<!!!>ua!>!>!u",!}u!,ieu'u{{a>},{{},{{{<a!!o,o<>,<e!>},<!>iiu!>,<!>{!>,<>},{{<!>,<o,!!!!u>}}}},{{<u!'!>!!!>},<!!!>e!!!>!!a!!o<i>},{{}}}}},{},{{{{<!>,<o!>{oi!>,<>,{{<u!iae}{!!"ia>},{}}},{<!>,!o>,<">}},{<!!!!!>o!>},<{>,{<!o!>},<aa!>},<uu>}},{{<}i!!>},<}!>},<!!!!!>},!!!>},<}a!!!!!>!!u>}},{{<!!o!!!o>}},{<oue{!!!!{",,!!o>,<a!>i,!!!>!!u'"!!<>}}},{{{{}},{{{<!>{!!"ie!>!{!o{!!}u<}"a>},<',a}<'a!>},<>}}},{}}},{}},{{{{{<"u>}},{{},{{<!>>},{<!>,<"!!!>!>},<!"!i!>},<!>},<!!ie!!u>}}},{{{<!>{o,e!!!!!!!>,<'!!!>e>}}}},{{},{<!>},<o'''!!!!u!!!>!!}oe>}},{<!>},<!'!>,<!!!!!>!>},<!>,<!>},<{!{!!!>!!<}!>>}}},{{{<o{i!!!a!>'!>,<,!{!>,<!!u"!>a!>!>!>},<a>},{<!!i<!!!>}aiu'<,!'{!>,<>}},{{{},{{{{{<!!!>},<!!<!>a,!>,<!>,<!u!!!>>,{{<!!!>>}}}},{}}},{{{},{{{{{}},<!>,<!!!>i!!,!{!>,<!!!><!!"e!,iua>},{{<!!e!u!>!'u!>,<!!!>!!,!!e,!!!>!!ui}"">},<!",>},{<!>,<}"{!!{!!e!>!!!!>,<>}}},{{{}},{{<,ee!a},>},{{{{{{{}},{<!!u}!!>}}},{}},{{},{<!}!!,!>,o!!!!'>}},{<!>,<ee!>i!!!!!>u,,,>,<>}},{<!"<!>,<a!>!!!>!!a!>,<"!!'u!!<!!!!!>!>},<<>}}}},{{<e!><!!,<"'!!>,<e!<}}>}}},{{<!!!>u!>,<io!<i<i>,<!!!>!!!!!>!!!>>}},{{{{<!e!!'i''!!!>},<!!<}>},{<!!!>}{'u!!{!>,iu!!!>o>}}},{{{},{<ui!>,<!>},<!!a}}!>,<!>,<},au!>i!!>}},{{<e>},{{<<!!!!!>}!>,<u{'!!{i>,{{},<!!!>},<{!>},<"'!>},<<!>,<u>}},{<!!!>!,!>},<",!!ee!>,<!!},,"o<o>}}},{<}{"u}!>},<u!!!>!,"i!}!>,<!!!>,!>,<{i!>,<>,<<>}}}},{{{{<!!}!a!!"}{!ioi>}},{},{{{}},{<'u!>!>},<!"!!!>ie!>},<e!!'<,}>}}},{{<!!,}>,{{<!a!>!>,<!>!!{i'"{!>,<}!!!>!!,e!!i!!!>>}}}}}},{{{},{<!><!}i!!!!u<!!!!a!!!!!!u!>,<,!a>}},{{},{<}u}!>}!!!>i!!"!!e'e{!!!>},<>,{<!}}}!>},<"!>,!>},<o,,e!>,<!uu>,{{<!>e,!>},<,u!"!!!>o!!"<!!!>!!!>>},{}}}}},{{{},<!!!>},<!>,<o!>{{!>,<}"o!>,<uo>},{<!!!!,o}<!!,!>,<>,<,ue!!{!>},<}>}}}},{{{<!>,<{!>}o>},{<e!!!!!!!!!>!>,<!!">}},{<,a!>,<!{}oa"'>},{{}}},{}},{{{{<!>,<,{!<{,!>i<!>,<!!<!iu}!>},<i!}>},<!>,<'"'!>'!!!>!>},<!>>},{{{{<e!!{!>},<>},<o!!u!>},<'!,!o!>i}{!!"!!!!!>!e!!,!>},<!!!>,<>},{{{<{""i>}}}},<!!'}>},{{<i!>e!!!!o!>'}"e!>,<!!i}!!<u>},<>}},{{<uoei!{!!!i{ei!!!>!>,<,!'!}!>},<!!e>}}},{{{<a!i<'a}"!>},<<o!!!>!!!>,<!!!>>}},{{{{<!>,<uo!,,,!!!>!!!>!>!!!!!!oa>},{}}},<!!!!"!!!>!!!!{!>,<'!>},<!"aa!!>}}},{{{{},{{{{<a'}!!u<>,{<>}},{{{<o!!!!,a<!!!>!>},<"!o>},{}},<}"a!">},{{<,u!o"o}!}'!!{'!"!!!>!!u>},<i,>}},{{{<!>,<",!!!>!!!>u}!>},<}!!o>},{{}}},{<}<uu>}}},{},{{},{},{{<ui!!!>!!!>!!<u!<<i!>,<}!!u!!!>ou!!!!">}}},{{{<!!!>!'!!!>,<!!}!o!!<a<ia,u>,{<'"}u<e!!!{!!!!!>,!>},<<a>}},{{{{<<,!io!>,<u!>,<{!uu!!!>!>},<!oio!!<u!!'>}},<ae{}<!!!>!!!>!iaa!>},<!!iou>}},{<!!,!!!>!!!>e""!>},<"!!!!!!u,>,<!!!e'!"<!!o!>},<'!>,<!>!>},<o}ea>}},{{{},{<ii"o",!{,"!!!!!>},<>,<!>,<u!!o}<!>o!>,<!>},<,>}},{<!!!!!>,<i!!!!{,>}},{},{{{{<{{!>,<!>},<a!>,<>,<}!!{!>,<o!!e!>,<u<>},{<i!!!>,<o!>e!!!>>},{{{},<}!!{!!i!oa!!'!>a!,'!!<'!!">},{}}}},{{}},{{{<>},{<o!>,<!"u}!!>}},{{},{<!!<''e}a!!<ua>}}}}}}},{},{{{},{<',}!!!>!>},<!<{i{!>},<i!>!>,<!!'}'!!u{!>>}},{<"}!>,<,a<u!!oe!!!>,<>}}},{{{<}!!!>!>,<!>},<i<!>,<au!!!>},<">,{<i>}},{{<!!"}!>>}},{{<>,<,a!>},<u"e!>!>,<'!!!>'>},<!!e!!u'<}!}o!>},<oe!u!!!'>}},{{},{<!><o!!!!!><!e<"!>,<i!u<!>},<o>,<{!!!>,!!e!!!!e!>!!!>aoe!!"u{i>}},{{<a!>},<!!!!u">,{}},{{{<o,>,{<!!!!<>}},{<,>}}}}},{{}},{{<!ae,>},{{},{{{<},'!"!>},<,'oi>},{<!'!>},<a!>},<!>},<"!{!>,<ua!i!u!!"!oi>}},{<!!"!!!"!>,<!>,<}!>},<!>},<!!{e!!!>,<>}}},{<,o,}o{!>},<,!!!>},<oo,e>,{<!>u!>{}}}!>,<i!!!>">}}}}},{{{{{<!!!!!!!>e!!<!!!!!>!'!>!!!>'!!a'a{!>},<u>},{<!!!!!>!!!>,'o!>},<!!'oi>,{{<!!o'},i',u'!!a<"{!,!>!!e>},{<!!!!!>,<!}o{,>}}}}}},{{{{{{{<!>},<a!!'a!!o,!>!!!!uo!!!!!>!!!>>},{<<u"{!!!>},<i>}},{{<u!>e!!!>!>'!!<!!!>ee!>},<!!!>{!!!>io!>,>},<}>}}},{<!!!>}aa{a!!uu!>>}},{},{<!!,!!e}o}!>}!>,<>,{<a,!>},<ou}>,{}}}},{<iu>,<>},{<!>},<!!oo!>i}>}},{{{{},{}},{},{{{<}!!!!!>!,<i,!>u!!!!}{"!o!!!>,>,<o!!!>!!,!io>},{{<'!>!!i!"!!"!>}a!!!>},<>},<{'>},{<'!!,,!!a!>},<!>,<{a,!!>,<!>e!>},<'!!!>!!<u!>},<!>,<!>{!>},<!!i!>,<!iie>}},{{{{}}}}}},{{<!>}>}},{{{{<'!!!!!>{!!!>},<o>},<>},{<ou'{!i!>>,{<ai,eu!!!>'u!!!!!>!!!>a{,!>,<a'i>}},{{{}},{<!>},<!>'""!'!!">,{<!>,<{u!>},<,ia!!!o!'{i>}},{{{<!!ee!<!!!>!!!>o>}},{<{iioa>}}}}},{{{{},{<!!!>"!!!!e!>},<e!>e"}!!}'!!>}}},{{<>},{{<}!!}!>!>,}i}!!!>",!!!>"!"!ai>}},{<!!,>,<!>,a!!!>,<!>},<!>,<!>},<e,{>}},{<,!>,<"!"!!!!!>},<u{!>},<ao>}}}},{{{{},<e!i!>,<<}a!>!!a>},{{<<!!iu!>},<a!>},<eu!iu!!!a!>},<o!>,<"!!,o>,<<!>},<!!!>a>},{{<,!>e<>}},{{},{{}},{<!>!>!!i!>>}}}},{{<!>!>ai!>,<!!!>>,{{<o!!!!,!!!!!!!!!><!>},<{!>eu!>},<!!!>!!<i!,!o>},<!>},<o!>!o!!,}!>},<!!a!!!>!}e!!o"!"'u!,>}},{},{<}"!>,<!!!>!!!>!e}!>!!e{}''>,{<!>ae!>},<u!!!>o!>},<!{!>,<!!u<"!>},<>}}}},{{},{{{<}!>},<!!oa!!i!>,<!>},<!>,<!!!><u!>,<'>,{}}},{{<!>!!,<,',!>},<>},{}},{<<!!!>}u!!!!!>},>,{{<!!"!"'>,{{{<iu!!!!!>},<!!!>>}}}},<>}}},{},{{}}}},{{{{{{{},{<'{'{!>,<!!!>!!!>u"uao{a!!!>u,i!!!>>}}}},{{<",!!!>},<">},{{{<!>!>},<>},{<!>,<!><!>},<!!{"<uoi!>,<e>,{}}},{{}}},{<!>,<>,<!>},<ae'e!!'<!>,<!>!>}}!>,<!>},<u>}},{<}i!!!>},<u>}},{{<!}!>o!!!{}!!!>>,{}}},{},{{{{{<>}},{{<!<,a!o"!>},<!>},!!!><!>},<>},{<!i!>o!!!>},<!>},<e<{e!>!<!>},<">}},{<a<,!''!>{',u,}u>}}}}},{{{{{{{<u!!!>o!!,e!>!!ai!!!''!>,<}!>,<!!!{>}},{<!!o>}}},{<u!>!>,<}"!!>}}},{{{<ui>,<!!!>eu,!!!>oi!>,<!!!!!>>},{{<!!"'!>},<"!!!>!!,{}!!'i!>a>},<!>},<!!!>eo"i!!o>},{{{<!>},<ui!>!>,<ie!>},<uu>},<o!u!>"!>},<e!>"e,<e!>,<io!>},<ai>}}},{{<!uo!!!"a!!!>},<"!!!>o<'e"!!'eo,<!!!>>,{<"ua!>},<!!<!>,<,i>,<!!!>'!!!}e{!!!!{<eu!>},<!!!>!>},<,!!'a!>>}},{{{{<!!!>u}'!>,<ea>},<!!>}}},{{{{}},{<!>,<!!ao!!ae>}},{<!!">}}},{{<!>,<ie!!!>}<i!<!>},<a>,{<},!,"o!>,<e'!!!>a!o!>,<'>}}},{{{{<"!!}!!"}!!oo>,{<!>,<{,ao<"a!!"{>}},<{'"""}!>},<<!>},<<!!a!!>}}}}},{{{{{},{{},{<>}},{{<!!!>},<!>},<"{'a{eo>},<!><!!uiaa,'<a"!>},<!>,<<{"o>}},{<oa{,!!!!!>,a>,{{<a{<i}e!!!>{>}}},{<!>'e!!e>}},{{{<!!!>,<},ae<!>!!!>"e!!!>>}}},{{<>,{{{}}}},{{<!e!>,<a<a'!!i>},<"{!>!>!!!>{o,!}o!>},<o!>,<!!!}"!!>}}},{{{}}},{{<'!>,>}},{{{<!>},<!!!u!!o,!!"'!!!ae"!!!>a>,{<!!{{{!>!}!!oeu!>u!!e}a!>,<e!>,<,>}},{{<!>},<e"}!>u>},<o'i!!!>!!o!uu!>},<,'e>}},{{<e!!!>!>,<<"",u,>},{{<>}},{{},{{<"}!>!>}!!!>!!!>!<u>},<!!!>"!>,<ae!>i}!!!>oo,!a!ue>}}},{{{<>,{{},<}!!<>}},{<>}},{{},{}}},{{},{}}}},{{{<!>},<oiuu!{!>,<!!{>,{<o"!!<!>,<i,!>!>,<>,{<{!!!!'!>},<'>}}}}},{{{{<<!!!>!!!>>}},{{<u!>,<i!{a>},<!!!>o'!>,<!>},<<!!!>}>},{{<!!iie>},{<!{!!e}'i{!>}!ou>}}}}},{{},{{{{{},{<!!o<i!}!}ee!!!>!>},<"!!!>},<'{'e>}}},{{{<o}>}},{},{{{<!>,<!!e!>,<>}},{{},{<!e<!!!!}u!>,<,ui!>},<i,u}!">,<>},{{<"!!<}!>u!!i!!!>,!>,<e"io'<u>}}}}},{{}},{{{},{{}}},{{{{{},{{<u!>},<!>,<i!>!>,<'a<>}}},{<aa>}}},{{{<u!!"!!'!>!>},<i{u!>},<'>}}},{{},{<<ei!{!>},<>}}},{{},<,!!!>!!!!!>,<!!{'}!!!>,<!!!a!!"!!i!!!>i!!,,}{!!>}}},{{}},{{<!!i!!!>e!!!>,<!}!!!>!>,<e!!o,,oaa>,<{o!!!!!>i{!>>}}},{{{<u!!}a"u"a<}o{!a>,{{},{<!>},<oo!>,<i,!>u!>u!'!!"ae!!!>,<i!!!>>}}},{}},{{{}},{{<!!i<!>,<!!!ao!>},<!!!!!>,a!!!!!<>},<>}},{{{<!>,<!!,!!a!>},<!!!>},<!!u!>!><!a!!!>}!!oe!!aa>,{}},{{<!a{aa'<!>,<>,{}},{}}},{},{{},{<ao!!!>!>!!",e!!!>a!!!>!!!>u,'}>}}},{{{{{}},{<!!!>,<i,!>,<ei<'u<<!!o}>}}},{{{}},{{<!"a!>},<>},<ua"!!!>a!>},<!!!>'!oau>},{{<,!!!>!!!!!>,<{u'!>,<'!>'!!!>,<'!!<{>},{}}},{{<e!''!!!>ei{o"<!!o!>,<au>}}}},{{{{{<!!{}!!!>!>!>,<!>>},{<'!>o!>,<!!!!>}}},{{<!,!!!>},<i!>e}!!<a!>,<e!!o!!<"io>}}},{},{},{{{},{}},{{{<,,!!!>{>}},{{<!>},<i<e}!!ou<!>e>}}}}},{{{<,!>},<!<<<!>,<!>,<}!!e!!!>,<'!!!a<}!}!i">,{{<i!>!!!>{>}}}},{{{{{<!!ae>},{{<>}}},{{{<a!!!>,<!!!>i>},<i"}!!>},{{},{{{<'<!!"!!!>,<!>,<!<!!{}!>!!{ao!!>},{<u"u'"'o"!!}<!>,i{'!}>}},{{<e!!,!>,<!>!!!!!>,<u!!!>"ei}">},<{"a>},{{<'!!!>i}i!>},<a!!!>,!>!>,<!>,<>}}}},{{<!,e!!!>oe"ia}!!"!!!>u!>!!>},<!!!!!!}!!!>!!!!!!!>a!>,<,!ouo'e!!!!!"!!!>,o{o>}}},{{<}o!!,!!{ao'e>},{<!!!>"!!!>!>},<!>},<>}},{{<i!!'a>}},{{{<<}{!>},<!!!!!>'o!!'!e!!"!>,<o!>,<!>,<!!a!>,<"">},{{{<<""!!>},<}{e}<aiu{!>i'e!>},<>},{{{<>},<!>,<'!!ue!!u}<{!!!>{,}!!!>!!!!,!>},<!>,<<<>},<e!>},<!!!!{!!!>!<e>}},{{{<"!!!>'!>!}!!eeo!!ui!>>}},<!>,<!>},<>}},{<!!"{>,<!,}{!eau"!>,<!!"!!!>u!>,<"}!ee}>},{<,a!!u>}}},{{{{{{{{},<!!!o,u<"{"!>!>,<!!!>"!o!!'<o}!!!>!!!>>},{<!!!>ii!!ie!!!>!!!>},<u'!!'ei!au>}},{<!"oi!!e!!!!!>e}u!>},<!>},<!!!>!!!>{'o'!!e>,{<oo{!{i!!!!!>!>},<e!>>}},{<!o,>,{}}},{{<eao<>},{<!>,<!{"}>,{<i>}}}},{{{{{<!!oo!!!!,!!}o'<}u>}},{{<!<"e}!!!>!!!>!>o!!!!!!<e{e>}}},{{{}}},{}},{{<{e!>ie!>,i!>},<"<<!!"ie!!>},{<!!,!""!>!!>}},{{{}},<oo!!!>o<!!!>>}}},{{{{<!>'<!!!>e!!!>,<a!>>,<!!!!a!>!>},<!!e'ao!!!>}>},{{}},{{{{<!>,<!>},<"!!},>}},{},{{{<{ioo!>,<','!!'!>},<!>},<!!!!u>,{<!>},<>}},{<!!!>,<oe!'!>!>},<}"i'}!{,"!!!>>}},<io{aui!>a}!>},<'e>}},{{<'!>!>{<!>,<o"}i!>!>},<<>,{<!>,'!>},<!i!!!e!!!>!!!>!>,<!>{>}}},{{<>,<{e!>e!>{,{!!!>e{'a>},{<!!!!!><}!!!>'ia'">,<!>,<!!!!eoee!!!>",eoe>}}}},{{{<!ao!!ee!!a>},{<},<!>,<u!>},<u!!!>>,{<!!!!!>!!!>i!!!>!i,"{o>}}}}},{{{{{<>},{<!>!>},<"oa!!i!>},<!>,<!!!!}!!!>},<!!!>!!,>}}},{}},{<>},{<<!!!>!!a<">}},{{},{{<o!>ee"!!!>!>o!>{u!>!>,<'i!>},<!u!>!!>,{{}}},<!u{{}!!!!'e,e!>},<>},{{<!!!!},<!!!>{!!i!!<!>,<>,<!>ae!>},<u>},{},{<<!>},<e!>!!!>,!>,<a{'!>,<"i!!!>a!>!!>}}},{{},{<!!!>,<>},{{{<!!!>!!!>,<!oeio{i{e<!>,<e!!!>!!!>"!>o!!!>,<>},{<!!,"{}!!!>'!>"!>},<>}},<!!u!!!>!>,<o!}>}}},{{{<<!>},<"i!!!!!i!>},<!!<!u!>},<<'!>""i!>,<!>,<>},{},{<eu!>!>,<!!!>,<!!!>}}i!!!>},<>,<,<!>},<{!u'e!!!!i!ii!!!>!>,<oi>}},{{{<>},{<<'}!>,<a{,"!>!}!>!!!>!!!!>}}}}},{{{},{<a!>,<!!u!>!{!>,<>}},{{},<{<!}!!!>!!e!!e!>!>'!{,,>}},{{{<!>!!<<!!,!!!>,}!>},<!>},<uu!>,<!!>},{{<"'!>!>},<<!!'}!a>}}},{<e!>,<}}!!o"'u!>>},{<!!}!>,<e!!a!!!!'eu>,{<,!>,<!>,}}!>,<!>},<!!!>!!u>}}}},{{{{{},{{<{e"ou!!o!>o'{i>},{<"'!>},<!!!>!>,<i!!,<i<!>},<i>}}},{<!>,<}!!!>!>},<!>{e!!<!!!>}!e>,<}!!!!>},{{},<a,o'{>}},{{<o!!!>{'!>!>,<}}a{}i'!oi!>},<,!!i>,{<,!!!>,<{!uei{>}},{{<uau!>,<!!!><>}},{{{},<>}}},{{{{<u!!!>},<!!o!>,<u!!!>a!!e!!!>!>},<e,!>,<,!!!>!>!!ei>,<!>,<!>i!!!>!!o<''{!!,!>},<e"}!>{>},{}},{{{<!>!>,<!>,<oui>},<!>},<>},<!u!!a<!!,"!!!!!!o!>'!>!>!>},<>},{{{}},{<'!!}!!'!!!>!!u!!!>a>}}},{{{},<<{},!>!>},<>},{{{<'!!!!!>,<}<{}e!!!!!>!>,<>},{{{<!!<},!!!>!!!>{!>,<!>,<i>}},{{<'>,{{<u!>},<"!!!!!>!!!}!'>}}},{}}},{<>}},{{{},<',i!>},<o!!!>!>,<!!!!aau"!>!!!u!<>},{{{{<e'!!!io!!u!!!">},<e!!'">}}}}},{{{},{{{<!!!>!!!!!>>},{<{,!{{}{u!!!!!><{ou'>}},<'!>!!!>u}!>!>,<a!!o"!>>}},{<!<>}}},{{},{{{<!>},<!,!>!!!!a'>},<"o',!<a!>,<!!,!>},<a<!!!>!!!!,<>}}}},{{{{{{}}},{},{{<">},{{<!!!!}!><o!!!>!>,<>},{}},{{{<u''!>!>!>},<!!!>ui!"o!{!!"i!!!>>},{{}},{{{},{{<!!<!>"!!o'!u!!!>!!!>e}u!o>}}},{}}},{{},{<u!!a!>},<}iu}!{'!>},<!u'>}},{<i!>a}{}}<a!!!>!>!!!>{>}}}},{},{{{},{<"<!'!!a!>,<a{u!!!>!i>}},<!>,<iu!>!>!!a'<'!>},<!'!!">}}}},{{{<u"!!!>},<!>},<!!i!!<!>,<!!!>!>,<!!i!!!!<'!>},<>}},{<!>!>,<<!!>,<}e<!!!!ei!,,o"!!u!>,<!>,<"e!>,<u>},{<<o!>"<!!u!!!!!>},<{oe!>,<<>,<!!!!!>},<"!"{!>,<}!>},<u!!<u!>},<!!!>!>},<!!i{!>,<oe>}},{{}},{{{{{<!oe!!!>a!>},<<,>},{}},{}},{{},{{{},{<'!!ao!!!!a>}},{},{{<!>,<>}}},{<!!!>},<!!'{a!!}{o!}i!>},<{!!!>},<"!>},<u,>,<e!!!>o!o!!!!,!>,<!!'eu!!!!!>},<!>,<a}>}}},{<!!"!{!i!>},<au!<ua!>>,<!>!>!!!>'o!!o!!u'!,{>},{<<!'a!!!!!>i!>},<'!!e>,{<>}}}},{{<!!!>,<!!!!!!!>,<!>!>,<{!>,<!ue!!<!}'!!!!a!>o>},{{<!<!!!>a",!>!!!>!!!>'""o,!<}!!!>e>}}}},{{<!,!!!i,<i}}!>},<',!!!<!!>,<{!,"!!'o>},{{<!!!>u>}},{{},{<i!>!!'!!"<>}}}}},{{{{},{{{<}!>},<!!!>"!!e!>},<o}!>,<e>}}}},{{{<!>},<{ua!!!>uu!"!ii!!!!a!!!>!>o!>},<>},{}},{{{{<!!!!!!!>!>!>},<<!>,<!>},<e>}}}},{{{<>}},{<uu{{a!!!>!!"ueo!!e!!!!!!u'>}}},{{{<!!!!!!!>>},<<>},{<e}>}},{{{{{<o<'o,!>!>},<<!>!>},<<!>a!!,o>},<i<},,!>,<a!!ia!'ea>},{<!>,<u!>,<!>,<">}}},{{<<a!>,<}!>,!!!>!>,<<!>{>,<'<}!!}!>,<}!!e!>!!'!!}!!!!>},{},{{{{{<e!!!>!>'!>!!!>''!>},<!>},<!!"!u{!!!!o!!"!>!>>},<{!ou!!!>},<!>}'>},<!'!,"!!o!>,<">},{{{},{}},<o!>!!e!!",i}}!!{!!!>}<uo>},{{{<!!'">}},{{<'<!!!>,<!!!>}{<!!!>!e"!!!">},<!!!>},<!>i!>{!>},<"!!!>}!!i>}}}}}}},{{{{<{aeu!!,a!!!!a!>!{oi!!>}},{{{<>},{}}}},{{<!ia!>,<>,{<"'>,{<!,ie>,{<!!!>!!{eu!>,<,ea<>}}}},{{<!>,<!>,<!>},<"{o!!{!e'oeu<a},eou>}},{<,!>e>,<!>},<'!i'<e<ii}<!!>}},{{{<"<!>},<!}<!!"o,!>,<!i{iuea'!e>}},{},{{},{{{{{}},{<!>'""{u<!!o'!!!!!>!!!>!!!>'!!!!!>},<u!>o>}}},{{}}},{{{{{},{{{{<!>!!!!e>}}},{{<!!!>!!!!{}!!!>},<}>}}},{{<!!!!""!>},<!>},<}{!!oua}!>},<!!!euu}!>,<>},<!>,<!!!!!>ue!!ai!>},<{!>!>},<{'i,!a!!!!!{!!!>!>>}},{<"<!>},<i!!<u!!"a>},{{{{<!!!>u!!ee!"}"<!!!>!>,<!!!>"!>{!>,<!>},<a!!'>}},{{{<!>,<}{>},{<"a'ea!>}'{'!a!>,<!!'"!>,<!!!>>}}}},{<!!!!"e{"<!!!!{!!!!e!>,<,!><!!!>,<>,{}}}},{{{<'!o!!o!!{!>},<>}},{<i!!!!a"<>,<!>},<i!!}}>}},{{<!!{!!!><>,<e"!>},<<!>},<>},{<>,<!>},<<!>!!!>,<!!!>,<>},{<a!><"},!>},<>,{}}}},{{{<!>e"!!"!!ua!!!>>},{<a!!{'!!ei!>},<au>}},{<o!!!!e!><e!>},<{{o<!!!!">}},{{{{{{<i!!!>{'!>!!!!,a,i,,}!>,<!>},<{!>!>,<>},{<e!!!>o>}},{{<u!!!>!><"ioo!!'u}!!!>},<!<}>}}},{{<{e!!!!!><!>,<e!!!>""u!!eui>},{{{{{<!"!"!!e}"!!'!!o!!aaoa!>!>},<>}}},<ao!>,<!>},<!!"{iui!>!!!!,!!!><,!>,<a{u>}},{{<o!>},<!!i!u'ui!!!!!>!!,,!"!>,<}'!!!>!!>}}}}},{{{{<,!>,<!!!>},<!!!>},<e!>},<!!!>!>,<i!>},<!u{ee>},{<!'!>}>}},{{{<u<!>!!i!>{i!>,<>},<!!{!'!!}ao!>,<!>,<}!>},<!!!<>}}}}},{{{},{<!!!u!!!>!!!o"!!!>},<}!!'u!>,<>}},{{},{{<{{<}{!!!>!>e<!,i<{<<!>},<}>},{{<o>}}}}}},{{{<'!!!>!!'!!!>},<}{u>,{{{{<o}!iu{"}!!!>{!>,<!>,<!!!!'!!o!!!>a!>},<!>,<>}},{<!}i"o!>},<{!>,<<!>},<!>},<,!>,<,>}},<u'ei!!u!}>}},{{<!!e!>,<>},{{<!"ue!>i!>,<e>},{<}!oa!!"<{oi!>},<i,!>},<!}!!!>},<i!!>}}},{{},{},{}}},{{},{{{<!!iai!>},<!!!>,!{i<>,{}}},{{{<!!i,!!!!!!!>ei,!>},<!><>}}},{{{}},{{<a!!e!!!!'!>},<,}>,<'}!>},<!!!>!!!>a}!!!!!!<<""iu>},{{<>}},{{{}},{{<!!a!>,<'!><o!>,<o!!}a!,e!>,o!>,<'!!!>e>}}}},{<a<o},a!>e>,<!>!!!>>}}},{{{{}}},{}},{{<!!a"!!!!i!!!>!!!>!',>,<">},{{}}}}}},{{{<}'}!!}ou!!!a!>,<<a}}!!!>u!>i!!!>o>},<">},{{<!!!>!!}ae!!ei!!!>a!,ue,!>,<!>},<<>},{<!>,<eo!>!>!>!a!!}<!>'a<<i!>,<i!!!>>}},{{<!!a!>},<{!>{!>,<<!>,<,!'{>,<!!!!!>!!{'u"!!!!!!!!!>!>},<'!!i<i!!!>!!,!!!>>}}}}},{{{<{!>},<,!}!o!!!>,<!!!>!>u!>,<!!,!!i!!o"{>,<!>,<eu"<!>},<o!i<!>},<!"!!!!>},{{<!!!>ou{{aa>},<!>},<{'!!!>"!,}<!!!!'!!'>},{{<!!!>!'!!!<'!!!>},<"u"i>}}},{{},{{<!>!>!>,<u!{eu<e!>},<<'ii!>'!>},<>}},{{{{{{<>}}},<e!>{>},{<'<e!!!!!>,<!>,<}i"a<>}},{<!>,!!!!},,!>{!>,<!'""e>,<!>},<}"}!>},<!a!u}'o>}}},{{{<,"u!>},<'{>}},{}},{{{{<<'!>},<!!!{!>e!!{o"!>},<!>e!!a!"a!!!>o>},{<ue!>,<!>,<a!>'!!<,!>},<>}},{{{<!>},<{!!!!!>,u!!!>},<"!!!i!>!!!>,<>}},{{<!!,'!!ie!>o'!>,u}!!!>!>},<'!!,,o!!>},{{{{{{<!>{!!"u!>},<a}o!!<!>,<a!!"e>}}},{}},{<",{i>}}}}}}}},{{{{<!}a!!!>}<!>,<"!!<'!!!>!>},<i,'',u,>},<"!>e}!>a'>},{{{<,!>au"iue!>},<e}ai>},{}}},{{<!>},<{>},<ei"uua!>,<a}!!!>e,oi>}}}},{{{{<!>,<!!!>'!>,<"}{{<oa!!},u{'>}},{{<}!!!ue""{>,{{<'eoe!!!>>},{{<!a>}}}},{{<{!>,<{>}},{{<'''<i!{,!>,<,e!>},<o!!!>!!!>!><,!i>},{<e>,<"<!!!>!>,<eu!>!>!!!>e!>!><!!!>i>}}}},{{},{{{{{<<,o!!a'!!a<"!>,<{e}>,{<}>}}}},{{<i{>},<i}!o{!}',>},{{<"<!>a!oo!'!!<!!ea<!>,<>}}},{{},{{{<!>,<i}!!!>,<!!u{!!!!!>"!!!>e,"e!>},<!>},<!!o>},{<o>}},{{<!>,!!e!!'!>},<}<a<<>},{<o!!e!<!!!>'ei!>},<!!{!!!!!>>}},{{{{}},{<!!{oi!>!!e"o>}}}},{{{<a!>!!!!,ou!i'!!!>uu!>,<,>}},<!!!>"<!>},<o<!!!'a<u!!!>!!oi}!>,<o>}},{{{{<!!!>u{!!u}!>},<!>},<a!!!>e<!!ai}iea!!!>>},<!i,ia!!o"u!!!>a!!,}!>,<!!!>>},{<>,{{<'!>},<a!>,<o{!>,<!>,<i!uu>},{{<aiai!e'io}>},<!>,<{i!>,<'}!!}i!!!!!u!'!>},<!!!>o>}}},{{<,ii>},{{<!>},<!>,<,'!!'>,{<!!!>!!!'!>},<!}{!>a"!>},<eo!>},<!}<o<!o!!!!!!>}},{{<,}"!>!!!>!!!>,<"a!>},<!!!>!"ueu!>>},<!!!!>},{<u!>,<!>'a!!!!i'>}},{{{<!!!>!>,<!!'<eu!>,<}!!!!!>o>}}}}}},{{{{<!>},<!}!!u,{,<'ie<a"!'!>"">,{<!>,<,!>},<'oe!>!!!>,>}},{{<>,<!au,o>}},{<!u{>}},{{<e!>iuu{o!!{'>}},{{<<euu!>,<>},{{<!!e"u>}}}},{<<>,<<>},{<{>}}},{{<!!o}o<>,{}},{{<}>,{<!!{a!!!>o!>},<e!>},<iu!!e!>,<}!>},<'>,<u!>,<!!!>a"!!!!!>ii{{!>},<!>},<"",>}},{{{{},{},{{<!u!!!>}a{!!'i!!!>!!!!!!{!!!>>}}},{{<!>,<{o!!!>u<!!{!>ia!>,<o"!>},<>,{<o!!!>}<!!!>},<"ee!ou'!o{e,uei!!>}}}}}},{<o,,!>,<!!!<'!>e!}!>>,{<!!!>"a!!>,{<{!!,{!>"!!,oiu}{{o!!i>}}}},{{{{{<!>},<a<!>u},"a!,>}},{}},{{<!>},<eaua{o!!i>,{}},<i!>},<!!!!"iu!!>}},{{<e'e}i<!>,<>,<e,u!!!!!<!!e"!!u!!!>,<!>,<io!!!>>},{{<!!au"!>},<!!!>!>}!!}<!!'<!!a>},{{<!!!>,<>},<">}},{<!>,<<a!>,<!au!!!><eu{,!>,<!>},<!!!>}!!!>}!>,<>}},{{{<{,ui!!!!!>},<!!u!>,<!!!>>},{<i!!!!!>!!!>a!!!>!!"},}!>,<<!!!>u"!>,<!>},<>}},{{<a}!>!"!>e!!!>},<}!!!>},<o<ao'>}}},{{<>},{{{<uu{o!>,<i<>}}},{{<iue!>,<!>},<'!!!>!>},<i!!>},{<u!!!>i!>},<!>,<!!!!!>!!!>!!"i<!!!>},<u"<o!<>}}}}}}}
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day9-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day9-common-header>>

(define (parse-line line)
  (let loop ((chars (string->list line))
             (state 'normal)
             (group-score 0)
             (sum-scores 0))
    (if (null? chars)
        (cons sum-scores state)
        (let ((curr (car chars)))
          (ecase state
                 ((normal)
                  (cond ((char=? curr #\{)
                         (loop (cdr chars)
                               'normal
                               (+ group-score 1)
                               sum-scores))
                        ((char=? curr #\})
                         (loop (cdr chars)
                               'normal
                               (- group-score 1)
                               (+ sum-scores group-score)))
                        ((char=? curr #\,)
                               (loop (cdr chars)
                                     'normal
                                     group-score
                                     sum-scores))
                        ((char=? curr #\<)
                               (loop (cdr chars)
                                     'garbage
                                     group-score
                                     sum-scores))
                        (else (errorf "Bad char ~s in ~s; state is ~s" curr chars state))))
                 ((garbage)
                  (cond ((char=? curr #\>)
                         (loop (cdr chars)
                               'normal
                               group-score
                               sum-scores))
                        ((char=? curr #\!)
                         (loop (cdr chars)
                               'garbage-escape
                               group-score
                               sum-scores))
                        (else (loop (cdr chars)
                                    'garbage
                                    group-score
                                    sum-scores))))
                 ((garbage-escape)
                  (loop (cdr chars)
                               'garbage
                               group-score
                               sum-scores)))))))

(define (get-line-score line)
  (let ((res (parse-line line)))
   (car res)))

(define (process-infile infile)
  (apply + (map get-line-score (split-lines (load-txt infile)))))

<<src-day9-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day9-part1

tangled/day9-part1.scm: tangled/day9-part1-exercise.txt -> 50

tangled/day9-part1.scm: tangled/day9-puzzle.txt -> 10616
#+END_EXAMPLE

*** Day 9, Part 2

**** Data

#+begin_src txt :tangle tangled/day9-part2-exercise.txt
<>
<random characters>
<<<<>
<{!>}>
<!!>
<!!!>>
<{o"i!a,<{i<a>
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day9-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day9-common-header>>

(define (parse-line line)
  (let loop ((chars (string->list line))
             (state 'normal)
             (count-chars 0))
    (if (null? chars)
        (cons count-chars state)
        (let ((curr (car chars)))
          (ecase state
                 ((normal)
                  (cond ((char=? curr #\{)
                         (loop (cdr chars)
                               'normal
                               count-chars))
                        ((char=? curr #\})
                         (loop (cdr chars)
                               'normal
                               count-chars))
                        ((char=? curr #\,)
                               (loop (cdr chars)
                                     'normal
                                     count-chars))
                        ((char=? curr #\<)
                               (loop (cdr chars)
                                     'garbage
                                     count-chars))
                        (else (errorf "Bad char ~s in ~s; state is ~s" curr chars state))))
                 ((garbage)
                  (cond ((char=? curr #\>)
                         (loop (cdr chars)
                               'normal
                               count-chars))
                        ((char=? curr #\!)
                         (loop (cdr chars)
                               'garbage-escape
                               count-chars))
                        (else (loop (cdr chars)
                                    'garbage
                                    (+ count-chars 1)))))
                 ((garbage-escape)
                  (loop (cdr chars)
                               'garbage
                               count-chars)))))))

(define (get-line-score line)
  (let ((res (parse-line line)))
   (car res)))

(define (process-infile infile)
  (apply + (map get-line-score (split-lines (load-txt infile)))))

<<src-day9-common-main>>
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day9-part2

tangled/day9-part2.scm: tangled/day9-part2-exercise.txt -> 32

tangled/day9-part2.scm: tangled/day9-puzzle.txt -> 5101
#+END_EXAMPLE

** Day 10

*** Common source for part 1 and part 2 and also used in Day 14

#+name: src-day10-day14-common-common
#+begin_src scheme
(define (vector-safe-reverse vec pos reverse-len)
  (if (<= reverse-len 1)
      vec
      (let* ((vec-len   (vector-length vec))
             (part1-len (- vec-len pos)))
        (if (<= reverse-len part1-len)
            (begin (vector-reverse! vec pos (+ pos reverse-len))
                   vec)
            (let ((new-vec   (make-vector vec-len 0))
                  (rest2-len (- reverse-len part1-len)))
              (vector-copy!    new-vec 0         vec     pos       vec-len)
              (vector-copy!    new-vec part1-len vec     0         rest2-len)
              (vector-reverse! new-vec 0 reverse-len)
              (vector-copy!    vec     pos       new-vec 0         part1-len)
              (vector-copy!    vec     0         new-vec part1-len (+ part1-len rest2-len))
              vec)))))
#+end_src

*** Source, common parts

#+name: src-day10-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>

<<src-day10-day14-common-common>>

(define (split-words-by-comma line)
  (split-words-by line #\,))

(define (get-number-list :optional (for-puzzle? #f))
  (iota (if for-puzzle? 256 5)))
#+end_src

#+name: src-day10-common-main
#+begin_src scheme
(define (main args)
  (let ((for-puzzle? (string=? (cadr args) "pz")))
    (for-each
     (lambda (infile)
       (format #t "~a: ~a: ~a -> ~a~%"
               (car args) (cadr args) infile (process-infile infile for-puzzle?)))
     (cddr args)))
  0)
#+end_src

*** Day 10, Part 1

**** Data

#+begin_src txt :tangle tangled/day10-part1-exercise.txt
3,4,1,5
#+end_src

#+begin_src txt :tangle tangled/day10-puzzle.txt
165,1,255,31,87,52,24,113,0,91,148,254,158,2,73,153
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day10-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day10-common-header>>

(define (get-length-list lines)
  (map string->number (split-words-by-comma (car lines))))

(define (compute-hash numbers lengths)
  (let loop ((lengths lengths)
             (numbers numbers)
             (curr-pos 0)
             (skip-size 0))
    (if (null? lengths)
        (* (vector-ref numbers 0) (vector-ref numbers 1))
        (let ((len (car lengths)))
          (loop (cdr lengths)
                (vector-safe-reverse numbers curr-pos len)
                (modulo (+ curr-pos len skip-size) (vector-length numbers))
                (+ skip-size 1))))))

(define (process-infile infile :optional for-puzzle?)
  (let ((lines (split-lines (load-txt infile))))
     (compute-hash (list->vector (get-number-list for-puzzle?)) (get-length-list lines))))

<<src-day10-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
;; test from task description:
;; 0 1 2 3 4 - 0 0 3
;; 2 1 0 3 4 - 3 1 4
;; 4 3 0 1 2 - 3 2 1
;; 4 3 0 1 2 - 1 3 5
#+END_EXAMPLE

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day10-part1

tangled/day10-part1.scm: ex: tangled/day10-part1-exercise.txt -> 12

tangled/day10-part1.scm: pz: tangled/day10-puzzle.txt -> 4114
#+END_EXAMPLE

*** Day 10, Part 2

**** Common source, also used in Day 14

#+name: src-day10-day14-part2-common
#+begin_src scheme

<<src-day10-day14-common-common>>

(define (get-length-list input)
  (append (map char->integer (string->list input))
          '(17 31 73 47 23)))

(define (compute-sparse-hash numbers lengths curr-pos skip-size)
  (let loop ((lengths lengths)
             (numbers numbers)
             (curr-pos curr-pos)
             (skip-size skip-size))
    (if (null? lengths)
        (values curr-pos skip-size)
        (let ((len (car lengths)))
          (loop (cdr lengths)
                (vector-safe-reverse numbers curr-pos len)
                (modulo (+ curr-pos len skip-size) (vector-length numbers))
                (+ skip-size 1))))))

(define (compute-dense-hash numbers)
  (define (hash-16 start)
    (apply logxor (vector->list numbers start (+ start 16))))
  (map hash-16 (iota 16 0 16)))

(define (compute-knot-hash length-list :optional (number-list (iota 256)) (nb-rounds 64))
  (let ((numbers (list->vector number-list))
        (curr-pos 0)
        (skip-size 0))
    (for-each
     (lambda (_)
       (receive (%curr-pos %skip-size)
           (compute-sparse-hash numbers length-list curr-pos skip-size)
         (set! curr-pos %curr-pos) (set! skip-size %skip-size)))
     (iota nb-rounds))
    (compute-dense-hash numbers)))
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day10-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-assert>>
<<src-day10-common-header>>
<<src-day10-day14-part2-common>>

(define (hex-format-dense-hash sparse-hash)
  (string-concatenate (map (lambda (h) (format #f "~2,'0x" h)) sparse-hash)))

(define (process-infile infile :optional for-puzzle?)

  (if for-puzzle?
      (begin
        (assert (string=? (hex-format-dense-hash (compute-knot-hash (get-length-list "")))
                          "a2582a3a0e66e6e86e3812dcb672a272"))
        (assert (string=? (hex-format-dense-hash (compute-knot-hash (get-length-list "AoC 2017")))
                          "33efeb34ea91902bb2f59c9920caa6cd"))
        (assert (string=? (hex-format-dense-hash (compute-knot-hash (get-length-list "1,2,3")))
                          "3efbe78a8d82f29979031a4aa0b16a9d"))
        (assert (string=? (hex-format-dense-hash (compute-knot-hash (get-length-list "1,2,4")))
                          "63960835bcdc130f0b66d7ff4f6a5a8e")))
      (error "Cannot run part 2 with exercise input"))

  (let ((lines (split-lines (load-txt infile))))
    (hex-format-dense-hash (compute-knot-hash (get-length-list (car lines)) (get-number-list #t) 64))))

<<src-day10-common-main>>
#+END_SRC

Some test invocations for the REPL:

#+BEGIN_EXAMPLE
;; test from task description:
(get-length-list '("1,2,3")) ; (49 44 50 44 51 17 31 73 47 23) = 49,44,50,44,51 + 17, 31, 73, 47, 23

;; test from task description:
(apply logxor '(65 27 9 1 4 3 40 50 91 7 6 0 2 5 68 22)) ; 64

;; test from task description:
(format-sparse-hash '(64 7 255)) ; -> "4007ff"

;; tests from task description:
;; (format-sparse-hash (compute-sparse-hash (list->vector (string->list ""))))

;; various trials:
;; using the same length sequence in each round - we can still pass the length list (also tested w/ list-copy, same result)
;; 1st try: 0fd43ee78c522ac0256b0d914d659819 (with numbers computed fresh for each round)
;; 2nd try: 411882b81dc724fe4cc54e6990edbaab (with numbers computed just once at start; string length is 32)
;; 3rd try: c407ab1bd60447af8aa952b573995631 (with + 16, not +15)
;; final try: passing curr-pos and skip-size back into compute-hash (dooh!)
#+END_EXAMPLE

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day10-part2

tangled/day10-part2.scm: pz: tangled/day10-puzzle.txt -> 2f8c3d2100fdd57cec130d928b0fd2dd
#+END_EXAMPLE

** Day 11

*** Source, common parts

#+name: src-day11-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>

(define (split-words-by-comma line)
  (split-words-by line #\,))
#+end_src

#+name: src-day11-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (infile) (format #t "~a: ~a -> ~a~%"
                            (car args) infile (process-infile infile)))
   (cdr args))
  0)
#+end_src

*** Day 11, Part 1

**** Data

#+begin_src txt :tangle tangled/day11-part1-exercise.txt
ne,ne,ne
ne,ne,sw,sw
ne,ne,s,s
se,sw,se,sw,sw
#+end_src

#+begin_src txt :tangle tangled/day11-puzzle.txt
n,nw,nw,sw,s,sw,sw,s,s,s,s,s,ne,s,ne,se,se,sw,s,se,se,se,n,se,se,ne,se,ne,n,ne,ne,sw,ne,ne,se,ne,ne,ne,sw,ne,ne,ne,n,ne,n,n,se,ne,ne,n,sw,n,ne,n,ne,n,ne,n,n,n,n,n,n,n,ne,n,n,sw,nw,n,nw,n,nw,n,n,nw,s,nw,nw,n,n,nw,se,nw,nw,sw,n,n,n,nw,nw,n,nw,nw,nw,nw,nw,ne,nw,nw,nw,sw,sw,nw,nw,nw,ne,sw,se,n,s,nw,sw,nw,s,sw,sw,n,nw,sw,sw,nw,sw,sw,nw,nw,nw,sw,sw,sw,s,sw,se,sw,sw,ne,sw,sw,sw,ne,sw,sw,sw,nw,sw,sw,sw,sw,sw,nw,sw,se,se,nw,nw,sw,sw,sw,ne,nw,sw,n,sw,sw,sw,sw,se,sw,sw,se,sw,ne,nw,sw,sw,nw,sw,sw,sw,se,sw,s,s,s,sw,s,sw,sw,sw,s,s,s,s,s,s,s,sw,s,nw,s,sw,s,s,se,s,s,s,s,ne,s,s,se,s,se,nw,s,s,ne,s,s,se,s,s,s,s,s,s,s,s,se,s,se,s,n,s,n,s,s,s,s,s,ne,s,sw,se,s,s,se,s,s,s,s,se,s,s,s,nw,se,s,nw,se,s,se,se,nw,s,sw,s,sw,s,se,se,s,s,s,se,s,s,se,n,se,se,se,s,s,s,se,s,se,se,se,se,s,nw,s,se,se,se,se,se,s,n,se,se,se,se,se,se,sw,s,s,se,n,se,se,ne,se,se,se,se,se,sw,se,se,se,n,se,se,ne,se,se,se,se,se,se,se,se,se,se,sw,sw,nw,se,ne,ne,n,s,se,se,n,ne,ne,nw,se,n,se,se,se,ne,ne,ne,se,s,s,se,se,ne,se,se,se,ne,ne,ne,s,se,nw,ne,s,se,se,ne,se,se,se,ne,se,s,ne,se,se,se,s,ne,sw,nw,s,ne,se,se,ne,ne,ne,n,ne,se,ne,ne,ne,se,ne,ne,sw,ne,ne,n,ne,s,sw,ne,ne,ne,se,ne,se,se,ne,ne,se,se,ne,ne,ne,ne,ne,se,se,n,ne,ne,ne,s,ne,ne,ne,ne,ne,ne,se,se,s,ne,ne,ne,ne,s,ne,ne,ne,ne,ne,nw,ne,ne,sw,ne,se,ne,ne,ne,ne,sw,s,ne,ne,s,ne,ne,ne,ne,se,s,ne,ne,ne,ne,sw,ne,ne,ne,nw,ne,ne,ne,n,ne,ne,se,ne,se,ne,ne,ne,sw,n,ne,ne,n,nw,se,n,n,n,n,sw,ne,n,n,n,ne,se,n,sw,ne,n,n,ne,ne,ne,ne,ne,n,ne,ne,n,n,ne,s,n,ne,n,sw,sw,ne,ne,n,ne,ne,n,sw,ne,s,ne,n,ne,n,n,ne,n,ne,s,n,ne,se,n,ne,n,ne,n,ne,ne,ne,n,s,ne,ne,ne,n,n,n,nw,ne,ne,n,ne,ne,n,sw,s,ne,n,n,sw,ne,ne,n,ne,n,nw,nw,nw,ne,n,n,n,ne,ne,se,n,n,s,ne,n,n,n,nw,ne,s,n,n,nw,sw,ne,ne,n,n,n,ne,n,ne,nw,n,n,n,n,ne,n,n,n,n,n,n,ne,n,n,ne,n,ne,n,n,n,n,n,sw,n,sw,n,n,sw,n,n,n,n,n,n,n,se,ne,se,sw,n,n,n,n,n,n,n,n,n,n,n,n,n,n,nw,n,n,nw,n,ne,n,ne,n,nw,nw,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,ne,n,n,sw,ne,n,n,n,n,n,n,n,ne,n,n,nw,n,n,nw,n,n,n,n,n,n,se,nw,sw,n,n,n,n,n,n,nw,n,n,s,n,nw,n,n,s,n,nw,n,n,nw,se,n,n,n,n,n,n,n,n,nw,n,n,nw,nw,nw,n,sw,nw,n,nw,se,nw,sw,n,nw,s,nw,n,n,sw,nw,nw,nw,sw,nw,nw,nw,n,n,nw,n,n,nw,s,nw,n,n,n,sw,se,n,n,n,nw,nw,s,nw,nw,n,n,nw,nw,nw,n,nw,nw,se,n,n,nw,nw,s,nw,n,n,n,s,nw,ne,nw,n,nw,nw,ne,se,n,ne,n,nw,sw,nw,n,nw,n,n,nw,n,nw,n,nw,n,nw,nw,n,n,n,s,ne,nw,nw,nw,nw,s,nw,nw,nw,n,n,nw,n,nw,sw,nw,nw,nw,n,ne,s,se,nw,n,nw,nw,n,nw,sw,nw,nw,nw,n,s,nw,n,nw,n,n,nw,sw,nw,nw,nw,n,nw,nw,nw,nw,nw,nw,ne,sw,nw,nw,nw,nw,nw,nw,sw,nw,ne,nw,nw,nw,ne,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,n,nw,nw,nw,nw,nw,nw,nw,n,nw,nw,s,se,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,sw,nw,nw,nw,nw,sw,nw,nw,nw,nw,nw,nw,se,n,nw,ne,nw,nw,s,nw,nw,se,s,nw,se,n,nw,nw,nw,nw,nw,n,nw,nw,n,nw,nw,nw,nw,nw,nw,nw,n,s,nw,sw,nw,sw,nw,nw,nw,nw,n,nw,n,nw,sw,nw,nw,nw,nw,nw,nw,ne,nw,nw,nw,nw,nw,nw,se,nw,nw,nw,ne,sw,nw,nw,nw,se,nw,nw,s,n,nw,nw,nw,nw,nw,nw,nw,sw,nw,nw,nw,nw,s,nw,ne,sw,sw,n,nw,nw,sw,nw,se,nw,nw,sw,nw,n,nw,se,nw,se,nw,sw,nw,nw,sw,nw,n,nw,se,nw,nw,s,s,nw,sw,nw,s,nw,nw,nw,n,nw,nw,sw,n,ne,sw,ne,sw,nw,sw,nw,sw,s,sw,nw,sw,nw,nw,nw,sw,sw,nw,nw,nw,se,sw,n,nw,nw,nw,sw,ne,sw,sw,sw,sw,sw,sw,sw,nw,se,nw,nw,sw,nw,sw,sw,sw,nw,nw,n,nw,nw,nw,nw,sw,sw,sw,se,sw,sw,s,sw,sw,sw,sw,sw,n,nw,sw,nw,nw,sw,sw,sw,sw,sw,nw,sw,sw,n,nw,sw,se,sw,sw,nw,sw,sw,nw,nw,ne,se,se,sw,nw,nw,se,sw,nw,sw,nw,nw,nw,nw,sw,sw,nw,sw,nw,sw,nw,sw,sw,sw,sw,sw,nw,nw,sw,sw,sw,sw,nw,nw,sw,nw,sw,sw,sw,sw,sw,sw,n,sw,nw,sw,nw,n,sw,se,nw,sw,s,nw,sw,nw,sw,sw,nw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,ne,ne,n,nw,sw,ne,nw,n,sw,sw,sw,sw,sw,ne,s,sw,se,n,nw,sw,sw,sw,sw,sw,sw,sw,sw,nw,sw,sw,sw,se,sw,sw,n,nw,sw,sw,nw,nw,sw,sw,ne,nw,nw,se,sw,sw,ne,sw,sw,nw,sw,nw,nw,sw,se,sw,ne,sw,sw,sw,nw,sw,sw,s,sw,sw,ne,n,sw,sw,ne,sw,sw,s,nw,nw,nw,sw,sw,sw,ne,sw,sw,n,ne,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,ne,sw,sw,ne,sw,sw,sw,sw,ne,sw,nw,sw,sw,sw,sw,sw,sw,se,sw,sw,ne,sw,nw,sw,sw,n,sw,ne,sw,sw,sw,sw,sw,sw,nw,sw,sw,sw,sw,sw,nw,sw,sw,sw,s,s,sw,sw,sw,sw,sw,sw,sw,sw,n,sw,sw,sw,sw,s,ne,sw,s,s,sw,sw,sw,sw,n,sw,sw,sw,sw,sw,sw,sw,sw,s,sw,sw,sw,sw,sw,se,s,sw,sw,sw,se,sw,sw,n,sw,s,sw,sw,sw,sw,sw,sw,sw,sw,ne,sw,s,s,s,s,sw,nw,sw,sw,sw,sw,nw,sw,sw,s,sw,sw,ne,nw,sw,sw,s,sw,s,sw,sw,sw,sw,s,ne,sw,sw,sw,s,sw,sw,se,sw,sw,sw,sw,sw,sw,ne,se,sw,sw,ne,s,nw,s,sw,s,sw,s,sw,n,sw,n,se,sw,sw,sw,s,sw,s,sw,sw,sw,sw,sw,s,s,sw,s,s,s,s,sw,sw,ne,sw,s,sw,sw,ne,sw,sw,sw,s,sw,ne,sw,sw,sw,ne,sw,sw,s,sw,sw,sw,sw,s,sw,s,sw,sw,sw,s,sw,sw,sw,n,n,sw,s,sw,s,sw,sw,sw,s,s,sw,sw,sw,sw,sw,sw,s,sw,n,sw,sw,s,nw,s,sw,s,n,s,sw,s,s,s,sw,nw,s,sw,s,sw,s,sw,s,sw,ne,s,s,sw,se,sw,sw,n,sw,s,nw,sw,sw,nw,s,s,sw,s,nw,s,s,s,sw,sw,s,s,nw,s,sw,sw,s,nw,sw,s,s,nw,nw,sw,s,se,s,s,sw,s,n,sw,sw,sw,sw,sw,sw,s,ne,s,s,s,sw,sw,s,s,sw,s,sw,s,se,ne,s,s,s,sw,s,s,sw,ne,s,s,sw,s,se,sw,s,s,sw,se,sw,s,ne,sw,s,s,s,s,s,s,s,s,s,s,sw,s,s,sw,s,se,s,s,s,sw,s,sw,s,sw,s,sw,s,s,s,sw,s,s,s,sw,s,n,sw,sw,se,ne,s,s,sw,s,sw,n,sw,s,sw,s,sw,sw,s,s,sw,sw,s,s,s,s,se,sw,s,s,s,n,s,s,se,s,sw,sw,s,sw,s,s,s,sw,s,sw,sw,nw,s,s,s,s,s,s,s,sw,s,s,s,sw,s,s,s,s,nw,s,s,s,s,s,s,sw,n,s,s,s,n,s,sw,se,sw,s,s,nw,sw,s,sw,sw,s,n,s,s,s,sw,s,sw,n,s,s,sw,s,s,sw,s,s,s,s,s,ne,sw,s,s,s,s,s,s,n,sw,s,s,se,n,se,sw,s,sw,s,sw,se,s,s,s,s,se,s,se,ne,s,s,sw,s,nw,se,s,s,s,s,sw,s,s,s,s,s,se,ne,s,s,s,s,s,s,s,se,ne,n,n,s,s,s,s,nw,nw,s,s,s,s,nw,s,s,s,s,s,se,se,s,s,s,n,s,n,s,s,s,s,s,s,s,ne,ne,s,s,n,s,ne,s,sw,s,sw,sw,s,s,ne,s,sw,s,s,n,s,s,se,s,s,s,s,s,s,s,s,se,s,se,s,n,s,s,s,n,s,s,s,s,s,s,s,ne,sw,n,s,s,s,s,sw,s,s,s,s,se,s,n,s,s,s,s,s,s,se,s,s,sw,s,s,s,s,s,s,s,se,n,s,s,ne,s,s,s,s,se,s,se,s,s,s,ne,s,s,s,nw,s,s,s,s,s,se,s,n,se,s,s,s,s,s,se,s,se,nw,se,n,s,n,s,s,s,s,s,s,s,s,s,s,s,nw,s,sw,s,nw,s,s,s,s,s,nw,s,s,ne,sw,s,s,sw,s,s,ne,s,s,se,s,s,s,s,s,s,s,sw,sw,s,ne,s,s,s,sw,nw,s,s,ne,s,n,s,s,s,s,s,n,sw,sw,s,s,sw,se,nw,s,ne,s,s,s,nw,n,s,n,s,s,s,s,s,sw,se,s,s,s,s,se,se,s,s,s,ne,s,s,s,s,s,se,se,nw,nw,s,se,s,ne,se,s,s,se,se,se,s,ne,nw,se,nw,s,n,s,se,se,se,s,sw,s,se,s,se,s,s,s,s,se,se,s,s,s,s,ne,s,s,s,s,s,s,sw,se,s,se,s,s,se,s,sw,s,s,se,se,s,se,se,s,s,se,s,s,s,s,n,ne,se,s,se,s,sw,sw,n,s,s,s,nw,se,sw,se,s,se,se,n,se,s,se,s,s,se,sw,n,s,s,sw,sw,s,se,sw,s,se,sw,s,se,se,s,se,s,se,se,se,ne,s,s,se,s,ne,se,se,s,se,se,se,s,ne,s,s,s,se,se,sw,s,s,s,se,n,s,se,s,se,s,s,s,s,s,s,se,ne,ne,se,ne,se,se,se,se,sw,s,n,ne,s,se,s,s,s,s,nw,ne,s,sw,se,sw,ne,se,nw,s,se,se,se,s,s,ne,s,se,se,ne,s,s,n,s,se,s,se,se,se,se,s,se,se,se,s,se,sw,s,se,n,s,nw,nw,se,s,s,sw,s,se,s,se,se,ne,s,se,se,s,se,s,se,n,s,se,s,s,se,s,s,s,ne,se,se,s,s,sw,se,se,se,se,se,n,se,se,ne,s,se,ne,s,se,se,s,s,n,s,se,s,s,se,ne,se,s,ne,nw,s,n,s,ne,se,s,sw,se,s,se,n,s,se,s,se,se,s,se,s,se,sw,ne,se,se,se,se,s,se,se,se,n,se,se,s,s,s,s,se,se,se,nw,se,se,ne,se,se,s,s,s,s,se,se,s,se,se,sw,s,se,s,se,s,ne,se,se,se,sw,se,nw,n,se,s,se,se,sw,s,sw,s,se,s,s,se,se,se,s,s,se,se,nw,s,se,sw,se,s,se,s,se,s,s,ne,nw,sw,s,se,se,se,se,se,nw,nw,se,s,sw,se,s,ne,se,s,s,se,s,nw,ne,se,ne,se,s,ne,s,nw,se,sw,se,nw,s,sw,sw,se,se,se,s,se,se,se,se,s,s,se,s,s,se,se,s,s,se,se,se,n,s,se,se,se,s,sw,se,se,se,se,se,se,se,se,s,se,se,se,se,ne,se,se,s,ne,se,se,ne,se,s,se,sw,n,se,se,se,se,n,se,sw,se,se,se,sw,se,se,se,s,sw,nw,se,se,sw,nw,se,se,nw,se,se,se,se,nw,se,se,se,se,se,s,nw,se,ne,se,nw,s,se,se,se,sw,se,se,se,se,se,se,se,s,s,se,se,se,se,se,se,nw,n,se,se,se,n,se,se,se,n,n,se,n,se,se,se,se,se,ne,se,se,se,sw,n,n,se,s,sw,se,s,se,ne,ne,nw,se,se,ne,se,se,se,se,se,s,se,se,s,se,se,s,se,se,nw,se,se,se,se,s,se,se,se,se,se,se,se,se,se,se,se,se,n,se,se,se,se,se,se,se,se,s,se,n,sw,n,se,s,se,se,se,se,se,sw,ne,se,se,se,se,se,se,se,se,se,se,se,se,se,se,se,se,ne,se,se,se,se,se,se,se,se,se,se,se,ne,se,ne,se,s,se,se,se,se,ne,s,s,se,se,se,se,se,s,se,se,nw,se,se,ne,nw,nw,se,sw,nw,se,se,se,se,se,se,sw,sw,se,se,nw,ne,se,se,ne,se,se,ne,se,se,se,se,se,ne,s,se,se,se,se,se,se,se,se,se,se,n,se,se,se,se,se,se,se,se,se,se,n,se,se,se,se,se,ne,se,se,se,se,se,se,s,se,se,se,se,se,se,se,se,ne,se,se,ne,sw,ne,se,se,ne,se,se,s,se,se,se,nw,ne,se,n,se,sw,se,ne,se,se,se,ne,se,se,se,nw,se,se,ne,n,se,se,se,sw,se,ne,se,se,se,ne,se,se,ne,se,se,se,se,se,se,ne,s,se,ne,se,se,se,se,se,se,ne,ne,se,nw,se,se,se,ne,se,se,sw,ne,ne,s,sw,se,nw,ne,se,ne,ne,se,se,se,ne,ne,se,se,nw,se,ne,ne,se,se,s,nw,ne,ne,se,se,se,ne,se,se,ne,se,se,se,se,se,se,se,s,se,ne,nw,sw,se,se,se,se,se,se,se,se,se,ne,se,se,ne,se,se,se,se,n,se,sw,se,nw,se,se,se,ne,ne,se,se,ne,ne,se,se,s,se,ne,se,s,nw,se,se,nw,se,s,nw,ne,se,se,se,ne,se,se,se,se,se,se,se,se,se,se,se,se,ne,ne,ne,sw,se,se,se,ne,se,se,se,n,se,ne,s,ne,s,se,se,nw,se,ne,ne,n,ne,ne,se,ne,ne,se,sw,n,ne,ne,se,se,ne,se,s,se,ne,n,ne,se,se,se,n,se,s,sw,se,ne,se,ne,se,n,se,se,se,se,ne,se,s,se,se,se,n,se,se,ne,ne,se,se,se,se,n,ne,ne,se,nw,se,sw,n,se,ne,se,se,ne,ne,sw,se,se,se,ne,ne,se,se,se,se,ne,n,n,ne,se,ne,se,sw,se,n,se,se,ne,se,se,sw,se,se,se,se,ne,se,se,ne,se,se,ne,n,se,ne,sw,se,se,se,ne,s,ne,se,se,se,ne,sw,se,se,ne,ne,ne,se,se,ne,se,se,se,ne,se,ne,se,ne,ne,se,se,ne,ne,se,ne,se,nw,se,ne,se,nw,n,nw,ne,se,ne,se,se,ne,se,nw,se,se,ne,nw,se,se,n,ne,nw,se,n,se,se,ne,se,se,se,ne,se,nw,se,ne,ne,se,nw,se,se,se,se,ne,se,se,se,se,ne,nw,se,ne,se,ne,ne,se,n,ne,ne,se,ne,n,sw,ne,ne,se,ne,se,se,se,sw,ne,se,s,nw,se,sw,s,se,ne,s,ne,se,ne,se,ne,s,ne,ne,se,se,se,ne,n,se,ne,nw,ne,ne,nw,se,n,sw,ne,ne,se,ne,ne,se,ne,se,se,sw,sw,ne,sw,se,se,ne,ne,nw,ne,se,se,ne,se,s,sw,ne,se,ne,ne,ne,se,se,ne,ne,se,se,ne,se,ne,se,ne,ne,se,se,se,se,ne,ne,se,ne,se,sw,ne,se,s,s,ne,ne,ne,se,ne,sw,se,ne,ne,se,se,ne,ne,se,ne,ne,ne,ne,ne,se,nw,ne,se,ne,ne,se,se,ne,se,ne,se,ne,n,se,n,se,se,se,se,nw,ne,n,se,ne,s,ne,se,se,ne,ne,ne,n,se,sw,sw,ne,se,ne,ne,ne,se,n,ne,ne,se,se,se,ne,ne,se,ne,sw,ne,n,s,se,se,sw,se,ne,ne,se,n,nw,ne,s,se,ne,sw,s,ne,s,ne,se,nw,ne,ne,sw,ne,ne,ne,s,ne,sw,ne,se,ne,ne,s,se,se,s,ne,nw,nw,se,se,ne,se,ne,s,ne,ne,ne,ne,ne,se,se,ne,ne,se,sw,se,sw,ne,sw,ne,ne,se,ne,se,s,n,se,ne,ne,se,ne,ne,ne,ne,n,se,se,ne,n,se,se,ne,se,ne,ne,se,se,ne,se,se,ne,ne,ne,se,sw,ne,se,se,ne,nw,ne,ne,ne,ne,ne,ne,ne,n,se,ne,se,s,ne,se,ne,ne,se,ne,se,se,ne,se,ne,ne,sw,se,ne,ne,ne,s,ne,ne,s,ne,ne,ne,ne,se,s,ne,ne,ne,ne,ne,se,sw,ne,ne,ne,ne,ne,ne,ne,ne,nw,ne,ne,ne,se,nw,ne,se,ne,ne,ne,ne,ne,s,ne,ne,se,ne,n,ne,ne,ne,ne,ne,ne,se,se,ne,s,ne,ne,se,ne,ne,se,ne,s,n,ne,ne,ne,se,ne,ne,s,se,n,ne,ne,ne,ne,ne,ne,ne,ne,n,ne,nw,ne,ne,ne,sw,ne,ne,ne,ne,ne,ne,ne,nw,ne,se,ne,ne,ne,ne,s,ne,ne,ne,ne,ne,n,ne,ne,ne,ne,ne,ne,n,se,ne,ne,s,ne,ne,ne,s,s,ne,ne,ne,ne,ne,ne,se,ne,ne,ne,se,s,nw,se,ne,ne,ne,ne,nw,ne,ne,ne,sw,ne,sw,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,sw,se,ne,s,ne,ne,ne,ne,ne,ne,n,n,ne,ne,ne,n,ne,ne,nw,ne,ne,ne,nw,s,ne,ne,nw,ne,se,ne,ne,ne,nw,se,nw,ne,ne,ne,ne,ne,ne,ne,nw,ne,ne,ne,ne,sw,ne,ne,n,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,n,s,ne,ne,ne,ne,ne,ne,ne,ne,ne,sw,se,ne,sw,se,ne,nw,sw,ne,ne,ne,ne,nw,ne,ne,s,ne,ne,ne,ne,n,ne,ne,se,nw,s,ne,ne,ne,ne,ne,nw,ne,ne,s,se,ne,ne,s,ne,ne,ne,ne,ne,ne,ne,n,se,s,ne,ne,ne,n,ne,se,se,s,ne,ne,ne,sw,ne,ne,ne,se,ne,ne,ne,s,ne,ne,ne,ne,ne,ne,sw,nw,nw,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,ne,ne,ne,ne,ne,s,ne,n,ne,se,ne,nw,ne,sw,ne,ne,ne,ne,nw,ne,s,ne,ne,ne,ne,ne,ne,sw,ne,ne,se,nw,ne,ne,ne,n,se,nw,ne,ne,ne,ne,s,ne,ne,n,se,ne,ne,sw,ne,ne,ne,n,ne,nw,ne,ne,ne,se,ne,n,ne,s,ne,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,se,se,ne,ne,ne,ne,se,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,nw,ne,ne,nw,ne,ne,ne,ne,sw,sw,se,ne,n,ne,ne,n,n,n,nw,ne,ne,ne,ne,ne,ne,s,ne,ne,ne,ne,ne,n,ne,sw,se,ne,sw,s,ne,ne,ne,ne,ne,ne,sw,ne,n,n,ne,n,ne,sw,n,ne,n,s,ne,n,ne,ne,ne,ne,ne,sw,s,ne,nw,ne,nw,nw,ne,ne,ne,ne,n,ne,ne,ne,ne,s,ne,ne,ne,ne,ne,ne,ne,ne,n,n,n,ne,n,ne,n,nw,ne,n,ne,ne,ne,ne,ne,ne,ne,ne,sw,ne,ne,ne,n,ne,ne,ne,ne,ne,ne,nw,ne,n,n,ne,ne,ne,n,ne,n,ne,ne,sw,nw,n,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,n,n,ne,ne,ne,ne,ne,ne,n,ne,ne,ne,ne,n,n,s,ne,ne,ne,ne,se,ne,nw,ne,ne,se,nw,ne,ne,ne,sw,ne,ne,se,ne,n,n,s,ne,ne,ne,ne,ne,s,ne,ne,ne,sw,ne,ne,se,ne,n,ne,s,ne,sw,ne,s,ne,ne,s,ne,ne,ne,ne,s,ne,s,ne,ne,ne,nw,ne,n,ne,ne,ne,ne,n,ne,n,n,n,ne,ne,n,ne,n,ne,ne,n,nw,se,ne,n,ne,ne,ne,n,n,n,n,ne,n,s,ne,ne,ne,n,n,n,ne,s,s,n,s,nw,ne,ne,ne,sw,ne,ne,ne,n,n,ne,ne,ne,ne,ne,n,ne,ne,ne,n,ne,sw,ne,sw,ne,ne,ne,ne,ne,ne,nw,n,ne,ne,ne,n,s,n,ne,n,sw,s,ne,n,ne,s,ne,se,n,ne,se,n,ne,s,ne,n,ne,n,ne,ne,ne,ne,ne,n,sw,ne,n,nw,n,ne,ne,ne,n,ne,ne,n,n,n,ne,n,ne,n,sw,n,ne,ne,sw,ne,n,sw,n,n,n,nw,ne,ne,ne,ne,ne,ne,sw,s,ne,n,ne,n,n,ne,ne,sw,ne,ne,ne,n,ne,ne,nw,se,n,n,n,ne,ne,n,ne,ne,ne,sw,sw,ne,ne,ne,se,n,sw,n,n,ne,ne,ne,ne,ne,ne,sw,sw,ne,ne,ne,ne,n,n,nw,sw,ne,s,ne,ne,ne,ne,sw,n,n,n,ne,nw,ne,sw,ne,ne,n,sw,ne,ne,sw,ne,n,se,ne,ne,ne,nw,ne,n,ne,nw,ne,ne,s,ne,n,ne,ne,ne,n,ne,ne,ne,n,ne,n,n,n,nw,se,n,n,n,ne,ne,ne,ne,n,ne,se,n,n,ne,n,se,ne,ne,ne,ne,s,n,n,ne,ne,n,ne,n,sw,n,ne,n,sw,n,ne,n,n,ne,n,ne,sw,ne,n,ne,ne,n,s,ne,n,s,ne,n,ne,ne,ne,ne,n,ne,ne,n,ne,sw,n,ne,ne,ne,ne,ne,ne,ne,se,nw,se,n,n,n,n,n,ne,nw,n,n,n,n,ne,sw,n,n,n,ne,ne,n,ne,ne,ne,n,ne,sw,ne,n,sw,ne,n,ne,nw,n,sw,ne,ne,ne,ne,se,nw,sw,n,ne,sw,n,n,n,se,nw,n,s,ne,n,sw,nw,n,ne,ne,n,ne,ne,n,ne,n,n,ne,ne,n,ne,ne,ne,ne,n,sw,se,ne,ne,ne,s,n,nw,s,ne,ne,n,n,n,ne,ne,s,ne,ne,ne,sw,ne,n,n,n,ne,n,ne,se,n,ne,n,s,ne,n,ne,ne,n,ne,ne,s,n,n,n,se,n,n,ne,n,ne,se,se,se,n,n,n,nw,ne,ne,ne,ne,s,n,n,ne,ne,n,s,s,n,n,sw,ne,n,n,n,ne,ne,n,ne,ne,ne,sw,n,ne,n,n,n,ne,ne,nw,n,n,nw,sw,ne,sw,ne,s,n,n,s,n,ne,n,n,ne,n,ne,n,n,ne,ne,ne,n,n,ne,n,ne,ne,n,ne,ne,n,n,ne,ne,n,ne,sw,se,ne,ne,ne,n,n,nw,n,n,n,nw,se,n,n,n,sw,sw,n,n,n,n,ne,ne,n,ne,n,n,n,ne,n,ne,ne,se,se,ne,ne,n,n,n,ne,n,sw,ne,ne,ne,n,n,ne,se,n,sw,ne,ne,n,n,n,n,s,ne,n,n,nw,nw,n,n,n,ne,s,n,ne,ne,s,ne,n,n,sw,ne,ne,n,n,n,s,n,n,n,ne,n,sw,ne,n,s,n,s,sw,se,ne,n,n,n,n,ne,ne,nw,ne,n,n,ne,ne,ne,ne,ne,se,se,ne,n,n,sw,n,n,nw,n,ne,sw,n,sw,ne,ne,n,se,ne,ne,n,n,n,n,sw,n,n,n,nw,s,n,n,n,se,ne,ne,n,n,nw,n,n,n,n,n,n,n,n,n,se,n,ne,nw,n,se,n,ne,n,ne,n,n,n,n,nw,ne,n,n,ne,n,s,n,n,n,n,ne,ne,ne,ne,nw,n,s,se,ne,n,s,n,ne,ne,ne,nw,n,n,nw,se,ne,ne,ne,n,n,n,ne,s,nw,nw,nw,ne,n,n,nw,ne,n,n,ne,n,n,n,ne,sw,n,se,ne,se,n,nw,nw,n,ne,n,ne,ne,n,s,n,ne,ne,s,se,ne,ne,s,n,s,ne,n,n,n,n,nw,ne,n,sw,ne,n,n,n,n,n,se,s,n,n,n,se,n,n,n,n,n,n,n,n,se,n,n,s,ne,ne,ne,ne,s,n,n,n,n,ne,n,n,ne,n,n,n,ne,se,n,n,ne,ne,s,n,n,n,n,n,n,n,ne,s,n,n,n,nw,se,n,n,n,n,n,ne,n,ne,ne,ne,ne,n,n,se,n,n,ne,n,sw,n,ne,n,n,se,s,n,n,n,n,n,n,n,nw,s,n,n,n,ne,ne,n,s,nw,n,n,n,ne,ne,nw,n,ne,n,sw,n,n,ne,n,n,n,ne,nw,n,n,sw,n,se,s,n,n,nw,n,n,n,n,ne,sw,ne,se,n,n,n,n,ne,n,n,sw,nw,ne,n,n,n,sw,n,n,n,n,n,se,s,s,n,s,n,se,n,ne,n,n,n,n,n,n,n,ne,n,n,ne,n,n,n,n,se,nw,n,n,n,ne,n,n,n,n,ne,n,sw,n,s,n,n,n,n,n,se,n,n,ne,n,ne,n,se,n,n,ne,n,n,n,n,n,n,s,n,n,n,n,n,sw,n,ne,n,n,n,n,n,n,n,n,ne,n,n,s,n,n,n,n,n,ne,nw,ne,n,n,n,n,n,n,n,n,sw,n,n,n,nw,n,n,ne,n,ne,n,ne,n,n,nw,n,n,n,n,nw,n,se,n,n,se,n,n,n,n,n,n,n,n,n,n,s,n,n,n,n,ne,se,n,n,nw,n,n,n,n,s,n,n,ne,se,n,sw,n,n,n,ne,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,ne,n,n,n,n,n,n,sw,n,n,n,n,n,n,s,n,n,sw,n,n,n,n,n,n,n,n,ne,n,ne,n,n,n,n,n,n,se,s,n,n,sw,n,n,n,sw,n,n,n,n,n,n,n,n,se,s,sw,se,se,n,ne,se,n,n,n,n,n,n,n,ne,n,n,sw,n,n,n,n,n,n,n,n,n,n,ne,s,s,s,s,ne,s,s,s,sw,se,sw,se,ne,n,sw,nw,nw,sw,ne,se,nw,nw,nw,nw,se,sw,n,n,n,n,n,se,n,n,n,s,n,n,n,se,n,se,n,n,ne,n,n,ne,n,ne,ne,n,ne,ne,se,ne,n,ne,ne,ne,ne,ne,n,sw,se,se,ne,ne,nw,se,s,se,ne,se,se,se,se,ne,se,ne,ne,sw,se,se,ne,se,se,se,se,se,n,se,se,s,se,se,n,se,nw,se,se,sw,se,se,nw,nw,nw,s,se,s,n,se,se,sw,nw,s,se,se,se,se,se,ne,s,se,se,s,s,s,se,ne,nw,s,nw,se,s,sw,s,s,s,sw,s,s,s,s,s,s,s,s,s,sw,nw,sw,s,se,s,nw,s,sw,ne,s,s,s,s,s,sw,s,s,sw,sw,s,s,s,s,ne,n,sw,sw,s,s,se,sw,s,s,sw,s,sw,s,sw,s,sw,sw,s,s,s,sw,s,sw,sw,sw,sw,sw,sw,sw,n,nw,sw,sw,sw,sw,s,sw,sw,ne,sw,sw,sw,sw,sw,sw,sw,sw,n,sw,sw,nw,s,sw,sw,sw,sw,sw,sw,sw,s,sw,sw,sw,sw,se,se,sw,sw,sw,sw,sw,nw,sw,nw,sw,n,sw,sw,nw,nw,nw,nw,se,sw,nw,se,sw,sw,n,sw,n,sw,sw,nw,ne,nw,nw,se,nw,nw,nw,se,nw,nw,nw,s,n,nw,sw,n,sw,sw,nw,ne,nw,nw,s,nw,sw,nw,nw,sw,nw,sw,nw,ne,nw,nw,se,se,nw,nw,ne,nw,se,nw,se,nw,nw,nw,nw,s,s,nw,nw,nw,ne,nw,nw,nw,nw,nw,nw,nw,nw,n,nw,nw,nw,nw,nw,nw,se,nw,nw,nw,nw,nw,nw,nw,nw,nw,ne,nw,nw,n,n,nw,n,nw,nw,nw,s,se,nw,n,n,sw,nw,n,nw,nw,nw,nw,s,n,ne,nw,nw,nw,nw,n,ne,se,nw,nw,nw,n,s,n,n,nw,n,nw,n,nw,s,nw,nw,ne,s,nw,n,n,nw,s,nw,n,sw,nw,ne,n,nw,nw,nw,n,n,n,nw,n,nw,sw,n,n,n,n,se,ne,n,se,s,n,se,ne,n,nw,nw,s,nw,n,n,n,sw,n,nw,sw,n,n,n,nw,sw,n,n,sw,n,sw,n,sw,n,se,n,n,n,n,n,n,n,nw,n,n,n,n,ne,sw,n,s,n,n,n,n,se,nw,n,n,n,se,n,n,n,sw,n,n,se,n,ne,n,ne,ne,n,n,n,n,n,n,n,ne,n,ne,n,se,n,n,n,se,ne,n,n,n,s,s,n,n,n,s,se,n,n,n,n,n,n,se,n,ne,n,ne,ne,n,n,n,ne,n,n,n,n,ne,n,ne,n,n,sw,ne,sw,ne,n,n,n,ne,se,ne,sw,n,ne,ne,ne,n,ne,n,se,n,n,n,n,n,sw,nw,ne,ne,sw,n,se,n,n,ne,se,ne,ne,ne,s,ne,ne,n,ne,ne,ne,n,n,nw,ne,n,n,ne,ne,n,s,ne,ne,ne,ne,n,ne,ne,ne,n,ne,ne,sw,ne,n,ne,nw,se,ne,ne,ne,n,s,ne,ne,ne,ne,ne,n,ne,ne,ne,ne,ne,sw,ne,ne,s,n,ne,s,ne,n,ne,ne,ne,ne,ne,ne,se,se,ne,ne,ne,ne,n,n,ne,ne,ne,ne,ne,ne,ne,ne,nw,se,ne,ne,nw,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,se,n,ne,ne,ne,se,se,ne,ne,n,s,ne,ne,ne,ne,s,s,s,ne,ne,ne,se,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,sw,ne,s,ne,nw,ne,nw,ne,ne,nw,se,ne,s,ne,ne,ne,ne,ne,ne,ne,ne,ne,ne,nw,ne,nw,se,sw,ne,se,ne,ne,se,se,ne,ne,se,ne,sw,ne,ne,ne,se,ne,se,ne,ne,ne,s,s,ne,ne,se,se,ne,s,ne,se,ne,ne,ne,se,ne,ne,se,s,ne,se,ne,se,nw,ne,se,ne,s,s,ne,se,se,sw,se,ne,s,se,ne,ne,ne,ne,ne,n,se,se,se,ne,se,se,ne,n,nw,se,se,n,sw,ne,ne,ne,ne,s,ne,ne,sw,n,ne,ne,se,n,ne,se,se,ne,se,nw,ne,sw,se,s,ne,se,nw,se,ne,ne,ne,se,se,se,ne,ne,ne,se,ne,ne,sw,sw,nw,se,se,nw,n,ne,ne,ne,se,se,se,nw,se,nw,ne,se,nw,nw,se,se,n,se,se,se,se,se,nw,ne,se,se,se,s,se,se,se,se,se,s,se,se,se,nw,nw,ne,ne,n,ne,ne,se,se,se,se,se,sw,n,se,n,se,ne,se,se,se,se,ne,ne,se,se,ne,ne,nw,n,se,ne,se,se,se,se,se,se,se,se,sw,se,ne,ne,se,se,se,se,se,se,se,nw,se,se,se,ne,se,se,ne,se,se,se,se,se,se,sw,se,se,s,ne,se,nw,nw,se,se,se,se,nw,se,se,ne,se,se,se,nw,se,nw,se,se,se,se,se,se,se,se,se,se,se,nw,sw,sw,nw,se,se,se,se,s,se,nw,nw,s,se,se,n,sw,se,se,n,se,se,se,se,n,se,se,se,s,se,n,se,s,se,n,s,n,sw,nw,se,se,se,se,se,se,se,n,se,ne,se,se,sw,se,se,n,se,s,n,se,se,se,se,se,se,se,se,s,se,se,sw,s,se,se,se,nw,se,se,s,s,se,s,se,se,se,se,se,nw,se,sw,sw,n,se,s,se,se,se,se,n,se,ne,se,se,se,sw,s,se,s,se,se,s,se,se,se,s,se,se,s,s,se,n,s,se,nw,se,se,s,s,se,se,se,se,s,se,se,se,se,s,se,ne,s,sw,s,se,se,s,s,nw,s,se,se,sw,se,n,n,s,se,se,se,s,sw,se,se,s,s,s,s,se,n,se,s,s,s,se,s,nw,s,s,se,s,se,s,s,sw,se,se,s,ne,se,se,s,se,s,sw,s,s,s,s,se,se,s,n,n,se,s,se,se,n,ne,s,s,s,s,s,s,se,n,s,s,se,nw,ne,s,se,nw,se,se,s,s,se,s,se,sw,s,se,se,s,se,s,s,s,n,s,se,n,se,n,s,s,se,sw,se,s,s,s,s,ne,s,se,sw,s,s,s,se,s,ne,s,s,sw,se,s,se,se,s,n,s,s,s,s,sw,s,s,s,ne,s,se,sw,se,s,s,ne,s,se,s,se,se,nw,s,s,s,s,s,se,s,s,s,ne,s,ne,s,s,s,s,s,s,s,s,s,s,s,ne,s,nw,s,s,s,s,n,s,s,s,ne,sw,s,s,s,s,s,s,s,ne,s,s,s,nw,s,s,se,s,s,se,sw,s,s,s,n,s,s,s,s,s,s,s,s,s,s,nw,s,s,s,s,s,s,nw,s,s,s,s,s,se,nw,s,n,s,s,s,s,s,s,s,s,nw,se,s,s,s,s,s,s,s,s,s,s,s,s,s,se,n,s,s,n,sw,sw,ne,s,sw,nw,s,s,s,sw,s,s,s,s,s,ne,sw,s,s,s,s,s,s,s,sw,s,s,ne,s,s,s,s,s,s,nw,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,s,sw,sw,se,s,sw,s,s,nw,s,sw,s,sw,s,s,nw,n,sw,s,s,sw,se,s,s,s,s,se,sw,s,nw,s,ne,s,n,s,s,se,sw,sw,s,s,sw,s,s,s,se,s,s,s,ne,ne,sw,s,sw,s,s,s,s,s,s,sw,s,s,s,s,s,s,s,sw,sw,s,s,s,s,s,s,sw,s,s,s,se,sw,s,s,nw,s,s,sw,s,s,sw,ne,s,sw,sw,nw,s,s,s,sw,s,s,ne,sw,s,s,s,s,s,s,s,sw,s,s,sw,s,sw,s,s,sw,sw,sw,s,s,se,ne,se,s,s,ne,sw,s,sw,sw,s,sw,se,se,sw,s,s,s,sw,s,s,n,s,n,sw,sw,sw,s,n,se,sw,s,s,s,s,ne,s,sw,s,sw,n,s,s,s,s,s,s,s,s,s,s,s,s,s,sw,n,sw,s,ne,s,sw,sw,s,sw,s,s,sw,s,s,s,s,se,s,sw,s,s,sw,s,n,s,sw,s,s,sw,s,s,s,sw,sw,sw,s,nw,s,sw,sw,sw,s,s,s,sw,sw,sw,nw,sw,nw,nw,sw,sw,sw,nw,sw,sw,sw,s,s,sw,s,sw,s,s,sw,s,sw,sw,nw,sw,sw,ne,nw,nw,s,n,sw,n,s,s,s,sw,sw,sw,s,sw,sw,sw,sw,s,nw,sw,sw,s,sw,sw,nw,ne,sw,nw,sw,sw,sw,sw,sw,s,s,sw,sw,n,sw,n,sw,sw,sw,sw,se,sw,sw,sw,s,s,ne,sw,sw,nw,sw,s,se,sw,s,sw,sw,sw,se,sw,sw,s,sw,sw,sw,s,sw,sw,sw,nw,sw,sw,sw,sw,sw,sw,sw,nw,s,sw,sw,n,sw,s,s,sw,n,nw,sw,n,sw,sw,sw,n,s,sw,sw,sw,s,sw,sw,sw,s,s,sw,sw,sw,s,s,sw,sw,sw,sw,se,sw,sw,nw,sw,se,sw,sw,n,n,sw,s,sw,sw,sw,s,sw,sw,sw,sw,s,sw,sw,sw,ne,sw,sw,nw,nw,sw,sw,n,sw,sw,sw,sw,s,sw,sw,n,sw,sw,s,nw,sw,sw,sw,s,sw,sw,sw,sw,n,sw,sw,s,sw,sw,sw,sw,sw,sw,s,sw,sw,sw,ne,s,sw,sw,n,sw,sw,sw,sw,nw,sw,sw,sw,sw,sw,n,sw,nw,s,sw,sw,sw,sw,sw,ne,ne,sw,sw,sw,sw,sw,sw,sw,sw,ne,sw,sw,sw,sw,sw,s,nw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,s,sw,ne,se,sw,n,sw,s,sw,ne,sw,s,sw,s,sw,nw,nw,sw,n,se,ne,sw,sw,sw,sw,sw,sw,n,sw,sw,sw,sw,sw,s,nw,sw,sw,nw,sw,sw,sw,se,sw,n,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,sw,s,sw,sw,s,sw,ne,ne,sw,sw,se,sw,nw,sw,nw,n,sw,sw,sw,s,sw,sw,sw,sw,sw,sw,sw,sw,n,s,sw,ne,sw,ne,sw,se,n,nw,nw,sw,sw,sw,sw,sw,s,ne,sw,se,sw,sw,sw,sw,sw,sw,ne,nw,se,sw,sw,sw,sw,sw,nw,nw,ne,nw,nw,s,sw,nw,sw,sw,ne,sw,ne,sw,nw,se,nw,n,sw,nw,sw,sw,sw,sw,sw,sw,nw,sw,nw,sw,sw,sw,se,sw,s,sw,sw,sw,sw,sw,sw,sw,sw,se,s,nw,nw,nw,s,n,sw,sw,sw,nw,sw,n,sw,n,s,nw,s,sw,sw,sw,sw,sw,sw,sw,sw,nw,sw,sw,sw,sw,sw,nw,sw,sw,sw,sw,sw,sw,nw,nw,sw,se,se,s,ne,sw,nw,sw,sw,nw,sw,sw,sw,ne,nw,sw,nw,sw,sw,sw,nw,sw,nw,sw,n,nw,ne,sw,sw,nw,sw,sw,sw,s,sw,nw,nw,nw,nw,nw,se,sw,sw,se,nw,se,nw,nw,n,sw,sw,sw,sw,nw,sw,nw,s,nw,sw,sw,nw,se,s,nw,sw,nw,nw,s,sw,sw,n,se,nw,sw,sw,nw,sw,sw,sw,sw,nw,nw,sw,sw,sw,sw,nw,nw,sw,sw,sw,sw,se,sw,nw,sw,sw,sw,nw,nw,se,sw,sw,nw,sw,ne,nw,sw,sw,sw,sw,sw,s,nw,sw,sw,nw,nw,sw,ne,nw,sw,sw,sw,sw,ne,s,nw,sw,sw,sw,nw,n,sw,nw,nw,nw,nw,nw,sw,sw,sw,ne,nw,sw,n,nw,sw,se,sw,sw,nw,nw,n,sw,nw,sw,nw,s,nw,sw,nw,nw,nw,n,nw,sw,s,nw,nw,s,nw,nw,sw,n,se,ne,n,sw,sw,sw,n,sw,sw,sw,s,nw,s,se,sw,sw,sw,ne,sw,sw,nw,sw,n,n,sw,n,nw,sw,s,ne,sw,sw,sw,sw,nw,sw,nw,sw,nw,sw,nw,nw,nw,sw,sw,nw,ne,sw,nw,s,nw,sw,sw,sw,sw,sw,nw,sw,sw,sw,nw,sw,nw,n,nw,sw,sw,nw,nw,nw,sw,sw,se,nw,ne,sw,sw,nw,nw,sw,sw,sw,s,s,sw,sw,ne,s,nw,ne,nw,se,nw,nw,nw,nw,se,sw,nw,sw,nw,nw,sw,sw,nw,sw,sw,sw,nw,sw,nw,nw,nw,sw,se,se,nw,nw,sw,nw,nw,nw,nw,s,sw,sw,nw,s,se,sw,nw,n,nw,sw,nw,se,sw,nw,nw,se,nw,nw,nw,nw,nw,sw,n,nw,ne,n,nw,sw,sw,sw,ne,ne,sw,nw,sw,nw,nw,nw,sw,nw,se,sw,nw,sw,nw,sw,nw,sw,nw,s,nw,se,nw,nw,nw,nw,nw,nw,n,nw,nw,sw,s,se,ne,n,sw,se,s,sw,nw,nw,se,nw,nw,sw,nw,nw,sw,sw,se,nw,sw,n,sw,sw,nw,nw,nw,nw,nw,nw,nw,sw,nw,nw,sw,nw,nw,nw,ne,nw,sw,se,sw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,s,nw,nw,nw,nw,nw,nw,nw,sw,sw,nw,nw,nw,nw,nw,nw,nw,sw,sw,n,nw,sw,nw,nw,nw,nw,nw,nw,sw,nw,nw,ne,nw,s,nw,sw,nw,nw,nw,ne,nw,sw,sw,nw,se,nw,sw,nw,nw,nw,nw,n,nw,nw,sw,nw,nw,nw,nw,sw,nw,nw,nw,nw,nw,n,nw,nw,n,s,nw,nw,nw,sw,nw,nw,se,nw,nw,nw,nw,nw,nw,nw,nw,sw,nw,nw,nw,nw,nw,nw,nw,nw,sw,n,nw,nw,nw,nw,nw,nw,nw,nw,s,nw,nw,sw,nw,nw,nw,nw,nw,s,nw,s,nw,sw,nw,sw,sw,sw,sw,se,nw,s,sw,nw,nw,se,s,nw,sw,sw,nw,nw,nw,nw,nw,nw,nw,nw,nw,ne,se,n,nw,nw,nw,nw,nw,nw,nw,nw,s,se,ne,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,nw,se,nw,se,nw,sw,nw,nw,nw,ne,nw,nw,nw,nw,nw
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day11-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day11-common-header>>

(define (move-forward orig-moves)
  (let loop ((pos (cons 0 0))
             (moves (list-copy orig-moves)))
    (if (null? moves)
        (cons pos orig-moves)
        (let ((move (car moves)))
          (ecase move ;;              x               y
                 ((nw) (loop (cons (- (car pos) 1) (+ (cdr pos) 1)) (cdr moves)))          ; w -> x-1
                 ((n)  (loop (cons    (car pos)    (+ (cdr pos) 2)) (cdr moves)))          ; n -> y+2
                 ((ne) (loop (cons (+ (car pos) 1) (+ (cdr pos) 1)) (cdr moves)))          ; e -> x+1
                 ((se) (loop (cons (+ (car pos) 1) (- (cdr pos) 1)) (cdr moves)))
                 ((s)  (loop (cons    (car pos)    (- (cdr pos) 2)) (cdr moves)))          ; s -> y-2
                 ((sw) (loop (cons (- (car pos) 1) (- (cdr pos) 1)) (cdr moves))))))))

(define (move-back start-pos)
  (let loop ((pos start-pos)
             (moves '()))
    (cond ((zero? (car pos))           (cons (+ (quotient (abs (cdr pos)) 2) (length moves))
                                             (if (zero? (cdr pos)) (reverse moves) (reverse (cons 'vertical moves)))))
          ((and (positive? (car pos))
                (positive? (cdr pos))) (loop (cons (- (car pos) 1) (- (cdr pos) 1)) (cons 'sw moves)))
          ((and (negative? (car pos))
                (positive? (cdr pos))) (loop (cons (+ (car pos) 1) (- (cdr pos) 1)) (cons 'se moves)))
          ((and (positive? (car pos))
                (negative? (cdr pos))) (loop (cons (- (car pos) 1) (+ (cdr pos) 1)) (cons 'nw moves)))
          ((and (negative? (car pos))
                (negative? (cdr pos))) (loop (cons (+ (car pos) 1) (+ (cdr pos) 1)) (cons 'ne moves)))
          ((zero? (cdr pos))           (cons (+ (abs (car pos)) (length moves))
                                             (if (zero? (car pos)) (reverse moves) (reverse (cons 'horizontal moves)))))
          (else (error "Got stuck" start-pos pos moves)))))

(define (process-infile infile)
  (let ((lines (split-lines (load-txt infile))))
    (map
     (lambda (line)
       (let ((fw-pos-moves (move-forward (map string->symbol (split-words-by-comma line)))))
         (let ((bw-pos-moves (move-back (car fw-pos-moves))))
           (format #f "~%fw-pos: ~a; bw-count: ~a" (car fw-pos-moves) (car bw-pos-moves)))))
     lines)))

<<src-day11-common-main>>
#+END_SRC

Info, given in puzzle:

- ne,ne,ne is 3 steps away.
- ne,ne,sw,sw is 0 steps away (back where you started).
- ne,ne,s,s is 2 steps away (se,se).
- se,sw,se,sw,sw is 3 steps away (s,s,sw)

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day11-part1

tangled/day11-part1.scm: tangled/day11-part1-exercise.txt -> (
fw-pos: (3 . 3); bw-count: 3
fw-pos: (0 . 0); bw-count: 0
fw-pos: (2 . -2); bw-count: 2
fw-pos: (-1 . -5); bw-count: 3)

tangled/day11-part1.scm: tangled/day11-puzzle.txt -> (
fw-pos: (687 . -267); bw-count: 687)
#+END_EXAMPLE

*** Day 11, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day11-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day11-common-header>>

(define (move-back start-pos)
  (let loop ((pos start-pos)
             (moves '()))
    (cond ((zero? (car pos))           (cons (+ (quotient (abs (cdr pos)) 2) (length moves))
                                             (if (zero? (cdr pos)) (reverse moves) (reverse (cons 'vertical moves)))))
          ((and (positive? (car pos))
                (positive? (cdr pos))) (loop (cons (- (car pos) 1) (- (cdr pos) 1)) (cons 'sw moves)))
          ((and (negative? (car pos))
                (positive? (cdr pos))) (loop (cons (+ (car pos) 1) (- (cdr pos) 1)) (cons 'se moves)))
          ((and (positive? (car pos))
                (negative? (cdr pos))) (loop (cons (- (car pos) 1) (+ (cdr pos) 1)) (cons 'nw moves)))
          ((and (negative? (car pos))
                (negative? (cdr pos))) (loop (cons (+ (car pos) 1) (+ (cdr pos) 1)) (cons 'ne moves)))
          ((zero? (cdr pos))           (cons (+ (abs (car pos)) (length moves))
                                             (if (zero? (car pos)) (reverse moves) (reverse (cons 'horizontal moves)))))
          (else (error "Got stuck" start-pos pos moves)))))

(define (move-forward orig-moves)
  (let loop ((pos (cons 0 0))
             (moves (list-copy orig-moves))
             (max-dist 0))
    (if (null? moves)
        (cons max-dist orig-moves)
        (let ((move (car moves)))

          (let* ((bw-pos-moves (move-back pos))
                 (curr-dist (car bw-pos-moves)))
            (when (> curr-dist max-dist)
              (set! max-dist curr-dist)))

          (ecase move ;;              x               y
                 ((nw) (loop (cons (- (car pos) 1) (+ (cdr pos) 1)) (cdr moves) max-dist))          ; w -> x-1
                 ((n)  (loop (cons    (car pos)    (+ (cdr pos) 2)) (cdr moves) max-dist))          ; n -> y+2
                 ((ne) (loop (cons (+ (car pos) 1) (+ (cdr pos) 1)) (cdr moves) max-dist))          ; e -> x+1
                 ((se) (loop (cons (+ (car pos) 1) (- (cdr pos) 1)) (cdr moves) max-dist))
                 ((s)  (loop (cons    (car pos)    (- (cdr pos) 2)) (cdr moves) max-dist))          ; s -> y-2
                 ((sw) (loop (cons (- (car pos) 1) (- (cdr pos) 1)) (cdr moves) max-dist)))))))

(define (process-infile infile)
  (let* ((lines (split-lines (load-txt infile))))
    (map
     (lambda (line)
       (let ((fw-pos-moves (move-forward (map string->symbol (split-words-by-comma line)))))
         (format #f "~%fw-max-dist: ~a" (car fw-pos-moves))))
     lines)))

<<src-day11-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day11-part2

tangled/day11-part2.scm: tangled/day11-part1-exercise.txt -> (
fw-max-dist: 2
fw-max-dist: 2
fw-max-dist: 2
fw-max-dist: 2)

tangled/day11-part2.scm: tangled/day11-puzzle.txt -> (
fw-max-dist: 1483)
#+END_EXAMPLE

** Day 12

*** Source, common parts

#+name: src-day12-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>

(define (split-words-space-or-comma line)
  (split-words-by line #[\s,]))
;; (string-split "2 <-> 0, 3, 4" #[\s,]) ; -> ("2" "<->" "0" "3" "4")

(define (parse-line line)
  (match (split-words-space-or-comma line)
    ((n1 <=> n2 ...) (list (string->number n1) (map string->number n2)))))
;; (parse-line "0 <-> 2")
;; (parse-line "2 <-> 0, 3, 4")

(define (collect-group prog-id progs)

  (define (rel-notes prog-id)
    ;; We need the car of the assoc-match or '() if no match, that's why we need the '(()) default:
    (car (assoc-ref progs prog-id '(()))))

  (define (collect-helper prog-rel-notes :optional (seen '()))

    (let* ((not-seen (map
                      (lambda (rprns)
                        (filter
                         (lambda (rprn)
                           (not (member rprn seen)))
                         rprns))
                      (map rel-notes prog-rel-notes))))
      (concatenate (map
                    (lambda (nsprns)
                      (if (null? nsprns)
                          seen
                          (collect-helper nsprns (append nsprns seen))))
                    not-seen))))

  (set->list (list->set eqv-comparator (cons prog-id (collect-helper (rel-notes prog-id))))))
#+end_src

#+name: src-day12-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (infile) (format #t "~a: ~a -> ~a~%"
                            (car args) infile (process-infile infile)))
   (cdr args))
  0)
#+end_src

*** Day 12, Part 1

**** Data

#+begin_src txt :tangle tangled/day12-part1-exercise.txt
0 <-> 2
1 <-> 1
2 <-> 0, 3, 4
3 <-> 2, 4
4 <-> 2, 3, 6
5 <-> 6
6 <-> 4, 5
#+end_src

#+begin_src txt :tangle tangled/day12-puzzle.txt
0 <-> 1543
1 <-> 66, 1682
2 <-> 1525
3 <-> 958
4 <-> 593, 1542
5 <-> 484
6 <-> 297
7 <-> 372, 743, 1965
8 <-> 934
9 <-> 1224, 1489
10 <-> 10, 129, 147, 1394
11 <-> 1244
12 <-> 12, 994, 1954
13 <-> 1027
14 <-> 875, 1211
15 <-> 405
16 <-> 1437, 1476
17 <-> 996
18 <-> 216, 777
19 <-> 404, 1524, 1539, 1941
20 <-> 1365
21 <-> 21, 460, 1431, 1624
22 <-> 313, 530
23 <-> 942, 1125
24 <-> 180, 338
25 <-> 771, 1547, 1561
26 <-> 463, 1012, 1276, 1760
27 <-> 738
28 <-> 311, 1023, 1461, 1739, 1853, 1900
29 <-> 1075
30 <-> 355, 467, 1605
31 <-> 1137, 1740
32 <-> 1125, 1756
33 <-> 658, 1149, 1790
34 <-> 344, 899
35 <-> 337, 716, 1416, 1780
36 <-> 1641
37 <-> 812
38 <-> 86, 1195
39 <-> 1967
40 <-> 1125, 1550
41 <-> 1881
42 <-> 151
43 <-> 222
44 <-> 73, 1075
45 <-> 1865
46 <-> 634, 837, 1143
47 <-> 647
48 <-> 695, 901
49 <-> 49
50 <-> 1598, 1619
51 <-> 125, 550, 1161
52 <-> 241, 387, 1951
53 <-> 286, 1414
54 <-> 1231, 1926
55 <-> 437, 1292, 1919
56 <-> 1108, 1597
57 <-> 1073, 1205, 1565
58 <-> 555
59 <-> 59, 1410
60 <-> 1735
61 <-> 61
62 <-> 149, 525, 1341
63 <-> 356, 1251
64 <-> 146, 1187
65 <-> 1582
66 <-> 1
67 <-> 126, 303, 1942
68 <-> 1135, 1742
69 <-> 1904
70 <-> 70, 371
71 <-> 513
72 <-> 1877
73 <-> 44
74 <-> 1617
75 <-> 1495
76 <-> 326, 867
77 <-> 420, 961, 1425
78 <-> 1517
79 <-> 1233
80 <-> 415, 1075, 1354
81 <-> 958, 1089
82 <-> 1677
83 <-> 403
84 <-> 85, 1877
85 <-> 84, 260
86 <-> 38, 191, 442
87 <-> 969, 1993
88 <-> 610, 1507
89 <-> 151, 758, 1081, 1521, 1596
90 <-> 474, 1958
91 <-> 950, 1554, 1949
92 <-> 117, 169
93 <-> 1899
94 <-> 819
95 <-> 1886
96 <-> 360, 1626
97 <-> 916, 1146
98 <-> 675, 1502, 1566
99 <-> 384
100 <-> 1905
101 <-> 403, 1387, 1717
102 <-> 196, 1281
103 <-> 947
104 <-> 104
105 <-> 975
106 <-> 303, 546, 750
107 <-> 380, 1929
108 <-> 108
109 <-> 999, 1059
110 <-> 1617
111 <-> 340
112 <-> 112
113 <-> 1063, 1281, 1758
114 <-> 114
115 <-> 631, 1067, 1904
116 <-> 1036
117 <-> 92, 318
118 <-> 1269
119 <-> 898
120 <-> 1052
121 <-> 121
122 <-> 1046
123 <-> 1127
124 <-> 717, 1018
125 <-> 51, 535, 639, 709
126 <-> 67, 557, 1060, 1098, 1640
127 <-> 1286
128 <-> 128
129 <-> 10, 1467
130 <-> 492, 1961
131 <-> 1103, 1433
132 <-> 1191
133 <-> 309, 1049
134 <-> 1361, 1390
135 <-> 683, 1575
136 <-> 702, 1188
137 <-> 290, 302, 1527
138 <-> 656, 975, 1279
139 <-> 882, 1537, 1542, 1930
140 <-> 1200
141 <-> 562, 680, 1865
142 <-> 1233
143 <-> 653, 1076
144 <-> 1334
145 <-> 145, 1797
146 <-> 64
147 <-> 10, 863, 1090
148 <-> 1138
149 <-> 62, 463
150 <-> 1223, 1228, 1239
151 <-> 42, 89, 404, 694
152 <-> 1389, 1672
153 <-> 1596
154 <-> 1193
155 <-> 980
156 <-> 164
157 <-> 157, 1270
158 <-> 272, 1461
159 <-> 777, 1153
160 <-> 595, 1209
161 <-> 365, 686
162 <-> 516, 987
163 <-> 546, 1004, 1056
164 <-> 156, 164
165 <-> 165, 1696
166 <-> 310, 370, 397
167 <-> 1446
168 <-> 1900
169 <-> 92, 1680
170 <-> 240, 619, 1088, 1509
171 <-> 186, 1610
172 <-> 1622, 1698
173 <-> 447, 542, 912
174 <-> 669, 1687
175 <-> 689
176 <-> 176, 1816
177 <-> 518, 1422, 1493
178 <-> 479, 731, 1615, 1718
179 <-> 483
180 <-> 24, 180
181 <-> 329, 1941
182 <-> 405, 1175, 1685
183 <-> 291, 466, 558, 891
184 <-> 527
185 <-> 185, 868, 1136
186 <-> 171, 867
187 <-> 1622, 1634
188 <-> 211
189 <-> 797
190 <-> 1307, 1504
191 <-> 86, 996
192 <-> 1810
193 <-> 315
194 <-> 194, 1198
195 <-> 1401, 1581, 1904
196 <-> 102
197 <-> 539
198 <-> 1996
199 <-> 1601
200 <-> 1617, 1776
201 <-> 294, 390
202 <-> 839, 986
203 <-> 1683
204 <-> 546
205 <-> 1673, 1894
206 <-> 1825
207 <-> 207, 222
208 <-> 210, 1679
209 <-> 384, 421, 1249
210 <-> 208, 210, 1721
211 <-> 188, 211, 388, 394, 440, 1205
212 <-> 834, 1857
213 <-> 1102
214 <-> 1803
215 <-> 1033, 1831
216 <-> 18, 1039
217 <-> 1168, 1983
218 <-> 1273, 1944
219 <-> 845, 1271
220 <-> 321, 640
221 <-> 629
222 <-> 43, 207, 285, 1486, 1508
223 <-> 809, 1371
224 <-> 480
225 <-> 904, 1190, 1378
226 <-> 226
227 <-> 1044, 1294
228 <-> 793, 911
229 <-> 1450, 1940
230 <-> 822
231 <-> 321, 352
232 <-> 232
233 <-> 491, 543
234 <-> 1880
235 <-> 861, 1349
236 <-> 1738, 1977
237 <-> 590, 1246, 1805
238 <-> 238, 665
239 <-> 577, 818, 877
240 <-> 170
241 <-> 52, 241, 946, 1439, 1441
242 <-> 262, 1226, 1647, 1661
243 <-> 316, 1117, 1831
244 <-> 345
245 <-> 527, 1392, 1526
246 <-> 1335
247 <-> 1754, 1842, 1905
248 <-> 1572
249 <-> 1066, 1185, 1593
250 <-> 934, 1775, 1821
251 <-> 726, 749
252 <-> 252
253 <-> 253
254 <-> 1765
255 <-> 753, 1337
256 <-> 411, 1190
257 <-> 1664, 1731
258 <-> 846
259 <-> 450, 1062, 1975
260 <-> 85, 1097, 1620
261 <-> 662, 1667
262 <-> 242, 1285, 1641
263 <-> 263
264 <-> 1481
265 <-> 470, 1671
266 <-> 971
267 <-> 1002, 1893
268 <-> 393, 1435
269 <-> 413, 806, 1287, 1525
270 <-> 1182
271 <-> 1377
272 <-> 158, 867
273 <-> 273, 499, 568, 845, 1293
274 <-> 800
275 <-> 936
276 <-> 925
277 <-> 1295
278 <-> 1085, 1140
279 <-> 873, 883, 989
280 <-> 280
281 <-> 1211
282 <-> 445, 674, 1234
283 <-> 771
284 <-> 1874
285 <-> 222, 647, 1092
286 <-> 53, 1191, 1678
287 <-> 595, 1928
288 <-> 947
289 <-> 822, 1836, 1962
290 <-> 137, 1034, 1735
291 <-> 183
292 <-> 331, 1038
293 <-> 1025
294 <-> 201, 630, 1421
295 <-> 1083, 1366
296 <-> 701, 1187, 1618
297 <-> 6, 990
298 <-> 1093
299 <-> 299
300 <-> 846, 1990
301 <-> 1306
302 <-> 137, 1011
303 <-> 67, 106, 1779
304 <-> 1202
305 <-> 439
306 <-> 622, 1858
307 <-> 1379
308 <-> 688, 1631, 1700
309 <-> 133
310 <-> 166, 362
311 <-> 28, 933
312 <-> 881
313 <-> 22, 549, 678, 1145
314 <-> 1439
315 <-> 193, 650, 1572
316 <-> 243
317 <-> 317, 990, 1638
318 <-> 117, 499
319 <-> 1300, 1309, 1614
320 <-> 633, 1693
321 <-> 220, 231
322 <-> 977, 1722
323 <-> 730, 1372, 1996
324 <-> 755, 1184
325 <-> 1155, 1857
326 <-> 76
327 <-> 1072, 1814, 1985
328 <-> 1125, 1279
329 <-> 181
330 <-> 936, 1241
331 <-> 292, 1172
332 <-> 1859, 1882
333 <-> 940
334 <-> 468
335 <-> 697, 802
336 <-> 437
337 <-> 35, 737
338 <-> 24, 1540
339 <-> 493
340 <-> 111, 422, 525
341 <-> 1790
342 <-> 496, 1007
343 <-> 343, 1264
344 <-> 34, 344
345 <-> 244, 709
346 <-> 553, 1616
347 <-> 909
348 <-> 521, 1660
349 <-> 363, 1294
350 <-> 719, 1782, 1974
351 <-> 405, 915
352 <-> 231, 1694
353 <-> 1140
354 <-> 363, 1339
355 <-> 30
356 <-> 63, 771, 1110
357 <-> 1299, 1347
358 <-> 635
359 <-> 1541
360 <-> 96, 360, 1741
361 <-> 361
362 <-> 310
363 <-> 349, 354
364 <-> 1827
365 <-> 161, 1734
366 <-> 900
367 <-> 1139, 1545
368 <-> 535
369 <-> 1622
370 <-> 166, 1463
371 <-> 70
372 <-> 7, 452, 810, 1283
373 <-> 997, 1658
374 <-> 467, 1774
375 <-> 716, 1841
376 <-> 638, 1079, 1262
377 <-> 606
378 <-> 993
379 <-> 379, 791
380 <-> 107
381 <-> 475, 1510
382 <-> 780
383 <-> 383
384 <-> 99, 209, 1590
385 <-> 1388
386 <-> 1829
387 <-> 52, 1532, 1874
388 <-> 211, 576, 1281
389 <-> 1309
390 <-> 201, 1183
391 <-> 959, 1944
392 <-> 688, 1062, 1299
393 <-> 268
394 <-> 211, 828, 1701
395 <-> 1587
396 <-> 1082
397 <-> 166
398 <-> 1454, 1508
399 <-> 1007
400 <-> 1531
401 <-> 511, 1140
402 <-> 652, 1065
403 <-> 83, 101, 1585
404 <-> 19, 151
405 <-> 15, 182, 351
406 <-> 769
407 <-> 1275, 1578, 1752
408 <-> 1173
409 <-> 409, 432
410 <-> 487, 1334
411 <-> 256
412 <-> 412, 590
413 <-> 269
414 <-> 1371
415 <-> 80, 1832
416 <-> 939, 1644
417 <-> 562, 1510
418 <-> 536
419 <-> 473
420 <-> 77, 1059, 1535, 1863
421 <-> 209
422 <-> 340, 913, 989
423 <-> 854, 951
424 <-> 512
425 <-> 1087
426 <-> 773
427 <-> 1121, 1574
428 <-> 745
429 <-> 1669
430 <-> 1018
431 <-> 1377
432 <-> 409
433 <-> 1641, 1999
434 <-> 1605
435 <-> 1412, 1500
436 <-> 879, 1704
437 <-> 55, 336, 548, 1839, 1987
438 <-> 980, 1399
439 <-> 305, 439, 627, 628, 884, 1241
440 <-> 211
441 <-> 677
442 <-> 86
443 <-> 1213
444 <-> 592, 845, 1282
445 <-> 282, 1366
446 <-> 710, 797, 1017, 1974
447 <-> 173, 447, 614
448 <-> 1187, 1511
449 <-> 598, 1000, 1257
450 <-> 259
451 <-> 451, 519
452 <-> 372
453 <-> 1549
454 <-> 940
455 <-> 926, 1543, 1706
456 <-> 682, 1253
457 <-> 1694, 1755
458 <-> 549
459 <-> 1192, 1456, 1613
460 <-> 21, 490
461 <-> 1920
462 <-> 788, 1254, 1695
463 <-> 26, 149
464 <-> 945
465 <-> 1654
466 <-> 183
467 <-> 30, 374
468 <-> 334, 468
469 <-> 1514
470 <-> 265
471 <-> 1190
472 <-> 1911
473 <-> 419, 1230, 1611, 1711
474 <-> 90, 1253
475 <-> 381, 825
476 <-> 476, 503
477 <-> 1337, 1362
478 <-> 1605
479 <-> 178
480 <-> 224, 1810, 1858
481 <-> 871, 1525
482 <-> 1137, 1457, 1553
483 <-> 179, 1336
484 <-> 5, 1788
485 <-> 1874
486 <-> 986, 1409
487 <-> 410
488 <-> 1911
489 <-> 885, 1867
490 <-> 460
491 <-> 233, 1046, 1880
492 <-> 130, 492
493 <-> 339, 810, 1218
494 <-> 1275
495 <-> 1218, 1396
496 <-> 342, 1445
497 <-> 548
498 <-> 729, 1208, 1590
499 <-> 273, 318, 774
500 <-> 521, 673, 1035
501 <-> 504, 978
502 <-> 641
503 <-> 476, 615, 1230, 1374
504 <-> 501
505 <-> 505, 1336
506 <-> 1810
507 <-> 1396
508 <-> 603, 1067, 1794
509 <-> 1714
510 <-> 1441
511 <-> 401, 1497
512 <-> 424, 530
513 <-> 71, 513
514 <-> 822, 925, 1603
515 <-> 1575, 1856
516 <-> 162, 1116, 1634
517 <-> 936
518 <-> 177, 1418, 1862
519 <-> 451
520 <-> 1318, 1621
521 <-> 348, 500
522 <-> 569, 674
523 <-> 1438
524 <-> 1181, 1552
525 <-> 62, 340, 1968
526 <-> 981
527 <-> 184, 245, 527, 574, 1767
528 <-> 873
529 <-> 945, 1139
530 <-> 22, 512, 1957
531 <-> 531
532 <-> 921, 1071, 1087, 1989
533 <-> 1845
534 <-> 534, 1929
535 <-> 125, 368
536 <-> 418, 702
537 <-> 1442, 1545
538 <-> 552, 1167
539 <-> 197, 1643
540 <-> 1983
541 <-> 1574
542 <-> 173
543 <-> 233
544 <-> 1128
545 <-> 903, 989
546 <-> 106, 163, 204
547 <-> 1636, 1916
548 <-> 437, 497, 926
549 <-> 313, 458, 1793
550 <-> 51
551 <-> 1756
552 <-> 538, 1061
553 <-> 346, 1564
554 <-> 554
555 <-> 58, 792, 1221
556 <-> 1133, 1881
557 <-> 126, 1222
558 <-> 183
559 <-> 1927
560 <-> 797, 1008, 1048, 1328, 1984
561 <-> 1294, 1761
562 <-> 141, 417
563 <-> 676, 1763
564 <-> 675, 1220, 1503
565 <-> 565, 1360
566 <-> 1364
567 <-> 618, 1419
568 <-> 273, 1830
569 <-> 522, 1642
570 <-> 778
571 <-> 881, 1353
572 <-> 902, 1699
573 <-> 1679
574 <-> 527, 656
575 <-> 718, 1232
576 <-> 388
577 <-> 239
578 <-> 1312
579 <-> 1504, 1970
580 <-> 580
581 <-> 1548, 1893, 1986, 1993
582 <-> 1228, 1516, 1729
583 <-> 583, 677, 1178
584 <-> 1231
585 <-> 585
586 <-> 1109, 1646, 1681
587 <-> 1124, 1237
588 <-> 1004
589 <-> 1756
590 <-> 237, 412
591 <-> 591, 692, 1078
592 <-> 444
593 <-> 4, 944
594 <-> 1780, 1911
595 <-> 160, 287
596 <-> 969, 1256
597 <-> 830
598 <-> 449
599 <-> 1863
600 <-> 1928
601 <-> 1079
602 <-> 1514
603 <-> 508, 1869
604 <-> 848, 1234
605 <-> 605, 952, 1310
606 <-> 377, 638, 880
607 <-> 607, 853, 947, 1453
608 <-> 608, 812
609 <-> 1091, 1430
610 <-> 88
611 <-> 1661
612 <-> 675
613 <-> 1409, 1946
614 <-> 447, 1825, 1992
615 <-> 503
616 <-> 616
617 <-> 758, 1813
618 <-> 567, 618, 1068
619 <-> 170
620 <-> 1937
621 <-> 734, 1122
622 <-> 306
623 <-> 1340
624 <-> 1644
625 <-> 1926
626 <-> 1362, 1528
627 <-> 439
628 <-> 439
629 <-> 221, 1313
630 <-> 294, 1650
631 <-> 115, 1770, 1849
632 <-> 1958
633 <-> 320, 845, 1445
634 <-> 46, 1024
635 <-> 358, 1355, 1778
636 <-> 1000, 1120
637 <-> 798, 1009
638 <-> 376, 606, 1244, 1590
639 <-> 125, 849
640 <-> 220
641 <-> 502, 779, 1675
642 <-> 740, 1405, 1473, 1702
643 <-> 930, 1446
644 <-> 801, 1531, 1886
645 <-> 1062, 1171, 1595, 1973
646 <-> 1677, 1751
647 <-> 47, 285
648 <-> 1024, 1691
649 <-> 1743
650 <-> 315, 819, 876
651 <-> 1715, 1909
652 <-> 402, 1777
653 <-> 143
654 <-> 868, 1820
655 <-> 875
656 <-> 138, 574
657 <-> 725
658 <-> 33, 1038
659 <-> 997
660 <-> 1438, 1449
661 <-> 1359, 1736
662 <-> 261, 1541
663 <-> 896, 981, 1681
664 <-> 1538, 1639
665 <-> 238, 1105
666 <-> 1036, 1313
667 <-> 920, 1123
668 <-> 668, 1808
669 <-> 174
670 <-> 670
671 <-> 767, 1923
672 <-> 1549, 1564
673 <-> 500
674 <-> 282, 522, 1921, 1953
675 <-> 98, 564, 612, 1260
676 <-> 563, 1838
677 <-> 441, 583
678 <-> 313
679 <-> 679
680 <-> 141
681 <-> 1850
682 <-> 456
683 <-> 135, 1880
684 <-> 1315
685 <-> 1819, 1966
686 <-> 161, 786, 796, 1801
687 <-> 687, 1557
688 <-> 308, 392
689 <-> 175, 1899
690 <-> 952
691 <-> 691
692 <-> 591, 1457, 1662
693 <-> 693
694 <-> 151
695 <-> 48, 1436, 1539, 1702, 1903
696 <-> 696
697 <-> 335, 1130, 1812, 1823
698 <-> 1064
699 <-> 1269, 1807
700 <-> 755
701 <-> 296
702 <-> 136, 536, 702
703 <-> 834, 1333
704 <-> 1583, 1731
705 <-> 1322
706 <-> 991
707 <-> 1083
708 <-> 1382
709 <-> 125, 345, 948
710 <-> 446, 1207, 1770
711 <-> 1831
712 <-> 1663, 1935
713 <-> 1410
714 <-> 968
715 <-> 788
716 <-> 35, 375
717 <-> 124, 1265, 1495, 1639
718 <-> 575
719 <-> 350
720 <-> 811
721 <-> 1827
722 <-> 722, 1492, 1650
723 <-> 1967
724 <-> 1059, 1726
725 <-> 657, 725
726 <-> 251
727 <-> 1129
728 <-> 1459
729 <-> 498
730 <-> 323, 1617
731 <-> 178
732 <-> 1375
733 <-> 953, 1384
734 <-> 621, 1312, 1911, 1955
735 <-> 1100, 1117
736 <-> 1180
737 <-> 337
738 <-> 27, 738
739 <-> 888
740 <-> 642
741 <-> 1132, 1304, 1680
742 <-> 1615
743 <-> 7, 1766
744 <-> 744
745 <-> 428, 857, 969, 1179, 1180
746 <-> 751
747 <-> 1256
748 <-> 1528
749 <-> 251, 912, 1686
750 <-> 106
751 <-> 746, 751
752 <-> 1354, 1498, 1571
753 <-> 255
754 <-> 908, 1066, 1589
755 <-> 324, 700
756 <-> 1013
757 <-> 814
758 <-> 89, 617, 1602
759 <-> 1550
760 <-> 1047
761 <-> 970, 1129
762 <-> 1508
763 <-> 1329
764 <-> 765, 1415
765 <-> 764, 1908
766 <-> 1197, 1595
767 <-> 671
768 <-> 1457
769 <-> 406, 852
770 <-> 770, 1427
771 <-> 25, 283, 356
772 <-> 1606, 1823
773 <-> 426, 1836
774 <-> 499
775 <-> 1031, 1733
776 <-> 1035, 1567
777 <-> 18, 159
778 <-> 570, 1994
779 <-> 641
780 <-> 382, 1703, 1928
781 <-> 1647
782 <-> 1367
783 <-> 1454, 1609, 1785
784 <-> 1243, 1380
785 <-> 1236
786 <-> 686, 1050, 1413
787 <-> 1026, 1613
788 <-> 462, 715, 1855
789 <-> 789, 1021, 1186, 1573
790 <-> 1744
791 <-> 379
792 <-> 555, 1041, 1107
793 <-> 228, 1194
794 <-> 864, 1591, 1612
795 <-> 795, 1478
796 <-> 686, 1652
797 <-> 189, 446, 560
798 <-> 637, 1342
799 <-> 799, 1890
800 <-> 274, 800, 1578
801 <-> 644, 1618, 1732
802 <-> 335
803 <-> 803, 1497
804 <-> 804
805 <-> 805
806 <-> 269
807 <-> 817, 987
808 <-> 1445
809 <-> 223, 1489
810 <-> 372, 493, 1397
811 <-> 720, 1786
812 <-> 37, 608
813 <-> 1410
814 <-> 757, 928, 1201, 1305
815 <-> 1079, 1443
816 <-> 1563
817 <-> 807, 1614
818 <-> 239, 1135
819 <-> 94, 650
820 <-> 820, 1747
821 <-> 827
822 <-> 230, 289, 514
823 <-> 1397
824 <-> 899
825 <-> 475
826 <-> 1468, 1696
827 <-> 821, 1238
828 <-> 394, 1459
829 <-> 1372, 1448
830 <-> 597, 1112
831 <-> 831
832 <-> 832
833 <-> 833
834 <-> 212, 703, 1913
835 <-> 835
836 <-> 1904
837 <-> 46
838 <-> 1512
839 <-> 202, 1510, 1690
840 <-> 842
841 <-> 1430
842 <-> 840, 1397
843 <-> 955, 1303, 1500, 1845
844 <-> 1221
845 <-> 219, 273, 444, 633, 1434
846 <-> 258, 300
847 <-> 847
848 <-> 604, 1960
849 <-> 639, 1126, 1601
850 <-> 1027, 1818, 1899
851 <-> 1124, 1536
852 <-> 769, 852, 1551, 1727
853 <-> 607, 1885
854 <-> 423, 1544
855 <-> 1889
856 <-> 981, 1683
857 <-> 745
858 <-> 858, 1041
859 <-> 859, 1465
860 <-> 860, 1288
861 <-> 235, 1133
862 <-> 979, 1255, 1484
863 <-> 147
864 <-> 794
865 <-> 865, 902
866 <-> 1033, 1367
867 <-> 76, 186, 272, 1205
868 <-> 185, 654
869 <-> 895
870 <-> 1082
871 <-> 481, 1151
872 <-> 872
873 <-> 279, 528
874 <-> 1358, 1787
875 <-> 14, 655
876 <-> 650, 1227
877 <-> 239, 1674
878 <-> 878
879 <-> 436, 1786, 1844
880 <-> 606, 1181
881 <-> 312, 571
882 <-> 139
883 <-> 279, 1498, 1746
884 <-> 439
885 <-> 489
886 <-> 1592
887 <-> 919
888 <-> 739, 1958
889 <-> 1930
890 <-> 1026, 1326
891 <-> 183, 891
892 <-> 1984
893 <-> 1078
894 <-> 1178, 1329
895 <-> 869, 1863
896 <-> 663
897 <-> 1693
898 <-> 119, 1316
899 <-> 34, 824
900 <-> 366, 900
901 <-> 48, 1030
902 <-> 572, 865, 973
903 <-> 545
904 <-> 225, 1083
905 <-> 1172, 1274, 1507
906 <-> 1878
907 <-> 1372
908 <-> 754, 1485, 1923
909 <-> 347, 909
910 <-> 1335, 1621
911 <-> 228, 1077, 1736
912 <-> 173, 749
913 <-> 422, 1688
914 <-> 1232, 1615
915 <-> 351, 1889
916 <-> 97, 1593
917 <-> 1574
918 <-> 1254, 1829, 1940
919 <-> 887, 1284, 1392
920 <-> 667, 1480
921 <-> 532, 1296, 1712
922 <-> 922
923 <-> 1194
924 <-> 1931
925 <-> 276, 514
926 <-> 455, 548
927 <-> 1241
928 <-> 814
929 <-> 1276, 1645
930 <-> 643
931 <-> 1868
932 <-> 1823
933 <-> 311
934 <-> 8, 250, 1416, 1886
935 <-> 1927
936 <-> 275, 330, 517
937 <-> 1692, 1867
938 <-> 1050
939 <-> 416, 1430
940 <-> 333, 454, 1094, 1980
941 <-> 1698
942 <-> 23, 1642
943 <-> 1102
944 <-> 593, 1365, 1577
945 <-> 464, 529, 945
946 <-> 241, 1037
947 <-> 103, 288, 607, 1095
948 <-> 709, 1217
949 <-> 1960
950 <-> 91, 1862
951 <-> 423
952 <-> 605, 690
953 <-> 733, 1894
954 <-> 1113, 1978, 1988
955 <-> 843
956 <-> 956
957 <-> 1122
958 <-> 3, 81
959 <-> 391, 1383, 1711
960 <-> 1280, 1796
961 <-> 77
962 <-> 1509
963 <-> 963, 1788, 1897
964 <-> 1810
965 <-> 1147
966 <-> 1741
967 <-> 1979
968 <-> 714, 968
969 <-> 87, 596, 745, 1082
970 <-> 761, 1495
971 <-> 266, 971
972 <-> 972
973 <-> 902, 1398
974 <-> 1862
975 <-> 105, 138, 1118
976 <-> 1369
977 <-> 322, 1970
978 <-> 501, 1270
979 <-> 862, 1244
980 <-> 155, 438, 1072, 1176
981 <-> 526, 663, 856, 1355
982 <-> 1344
983 <-> 1947
984 <-> 1221
985 <-> 1042
986 <-> 202, 486, 1635
987 <-> 162, 807, 1267
988 <-> 988
989 <-> 279, 422, 545, 1128
990 <-> 297, 317, 1891
991 <-> 706, 1229, 1712
992 <-> 1269
993 <-> 378, 1441
994 <-> 12
995 <-> 1693
996 <-> 17, 191
997 <-> 373, 659, 1678
998 <-> 1278
999 <-> 109
1000 <-> 449, 636
1001 <-> 1922
1002 <-> 267
1003 <-> 1989
1004 <-> 163, 588
1005 <-> 1159, 1247, 1261
1006 <-> 1218
1007 <-> 342, 399, 1148
1008 <-> 560
1009 <-> 637, 1129
1010 <-> 1257
1011 <-> 302
1012 <-> 26, 1184, 1866, 1937
1013 <-> 756, 1150
1014 <-> 1014
1015 <-> 1281
1016 <-> 1720
1017 <-> 446
1018 <-> 124, 430
1019 <-> 1341
1020 <-> 1369, 1666
1021 <-> 789
1022 <-> 1022, 1102, 1675
1023 <-> 28, 1630
1024 <-> 634, 648
1025 <-> 293, 1263, 1317
1026 <-> 787, 890
1027 <-> 13, 850
1028 <-> 1334
1029 <-> 1029, 1147
1030 <-> 901
1031 <-> 775, 1674
1032 <-> 1720, 1757, 1764, 1892
1033 <-> 215, 866, 1189, 1930
1034 <-> 290, 1988
1035 <-> 500, 776
1036 <-> 116, 666, 1036, 1707
1037 <-> 946
1038 <-> 292, 658, 1932
1039 <-> 216
1040 <-> 1867
1041 <-> 792, 858
1042 <-> 985, 1969, 1998
1043 <-> 1069
1044 <-> 227
1045 <-> 1045, 1404
1046 <-> 122, 491, 1046
1047 <-> 760, 1309
1048 <-> 560, 1316, 1370
1049 <-> 133, 1936
1050 <-> 786, 938, 1050
1051 <-> 1371, 1533
1052 <-> 120, 1106, 1901
1053 <-> 1489, 1675
1054 <-> 1075, 1905
1055 <-> 1543
1056 <-> 163, 1056
1057 <-> 1525, 1635, 1870
1058 <-> 1545
1059 <-> 109, 420, 724, 1781
1060 <-> 126, 1308
1061 <-> 552, 1065, 1543, 1594
1062 <-> 259, 392, 645, 1414
1063 <-> 113, 1520, 1976
1064 <-> 698, 1254
1065 <-> 402, 1061, 1496
1066 <-> 249, 754, 1546
1067 <-> 115, 508
1068 <-> 618
1069 <-> 1043, 1240, 1461, 1632
1070 <-> 1266, 1904
1071 <-> 532, 1514
1072 <-> 327, 980, 1985
1073 <-> 57
1074 <-> 1833
1075 <-> 29, 44, 80, 1054
1076 <-> 143, 1778, 1940
1077 <-> 911
1078 <-> 591, 893, 1629
1079 <-> 376, 601, 815, 1840
1080 <-> 1144, 1295, 1330, 1765
1081 <-> 89
1082 <-> 396, 870, 969, 1498
1083 <-> 295, 707, 904
1084 <-> 1084
1085 <-> 278
1086 <-> 1659, 1661
1087 <-> 425, 532
1088 <-> 170
1089 <-> 81, 1089, 1219, 1913
1090 <-> 147, 1099
1091 <-> 609, 1579, 1779
1092 <-> 285
1093 <-> 298, 1520
1094 <-> 940
1095 <-> 947
1096 <-> 1096
1097 <-> 260
1098 <-> 126, 1682
1099 <-> 1090
1100 <-> 735
1101 <-> 1848
1102 <-> 213, 943, 1022
1103 <-> 131
1104 <-> 1783
1105 <-> 665
1106 <-> 1052, 1106
1107 <-> 792
1108 <-> 56
1109 <-> 586
1110 <-> 356, 1259
1111 <-> 1133
1112 <-> 830, 1820
1113 <-> 954
1114 <-> 1114, 1475
1115 <-> 1115
1116 <-> 516
1117 <-> 243, 735
1118 <-> 975, 1689
1119 <-> 1235, 1337, 1474, 1741, 1994
1120 <-> 636
1121 <-> 427
1122 <-> 621, 957
1123 <-> 667, 1123
1124 <-> 587, 851, 1250, 1953
1125 <-> 23, 32, 40, 328
1126 <-> 849, 1429, 1676
1127 <-> 123, 1998
1128 <-> 544, 989
1129 <-> 727, 761, 1009, 1691
1130 <-> 697
1131 <-> 1436, 1719
1132 <-> 741, 1278
1133 <-> 556, 861, 1111
1134 <-> 1795, 1956
1135 <-> 68, 818
1136 <-> 185
1137 <-> 31, 482, 1466
1138 <-> 148, 1953
1139 <-> 367, 529, 1154
1140 <-> 278, 353, 401, 1608
1141 <-> 1141
1142 <-> 1690, 1809
1143 <-> 46, 1495
1144 <-> 1080, 1580
1145 <-> 313, 1772
1146 <-> 97
1147 <-> 965, 1029, 1648
1148 <-> 1007
1149 <-> 33
1150 <-> 1013, 1417, 1864
1151 <-> 871, 1990
1152 <-> 1229, 1572
1153 <-> 159, 1228
1154 <-> 1139
1155 <-> 325, 1829
1156 <-> 1650
1157 <-> 1489
1158 <-> 1472
1159 <-> 1005
1160 <-> 1467
1161 <-> 51
1162 <-> 1254
1163 <-> 1331
1164 <-> 1895
1165 <-> 1165, 1214, 1345
1166 <-> 1254
1167 <-> 538
1168 <-> 217, 1223, 1818
1169 <-> 1169, 1514, 1761
1170 <-> 1948
1171 <-> 645
1172 <-> 331, 905
1173 <-> 408, 1535
1174 <-> 1203, 1238, 1472
1175 <-> 182, 1817
1176 <-> 980
1177 <-> 1307, 1463
1178 <-> 583, 894, 1800, 1971
1179 <-> 745, 1259
1180 <-> 736, 745
1181 <-> 524, 880
1182 <-> 270, 1216, 1878
1183 <-> 390
1184 <-> 324, 1012, 1356
1185 <-> 249
1186 <-> 789
1187 <-> 64, 296, 448, 1377, 1488
1188 <-> 136, 1320
1189 <-> 1033, 1823
1190 <-> 225, 256, 471
1191 <-> 132, 286, 1802
1192 <-> 459
1193 <-> 154, 1193
1194 <-> 793, 923, 1479
1195 <-> 38, 1766
1196 <-> 1196, 1470
1197 <-> 766
1198 <-> 194, 1252
1199 <-> 1199
1200 <-> 140, 1200
1201 <-> 814, 1802
1202 <-> 304, 1865
1203 <-> 1174
1204 <-> 1583
1205 <-> 57, 211, 867, 1331, 1784, 1819
1206 <-> 1286
1207 <-> 710
1208 <-> 498
1209 <-> 160, 1209
1210 <-> 1210, 1599
1211 <-> 14, 281, 1278
1212 <-> 1289, 1644
1213 <-> 443, 1714, 1863
1214 <-> 1165
1215 <-> 1215
1216 <-> 1182, 1436
1217 <-> 948, 1377
1218 <-> 493, 495, 1006
1219 <-> 1089
1220 <-> 564
1221 <-> 555, 844, 984
1222 <-> 557
1223 <-> 150, 1168
1224 <-> 9
1225 <-> 1323
1226 <-> 242
1227 <-> 876, 1314
1228 <-> 150, 582, 1153, 1918
1229 <-> 991, 1152
1230 <-> 473, 503, 1444, 1945
1231 <-> 54, 584, 1713
1232 <-> 575, 914, 1232
1233 <-> 79, 142, 1776
1234 <-> 282, 604
1235 <-> 1119
1236 <-> 785, 1236
1237 <-> 587, 1751
1238 <-> 827, 1174, 1417
1239 <-> 150, 1597, 1852
1240 <-> 1069, 1769
1241 <-> 330, 439, 927
1242 <-> 1242
1243 <-> 784, 1541
1244 <-> 11, 638, 979
1245 <-> 1245
1246 <-> 237, 1330
1247 <-> 1005, 1598
1248 <-> 1573
1249 <-> 209, 1522
1250 <-> 1124
1251 <-> 63
1252 <-> 1198
1253 <-> 456, 474
1254 <-> 462, 918, 1064, 1162, 1166
1255 <-> 862
1256 <-> 596, 747
1257 <-> 449, 1010, 1568, 1837
1258 <-> 1803
1259 <-> 1110, 1179
1260 <-> 675
1261 <-> 1005, 1753
1262 <-> 376, 1318
1263 <-> 1025, 1887
1264 <-> 343
1265 <-> 717
1266 <-> 1070
1267 <-> 987, 1368
1268 <-> 1268
1269 <-> 118, 699, 992, 1939
1270 <-> 157, 978
1271 <-> 219
1272 <-> 1858
1273 <-> 218
1274 <-> 905
1275 <-> 407, 494
1276 <-> 26, 929
1277 <-> 1919, 1982
1278 <-> 998, 1132, 1211
1279 <-> 138, 328, 1852, 1912
1280 <-> 960
1281 <-> 102, 113, 388, 1015, 1877
1282 <-> 444
1283 <-> 372, 1562
1284 <-> 919
1285 <-> 262
1286 <-> 127, 1206, 1286, 1875
1287 <-> 269
1288 <-> 860, 1736
1289 <-> 1212, 1321, 1424
1290 <-> 1319, 1884, 1959, 1978
1291 <-> 1291, 1998
1292 <-> 55
1293 <-> 273, 1995
1294 <-> 227, 349, 561
1295 <-> 277, 1080, 1570
1296 <-> 921, 1714
1297 <-> 1297
1298 <-> 1518, 1733
1299 <-> 357, 392
1300 <-> 319
1301 <-> 1301
1302 <-> 1912
1303 <-> 843
1304 <-> 741
1305 <-> 814, 1828
1306 <-> 301, 1610
1307 <-> 190, 1177
1308 <-> 1060
1309 <-> 319, 389, 1047
1310 <-> 605
1311 <-> 1463
1312 <-> 578, 734
1313 <-> 629, 666
1314 <-> 1227, 1980
1315 <-> 684, 1472
1316 <-> 898, 1048
1317 <-> 1025
1318 <-> 520, 1262
1319 <-> 1290
1320 <-> 1188
1321 <-> 1289, 1737
1322 <-> 705, 1501
1323 <-> 1225, 1323
1324 <-> 1720
1325 <-> 1837
1326 <-> 890
1327 <-> 1470, 1914
1328 <-> 560
1329 <-> 763, 894
1330 <-> 1080, 1246
1331 <-> 1163, 1205
1332 <-> 1332
1333 <-> 703
1334 <-> 144, 410, 1028, 1854, 1871, 1925
1335 <-> 246, 910, 1807
1336 <-> 483, 505
1337 <-> 255, 477, 1119
1338 <-> 1455, 1810
1339 <-> 354, 1845
1340 <-> 623, 1627
1341 <-> 62, 1019, 1841
1342 <-> 798
1343 <-> 1343
1344 <-> 982, 1344
1345 <-> 1165, 1369
1346 <-> 1410, 1643
1347 <-> 357
1348 <-> 1623
1349 <-> 235, 1991
1350 <-> 1698
1351 <-> 1669
1352 <-> 1352
1353 <-> 571, 1519, 1657
1354 <-> 80, 752
1355 <-> 635, 981
1356 <-> 1184
1357 <-> 1679
1358 <-> 874, 1838
1359 <-> 661
1360 <-> 565, 1555
1361 <-> 134
1362 <-> 477, 626
1363 <-> 1459
1364 <-> 566, 1791
1365 <-> 20, 944, 1465
1366 <-> 295, 445
1367 <-> 782, 866
1368 <-> 1267
1369 <-> 976, 1020, 1345
1370 <-> 1048
1371 <-> 223, 414, 1051
1372 <-> 323, 829, 907
1373 <-> 1373
1374 <-> 503
1375 <-> 732, 1375
1376 <-> 1376
1377 <-> 271, 431, 1187, 1217
1378 <-> 225
1379 <-> 307, 1379, 1507
1380 <-> 784, 1870
1381 <-> 1381, 1569
1382 <-> 708, 1839
1383 <-> 959, 1586
1384 <-> 733, 1716
1385 <-> 1385
1386 <-> 1386
1387 <-> 101
1388 <-> 385, 1777
1389 <-> 152
1390 <-> 134, 1669
1391 <-> 1924
1392 <-> 245, 919
1393 <-> 1904
1394 <-> 10
1395 <-> 1582
1396 <-> 495, 507, 1622, 1902
1397 <-> 810, 823, 842
1398 <-> 973
1399 <-> 438, 1670, 1671
1400 <-> 1400
1401 <-> 195, 1649
1402 <-> 1402
1403 <-> 1603
1404 <-> 1045
1405 <-> 642
1406 <-> 1562, 1668
1407 <-> 1606
1408 <-> 1408
1409 <-> 486, 613
1410 <-> 59, 713, 813, 1346
1411 <-> 1666
1412 <-> 435
1413 <-> 786, 1709
1414 <-> 53, 1062, 1600
1415 <-> 764, 1558
1416 <-> 35, 934
1417 <-> 1150, 1238
1418 <-> 518
1419 <-> 567
1420 <-> 1858
1421 <-> 294
1422 <-> 177
1423 <-> 1668
1424 <-> 1289
1425 <-> 77
1426 <-> 1870, 1943
1427 <-> 770
1428 <-> 1428
1429 <-> 1126
1430 <-> 609, 841, 939, 1826
1431 <-> 21
1432 <-> 1975
1433 <-> 131
1434 <-> 845, 1487
1435 <-> 268, 1597
1436 <-> 695, 1131, 1216
1437 <-> 16, 1910
1438 <-> 523, 660, 1438
1439 <-> 241, 314
1440 <-> 1714
1441 <-> 241, 510, 993
1442 <-> 537
1443 <-> 815
1444 <-> 1230
1445 <-> 496, 633, 808
1446 <-> 167, 643, 1526
1447 <-> 1848
1448 <-> 829, 1709
1449 <-> 660
1450 <-> 229
1451 <-> 1481, 1527
1452 <-> 1452
1453 <-> 607
1454 <-> 398, 783
1455 <-> 1338, 1618
1456 <-> 459
1457 <-> 482, 692, 768, 1512
1458 <-> 1752
1459 <-> 728, 828, 1363
1460 <-> 1625
1461 <-> 28, 158, 1069, 1926
1462 <-> 1462
1463 <-> 370, 1177, 1311
1464 <-> 1935
1465 <-> 859, 1365
1466 <-> 1137
1467 <-> 129, 1160
1468 <-> 826
1469 <-> 1524
1470 <-> 1196, 1327
1471 <-> 1799, 1993
1472 <-> 1158, 1174, 1315, 1472, 1502, 1981
1473 <-> 642
1474 <-> 1119
1475 <-> 1114, 1513
1476 <-> 16, 1598
1477 <-> 1477
1478 <-> 795
1479 <-> 1194
1480 <-> 920
1481 <-> 264, 1451, 1504, 1952
1482 <-> 1795
1483 <-> 1984
1484 <-> 862, 1629
1485 <-> 908
1486 <-> 222
1487 <-> 1434
1488 <-> 1187
1489 <-> 9, 809, 1053, 1157, 1490
1490 <-> 1489
1491 <-> 1872
1492 <-> 722
1493 <-> 177
1494 <-> 1824
1495 <-> 75, 717, 970, 1143
1496 <-> 1065
1497 <-> 511, 803
1498 <-> 752, 883, 1082
1499 <-> 1646
1500 <-> 435, 843
1501 <-> 1322, 1501, 1753
1502 <-> 98, 1472
1503 <-> 564
1504 <-> 190, 579, 1481
1505 <-> 1527
1506 <-> 1939
1507 <-> 88, 905, 1379
1508 <-> 222, 398, 762
1509 <-> 170, 962, 1509
1510 <-> 381, 417, 839
1511 <-> 448
1512 <-> 838, 1457
1513 <-> 1475
1514 <-> 469, 602, 1071, 1169
1515 <-> 1766
1516 <-> 582
1517 <-> 78, 1555
1518 <-> 1298
1519 <-> 1353, 1918
1520 <-> 1063, 1093
1521 <-> 89
1522 <-> 1249
1523 <-> 1566
1524 <-> 19, 1469
1525 <-> 2, 269, 481, 1057
1526 <-> 245, 1446
1527 <-> 137, 1451, 1505, 1948
1528 <-> 626, 748, 1771
1529 <-> 1618
1530 <-> 1530
1531 <-> 400, 644
1532 <-> 387
1533 <-> 1051, 1725
1534 <-> 1658, 1696
1535 <-> 420, 1173, 1867
1536 <-> 851
1537 <-> 139
1538 <-> 664
1539 <-> 19, 695
1540 <-> 338
1541 <-> 359, 662, 1243
1542 <-> 4, 139
1543 <-> 0, 455, 1055, 1061, 1604
1544 <-> 854, 1619
1545 <-> 367, 537, 1058
1546 <-> 1066
1547 <-> 25
1548 <-> 581, 1917
1549 <-> 453, 672
1550 <-> 40, 759
1551 <-> 852
1552 <-> 524
1553 <-> 482
1554 <-> 91
1555 <-> 1360, 1517, 1833
1556 <-> 1869
1557 <-> 687
1558 <-> 1415
1559 <-> 1559, 1773
1560 <-> 1693
1561 <-> 25
1562 <-> 1283, 1406
1563 <-> 816, 1563, 1768
1564 <-> 553, 672, 1892
1565 <-> 57, 1665
1566 <-> 98, 1523, 1907
1567 <-> 776
1568 <-> 1257, 1998
1569 <-> 1381
1570 <-> 1295
1571 <-> 752, 1827
1572 <-> 248, 315, 1152
1573 <-> 789, 1248, 1772
1574 <-> 427, 541, 917, 1796, 1882
1575 <-> 135, 515
1576 <-> 1957
1577 <-> 944
1578 <-> 407, 800
1579 <-> 1091
1580 <-> 1144
1581 <-> 195
1582 <-> 65, 1395, 1582
1583 <-> 704, 1204
1584 <-> 1584
1585 <-> 403, 1889
1586 <-> 1383
1587 <-> 395, 1587
1588 <-> 1983
1589 <-> 754
1590 <-> 384, 498, 638
1591 <-> 794
1592 <-> 886, 1608
1593 <-> 249, 916
1594 <-> 1061
1595 <-> 645, 766
1596 <-> 89, 153
1597 <-> 56, 1239, 1435
1598 <-> 50, 1247, 1476
1599 <-> 1210
1600 <-> 1414
1601 <-> 199, 849
1602 <-> 758
1603 <-> 514, 1403, 1792
1604 <-> 1543, 1979
1605 <-> 30, 434, 478, 1961
1606 <-> 772, 1407
1607 <-> 1607, 1653
1608 <-> 1140, 1592
1609 <-> 783
1610 <-> 171, 1306, 1744
1611 <-> 473
1612 <-> 794, 1859
1613 <-> 459, 787, 1613
1614 <-> 319, 817, 1616, 1924
1615 <-> 178, 742, 914
1616 <-> 346, 1614
1617 <-> 74, 110, 200, 730
1618 <-> 296, 801, 1455, 1529
1619 <-> 50, 1544
1620 <-> 260
1621 <-> 520, 910, 1748
1622 <-> 172, 187, 369, 1396
1623 <-> 1348, 1623
1624 <-> 21
1625 <-> 1460, 1625, 1936, 1963
1626 <-> 96
1627 <-> 1340, 1677
1628 <-> 1628, 1728
1629 <-> 1078, 1484
1630 <-> 1023
1631 <-> 308
1632 <-> 1069
1633 <-> 1669, 1935
1634 <-> 187, 516
1635 <-> 986, 1057
1636 <-> 547, 1762
1637 <-> 1637
1638 <-> 317
1639 <-> 664, 717
1640 <-> 126
1641 <-> 36, 262, 433
1642 <-> 569, 942
1643 <-> 539, 1346, 1745
1644 <-> 416, 624, 1212, 1931
1645 <-> 929
1646 <-> 586, 1499, 1687
1647 <-> 242, 781, 1723
1648 <-> 1147, 1947
1649 <-> 1401
1650 <-> 630, 722, 1156, 1869
1651 <-> 1943
1652 <-> 796
1653 <-> 1607
1654 <-> 465, 1970
1655 <-> 1987
1656 <-> 1656
1657 <-> 1353
1658 <-> 373, 1534
1659 <-> 1086
1660 <-> 348, 1660
1661 <-> 242, 611, 1086
1662 <-> 692
1663 <-> 712
1664 <-> 257
1665 <-> 1565
1666 <-> 1020, 1411, 1887, 1967
1667 <-> 261
1668 <-> 1406, 1423
1669 <-> 429, 1351, 1390, 1633, 1938
1670 <-> 1399
1671 <-> 265, 1399
1672 <-> 152, 1684, 1707
1673 <-> 205
1674 <-> 877, 1031, 1991
1675 <-> 641, 1022, 1053, 1920
1676 <-> 1126
1677 <-> 82, 646, 1627
1678 <-> 286, 997
1679 <-> 208, 573, 1357
1680 <-> 169, 741
1681 <-> 586, 663, 1811
1682 <-> 1, 1098
1683 <-> 203, 856, 1817
1684 <-> 1672, 1927
1685 <-> 182, 1950
1686 <-> 749
1687 <-> 174, 1646
1688 <-> 913
1689 <-> 1118
1690 <-> 839, 1142
1691 <-> 648, 1129
1692 <-> 937
1693 <-> 320, 897, 995, 1560, 1716
1694 <-> 352, 457
1695 <-> 462
1696 <-> 165, 826, 1534
1697 <-> 1877
1698 <-> 172, 941, 1350
1699 <-> 572
1700 <-> 308
1701 <-> 394, 1843
1702 <-> 642, 695, 1861
1703 <-> 780, 1909
1704 <-> 436
1705 <-> 1906
1706 <-> 455
1707 <-> 1036, 1672, 1854
1708 <-> 1708
1709 <-> 1413, 1448
1710 <-> 1822
1711 <-> 473, 959
1712 <-> 921, 991
1713 <-> 1231
1714 <-> 509, 1213, 1296, 1440, 1999
1715 <-> 651
1716 <-> 1384, 1693
1717 <-> 101
1718 <-> 178
1719 <-> 1131
1720 <-> 1016, 1032, 1324
1721 <-> 210
1722 <-> 322
1723 <-> 1647
1724 <-> 1724, 1738
1725 <-> 1533, 1743
1726 <-> 724
1727 <-> 852
1728 <-> 1628
1729 <-> 582
1730 <-> 1733, 1935
1731 <-> 257, 704, 1989
1732 <-> 801
1733 <-> 775, 1298, 1730, 1762
1734 <-> 365
1735 <-> 60, 290
1736 <-> 661, 911, 1288, 1749
1737 <-> 1321
1738 <-> 236, 1724
1739 <-> 28
1740 <-> 31
1741 <-> 360, 966, 1119
1742 <-> 68
1743 <-> 649, 1725
1744 <-> 790, 1610
1745 <-> 1643
1746 <-> 883
1747 <-> 820
1748 <-> 1621
1749 <-> 1736
1750 <-> 1750
1751 <-> 646, 1237
1752 <-> 407, 1458
1753 <-> 1261, 1501
1754 <-> 247
1755 <-> 457, 1855
1756 <-> 32, 551, 589
1757 <-> 1032
1758 <-> 113
1759 <-> 1848
1760 <-> 26
1761 <-> 561, 1169
1762 <-> 1636, 1733
1763 <-> 563
1764 <-> 1032
1765 <-> 254, 1080
1766 <-> 743, 1195, 1515
1767 <-> 527
1768 <-> 1563
1769 <-> 1240
1770 <-> 631, 710
1771 <-> 1528
1772 <-> 1145, 1573
1773 <-> 1559
1774 <-> 374
1775 <-> 250
1776 <-> 200, 1233
1777 <-> 652, 1388
1778 <-> 635, 1076
1779 <-> 303, 1091
1780 <-> 35, 594
1781 <-> 1059
1782 <-> 350, 1964
1783 <-> 1104, 1837, 1879
1784 <-> 1205
1785 <-> 783
1786 <-> 811, 879, 1786, 1847
1787 <-> 874, 1829
1788 <-> 484, 963
1789 <-> 1858
1790 <-> 33, 341
1791 <-> 1364, 1791
1792 <-> 1603, 1792, 1868
1793 <-> 549
1794 <-> 508
1795 <-> 1134, 1482
1796 <-> 960, 1574
1797 <-> 145
1798 <-> 1798
1799 <-> 1471
1800 <-> 1178
1801 <-> 686
1802 <-> 1191, 1201
1803 <-> 214, 1258, 1819
1804 <-> 1819
1805 <-> 237
1806 <-> 1973
1807 <-> 699, 1335
1808 <-> 668, 1898
1809 <-> 1142, 1987
1810 <-> 192, 480, 506, 964, 1338
1811 <-> 1681
1812 <-> 697
1813 <-> 617, 1910
1814 <-> 327
1815 <-> 1953
1816 <-> 176
1817 <-> 1175, 1683
1818 <-> 850, 1168
1819 <-> 685, 1205, 1803, 1804
1820 <-> 654, 1112
1821 <-> 250
1822 <-> 1710, 1957
1823 <-> 697, 772, 932, 1189
1824 <-> 1494, 1848
1825 <-> 206, 614
1826 <-> 1430
1827 <-> 364, 721, 1571
1828 <-> 1305
1829 <-> 386, 918, 1155, 1787
1830 <-> 568
1831 <-> 215, 243, 711
1832 <-> 415, 1832
1833 <-> 1074, 1555
1834 <-> 1834
1835 <-> 1835
1836 <-> 289, 773
1837 <-> 1257, 1325, 1783
1838 <-> 676, 1358
1839 <-> 437, 1382, 1872
1840 <-> 1079
1841 <-> 375, 1341
1842 <-> 247, 1850
1843 <-> 1701
1844 <-> 879
1845 <-> 533, 843, 1339
1846 <-> 1870
1847 <-> 1786, 1972
1848 <-> 1101, 1447, 1759, 1824, 1848, 1873
1849 <-> 631
1850 <-> 681, 1842
1851 <-> 1851
1852 <-> 1239, 1279
1853 <-> 28, 1997
1854 <-> 1334, 1707
1855 <-> 788, 1755
1856 <-> 515
1857 <-> 212, 325
1858 <-> 306, 480, 1272, 1420, 1789
1859 <-> 332, 1612
1860 <-> 1977
1861 <-> 1702
1862 <-> 518, 950, 974, 1862
1863 <-> 420, 599, 895, 1213
1864 <-> 1150
1865 <-> 45, 141, 1202
1866 <-> 1012
1867 <-> 489, 937, 1040, 1535
1868 <-> 931, 1792
1869 <-> 603, 1556, 1650
1870 <-> 1057, 1380, 1426, 1846
1871 <-> 1334
1872 <-> 1491, 1839, 1959
1873 <-> 1848
1874 <-> 284, 387, 485
1875 <-> 1286
1876 <-> 1876, 1908
1877 <-> 72, 84, 1281, 1697
1878 <-> 906, 1182
1879 <-> 1783
1880 <-> 234, 491, 683
1881 <-> 41, 556
1882 <-> 332, 1574, 1882
1883 <-> 1883
1884 <-> 1290
1885 <-> 853
1886 <-> 95, 644, 934
1887 <-> 1263, 1666
1888 <-> 1888
1889 <-> 855, 915, 1585
1890 <-> 799
1891 <-> 990, 1896
1892 <-> 1032, 1564
1893 <-> 267, 581
1894 <-> 205, 953
1895 <-> 1164, 1895
1896 <-> 1891
1897 <-> 963
1898 <-> 1808, 1915
1899 <-> 93, 689, 850
1900 <-> 28, 168
1901 <-> 1052
1902 <-> 1396, 1902
1903 <-> 695
1904 <-> 69, 115, 195, 836, 1070, 1393
1905 <-> 100, 247, 1054
1906 <-> 1705, 1971
1907 <-> 1566, 1934
1908 <-> 765, 1876
1909 <-> 651, 1703
1910 <-> 1437, 1813
1911 <-> 472, 488, 594, 734
1912 <-> 1279, 1302
1913 <-> 834, 1089
1914 <-> 1327
1915 <-> 1898
1916 <-> 547
1917 <-> 1548
1918 <-> 1228, 1519
1919 <-> 55, 1277
1920 <-> 461, 1675
1921 <-> 674
1922 <-> 1001, 1922
1923 <-> 671, 908, 1923
1924 <-> 1391, 1614, 1958
1925 <-> 1334
1926 <-> 54, 625, 1461
1927 <-> 559, 935, 1684
1928 <-> 287, 600, 780
1929 <-> 107, 534
1930 <-> 139, 889, 1033
1931 <-> 924, 1644
1932 <-> 1038
1933 <-> 1933
1934 <-> 1907
1935 <-> 712, 1464, 1633, 1730
1936 <-> 1049, 1625
1937 <-> 620, 1012
1938 <-> 1669, 1938
1939 <-> 1269, 1506
1940 <-> 229, 918, 1076
1941 <-> 19, 181
1942 <-> 67
1943 <-> 1426, 1651
1944 <-> 218, 391
1945 <-> 1230
1946 <-> 613
1947 <-> 983, 1648
1948 <-> 1170, 1527
1949 <-> 91
1950 <-> 1685
1951 <-> 52
1952 <-> 1481, 1952
1953 <-> 674, 1124, 1138, 1815
1954 <-> 12
1955 <-> 734
1956 <-> 1134, 1956
1957 <-> 530, 1576, 1822
1958 <-> 90, 632, 888, 1924
1959 <-> 1290, 1872
1960 <-> 848, 949
1961 <-> 130, 1605
1962 <-> 289
1963 <-> 1625
1964 <-> 1782
1965 <-> 7
1966 <-> 685
1967 <-> 39, 723, 1666
1968 <-> 525
1969 <-> 1042
1970 <-> 579, 977, 1654
1971 <-> 1178, 1906
1972 <-> 1847
1973 <-> 645, 1806
1974 <-> 350, 446
1975 <-> 259, 1432
1976 <-> 1063
1977 <-> 236, 1860
1978 <-> 954, 1290
1979 <-> 967, 1604
1980 <-> 940, 1314
1981 <-> 1472
1982 <-> 1277
1983 <-> 217, 540, 1588
1984 <-> 560, 892, 1483
1985 <-> 327, 1072
1986 <-> 581
1987 <-> 437, 1655, 1809
1988 <-> 954, 1034
1989 <-> 532, 1003, 1731
1990 <-> 300, 1151
1991 <-> 1349, 1674
1992 <-> 614
1993 <-> 87, 581, 1471
1994 <-> 778, 1119
1995 <-> 1293
1996 <-> 198, 323
1997 <-> 1853
1998 <-> 1042, 1127, 1291, 1568
1999 <-> 433, 1714
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day12-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day12-common-header>>

(define (process-infile infile)
  (let* ((progs (map parse-line (split-lines (load-txt infile))))
         (group-0 (collect-group 0 progs)))
     (format #f "~a -> ~a -> ~d~%" progs group-0 (length group-0))))

<<src-day12-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day12-part1

tangled/day12-part1.scm: tangled/day12-part1-exercise.txt -> ((0 (2)) (1 (1)) (2 (0 3 4)) (3 (2 4)) (4 (2 3 6)) (5 (6)) (6 (4 5))) -> (2 3 4 5 0 6) -> 6

tangled/day12-part1.scm: tangled/day12-puzzle.txt -> (...) -> 128
#+END_EXAMPLE

*** Day 12, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day12-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day12-common-header>>

(define (process-infile infile)
  (let* ((progs (map parse-line (split-lines (load-txt infile))))
         (prog-ids (map car progs))
         (groups (map
                  (lambda (prog-id) (collect-group prog-id progs))
                  prog-ids))
         (sorted-groups (map (lambda (group) (sort group <)) groups))
         (unique-sorted-groups (set->list (list->set equal-comparator sorted-groups))))
    (format #f "~a / ~a -> ~a -> ~a -> ~a -> ~d~%"
            progs prog-ids groups sorted-groups unique-sorted-groups (length unique-sorted-groups))))

  <<src-day12-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day12-part2

tangled/day12-part2.scm: tangled/day12-part1-exercise.txt -> (...) -> 2

tangled/day12-part2.scm: tangled/day12-puzzle.txt -> (...) -> 209
#+END_EXAMPLE

** Day 13

*** Source, common parts

#+name: src-day13-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-txt-io>>

(define (split-words-space-or-colon line)
  (split-words-by line #[\s:]))

(define (parse-line line)
  (map string->number (split-words-space-or-colon line)))

(define (init-ranges layers max-layer)
  (vector-tabulate (+ max-layer 1)
                   (lambda (layer-idx) (car (assoc-ref layers layer-idx '(0))))))
#+end_src

#+name: src-day13-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (infile) (format #t "~a: ~a -> ~a~%"
                            (car args) infile (process-infile infile)))
   (cdr args))
  0)
#+end_src

*** Day 13, Part 1

**** Data

#+begin_src txt :tangle tangled/day13-part1-exercise.txt
0: 3
1: 2
4: 4
6: 4
#+end_src

#+begin_src txt :tangle tangled/day13-puzzle.txt
0: 3
1: 2
2: 4
4: 4
6: 5
8: 6
10: 8
12: 8
14: 6
16: 6
18: 8
20: 8
22: 6
24: 12
26: 9
28: 12
30: 8
32: 14
34: 12
36: 8
38: 14
40: 12
42: 12
44: 12
46: 14
48: 12
50: 14
52: 12
54: 10
56: 14
58: 12
60: 14
62: 14
66: 10
68: 14
74: 14
76: 12
78: 14
80: 20
86: 18
92: 14
94: 20
96: 18
98: 17
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day13-part1.scm :noweb no-export
:END:

-  depth (== layer-idx): range
-  A layer at depth 0 begins immediately inside the firewall;
-  A layer at depth 1 would start immediately after that.
-  Each layer has a thickness of exactly 1.

#+BEGIN_SRC scheme
<<src-day13-common-header>>

(define (process-infile infile)

  (define (is-caught? ts-pico package-layer-idx range)
    (cond
     ((= range 0) #f)
     ((= range 1) #t)
     (else (zero? (modulo ts-pico (* 2 (- range 1)))))))

  (let* ((%layers (map parse-line (split-lines (load-txt infile))))
         (max-layer (apply max (map car %layers)))
         (max-depth (apply max (map cadr %layers)))
         (ranges (init-ranges %layers max-layer)))

    (apply +
           (map
            (lambda (package-layer-idx)
              (let ((ts-pico package-layer-idx)
                    (package-layer-range (vector-ref ranges package-layer-idx)))
                (if (is-caught? ts-pico package-layer-idx package-layer-range)
                    (* package-layer-idx package-layer-range)
                    0)))
            (iota (+ max-layer 1))))))
<<src-day13-common-main>>
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day13-part1

tangled/day13-part1.scm: tangled/day13-part1-exercise.txt -> 24

tangled/day13-part1.scm: tangled/day13-puzzle.txt -> 2160
#+END_EXAMPLE

*** Day 13, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day13-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day13-common-header>>

(define (process-infile infile)

  (define (is-caught? ts-pico package-layer-idx range)
    (cond
     ((= range 0) #f)
     ((= range 1) #t)
     (else (zero? (modulo ts-pico (* 2 (- range 1)))))))

  (let* ((%layers (map parse-line (split-lines (load-txt infile))))
         (max-layer (apply max (map car %layers)))
         (max-depth (apply max (map cadr %layers)))
         (ranges (init-ranges %layers max-layer)))

    (let loop ((delay-pico 0))
      (if (zero? (apply +
                        (map
                         (lambda (package-layer-idx)
                           (let ((ts-pico (+ package-layer-idx delay-pico))
                                 (package-layer-range (vector-ref ranges package-layer-idx)))
                             (if (is-caught? ts-pico package-layer-idx package-layer-range)
                                 1
                                 0)))
                         (iota (+ max-layer 1)))))
          delay-pico
          (loop (+ delay-pico 1))))))

<<src-day13-common-main>>
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day13-part2

tangled/day13-part2.scm: tangled/day13-part1-exercise.txt -> 10

tangled/day13-part2.scm: tangled/day13-puzzle.txt -> 3907470
154.37user 1.02system 2:03.14elapsed 126%CPU (0avgtext+0avgdata 25092maxresident)k
0inputs+0outputs (0major+3836minor)pagefaults 0swaps
#+END_EXAMPLE

** Day 14

*** Source, common parts

/Note:/ The following binding for =ones= was not required, I could use the builtin =logcount= instead.

#+BEGIN_EXAMPLE
(define ones
  (vector-tabulate 256
                   (lambda (i)
                     (define (%count-ones n)
                       (let loop ((n n) (ones 0))
                         (if (zero? n)
                             ones
                             (loop (arithmetic-shift n -1)
                                   (+ ones (if (zero? (logand n 1)) 0 1))))))
                     (%count-ones i))))
#+END_EXAMPLE

#+name: src-day14-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>

<<src-day10-day14-part2-common>>

(define (compute-knot-hashes prefix nb-suffixes)
  (map
   (lambda (suffix)
     (compute-knot-hash (get-length-list (format #f "~a-~d" prefix suffix))))
   (iota nb-suffixes)))
#+end_src

#+name: src-day14-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (arg) (format #t "~a: ~a -> ~a~%"
                         (car args) arg (process-arg arg)))
   (cdr args))
  0)
#+end_src

*** Day 14, Part 1

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day14-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day14-common-header>>

(define (process-arg arg)

  (define (count-ones-per-hash hash)
    (apply + (map logcount hash)))

  (define (count-ones-all-hashes prefix nb-suffixes)
    (apply + (map count-ones-per-hash (compute-knot-hashes prefix nb-suffixes))))

  (let ((nb-suffixes 128))
    (if (string=? arg "ex")
        (begin
          (assert (string=? (number->string (string->number "a0c2017" 16) 2)
                            "1010000011000010000000010111"))
          (count-ones-all-hashes "flqrgnkx" nb-suffixes))
        (count-ones-all-hashes "oundnydw" nb-suffixes))))

<<src-day14-common-main>>
#+END_SRC

Some tests from REPL below.

Lots of testing/debugging was required here, since I made the stupid error to generate the input strings for knot hash
generation using the format =(format #f "~s-~d" "flqrgnkx" 0)= (resulting in the incorrect string ="\"flqrgnkx\"-0"=)
instead of =(format #f "~a-~d" "flqrgnkx" 0)= (resulting in the correct string ="flqrgnkx-0"=), so all went wrong from
here.

#+BEGIN_EXAMPLE
(format #t "hash-0 : ~a~%" (compute-knot-hash (get-length-list (format #f "~a-~d" "flqrgnkx" 0))))
;; hash-0 : (212 247 107 220 191 131 143 132 22 204 250 139 198 209 249 230)

(format #t "hash-0b: ~a~%" (map (lambda (h) (number->string h 2)) (compute-knot-hash (get-length-list (format #f "~a-~d" "flqrgnkx" 0)))))
;; hash-0b: (11010100 11110111 1101011 11011100 10111111 10000011 10001111 10000100 10110 11001100 11111010 10001011 11000110 11010001 11111001 11100110)
;; the first 8 bits match the '##.#.#..' from line 1 of the sample

(format #t "hash-1b: ~a~%" (map (lambda (h) (number->string h 2)) (compute-knot-hash (get-length-list (format #f "~a-~d" "flqrgnkx" 1)))))
;; hash-1b: (1010101 11101010 10110011 11000100 11111011 11111110 11011110 10110 11011100 11101100 101100 1100110 11011101 10100010 1100100 1100100)
;; the first 8 bits match the '.#.#.#.#' from line 2 of the sample (exluding the leading ./0)

(format #t "hash-cnt: ~d~%" (length (compute-knot-hashes "flqrgnkx" 128)))
;; hash-cnt: 128
#+END_EXAMPLE

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day14-part1

tangled/day14-part1.scm: ex -> 8108

tangled/day14-part1.scm: pz -> 8106
#+END_EXAMPLE

*** Day 14, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day14-part2.scm :noweb no-export
:END:

/Note:/ An alternative implementation to count the groups seems to be using the /Union-Find/ algorithm (disjoint sets),
which I did not test here.

#+BEGIN_SRC scheme
<<src-day14-common-header>>

(use srfi-25)                           ;multi-dimensional array primitives

(define (make-grid :optional (n 128))
  (make-array (shape 0 n 0 n) 0))

(define (flood-fill arr dx dy :optional (marker 1))

  (define (helper x y marker)
    (cond ((<  x 0)  #f)
          ((>= x dx) #f)
          ((<  y 0)  #f)
          ((>= y dy) #f)
          (else (let ((curr-marker (array-ref arr x y)))
                  (cond ((= curr-marker -1)
                         (array-set! arr x y marker) ; and now mark neighbours (no diagonals):
                         (helper (- x 1) y marker) (helper (+ x 1) y marker)
                         (helper x (- y 1) marker) (helper x (+ y 1) marker)
                         marker)
                        ((= curr-marker 0)
                         #f)
                        ((= curr-marker marker)
                         marker)
                        (else #| already marked with something different |# #f))))))

  (let ((marker 1))
    (array-for-each-index arr
                          (lambda (x y)
                            (when (helper x y marker)
                              (inc! marker))))
    (- marker 1)))

(define (show-grid arr n :optional (display-width n) (display-height n))
  (array-for-each-index arr
                        (lambda (y x)
                          (when (< y display-height)
                            (when (< x display-width)
                              (let ((m (array-ref arr x y))) ; (- n y 1)
                                (cond ((< m 0)   (format #t " # "))
                                      ((zero? m) (format #t " . "))
                                      (else      (format #t "~3d" m)))))
                            (when (= x (- n 1)) (newline))))))

(define (process-arg arg)
  (define (count-regions hashes nb-suffixes show-grid? display-width display-height)
    (let ((grid (make-grid nb-suffixes)))
      (for-each-with-index
       (lambda (y hash)
         (for-each-with-index
          (lambda (x hex)
            (for-each-with-index
             (lambda (i bit)
               (when bit (array-set! grid (+ (* x 8) i) y -1)))
             (integer->list hex 8)))
          hash))
       hashes)

      (when show-grid?
        (show-grid grid nb-suffixes display-width display-height)
        (newline))
      (let ((nb-groups (flood-fill grid nb-suffixes nb-suffixes)))
        (when show-grid?
          (show-grid grid nb-suffixes display-width display-height))
        nb-groups)))

  (let ((nb-suffixes 128))
    (if (string=? arg "ex")
        (count-regions (compute-knot-hashes "flqrgnkx" nb-suffixes) nb-suffixes #t 8 8)
        (count-regions (compute-knot-hashes "oundnydw" nb-suffixes) nb-suffixes #f 40 16))))

<<src-day14-common-main>>
#+END_SRC

Some test invocations for the REPL for =flood-fill=:

#+BEGIN_EXAMPLE
(let* ((n 128)
       (grid (make-grid n)))
  (array-set! grid 0 0 -1)
  (array-set! grid 4 1 -1)
  (array-set! grid 3 2 -1) (array-set! grid 4 2 -1) (array-set! grid 5 2 -1)
  (array-set! grid 4 3 -1)
  (array-set! grid 3 5 -1)
  (array-set! grid 2 6 -1) (array-set! grid 3 6 -1) (array-set! grid 4 6 -1)
  (array-set! grid 3 7 -1)
  (array-set! grid 7 7 -1)
  (show-grid grid n 20 20) (newline)
  ;;(array-shape grid)
  (flood-fill grid n n)
  (show-grid grid n 20 20))
#+END_EXAMPLE

Some more REPL testing for generating the bit-strings from the hashes:

#+BEGIN_EXAMPLE
(define (print-bits byte)
  (map (lambda (bit) (if bit #\# #\.)) (integer->list byte 8)))

(define (bits->string bits)
  (list->string bits))

(map bits->string (map print-bits (take (map car (compute-knot-hashes "flqrgnkx" nb-suffixes)) 8)))
;; ("##.#.#.." ".#.#.#.#" "....#.#." "#.#.##.#" ".##.#..." "##..#..#" ".#...#.." "##.#.##.")

;; which fits the strings given in task description:
;; ##.#.#..-->
;; .#.#.#.#
;; ....#.#.
;; #.#.##.#
;; .##.#...
;; ##..#..#
;; .#...#..
;; ##.#.##.
#+END_EXAMPLE

Results, for example and puzzle input (2nd try, but again after some debugging - because I forgot to add size parameter
to =(integer->list ... 8)=):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day14-part2

 #  #  .  #  .  #  .  .
 .  #  .  #  .  #  .  #
 .  .  .  .  #  .  #  .
 #  .  #  .  #  #  .  #
 .  #  #  .  #  .  .  .
 #  #  .  .  #  .  .  #
 .  #  .  .  .  #  .  .
 #  #  .  #  .  #  #  .

  1  1 .  46 .  68 .  .
 .   1 .  46 .  68 .  91
 .  .  .  .  57 .  79 .
  2 .   3 .  57 57 .  92
 .   3  3 .  57 .  .  .
  3  3 .  .  57 .  .   3
 .   3 .  .  .   3 .  .
  3  3 .   3 .   3  3 .
tangled/day14-part2.scm: ex -> 1242

tangled/day14-part2.scm: pz -> 1164
#+END_EXAMPLE

** Day 15

*** Source, common parts

#+name: src-day15-common-header
#+begin_src scheme
(use srfi-121)                          ;generators; for extended non-standard generators use gauche.generator
#+end_src

#+name: src-day15-common-main
#+begin_src scheme
(define (main args)
  (for-each
   (lambda (arg) (format #t "~a: ~a -> ~a~%"
                         (car args) arg (process-arg arg)))
   (cdr args))
  0)
#+end_src

*** Day 15, Part 1

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day15-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day15-common-header>>

(define (make-gen-fun start factor)
  (lambda (yield)
    (let loop ((n start))
      (let ((next (remainder (* n factor) 2147483647)))
        (yield next)
        (loop next)))))

(define (gen-gen-a start)
  (generate (make-gen-fun start 16807)))

(define (gen-gen-b start)
  (generate (make-gen-fun start 48271)))

(define (count-matches start-a start-b how-often)
  (let ((gen-a (gen-gen-a start-a))
        (gen-b (gen-gen-b start-b))
        (matches 0))
    (for-each
     (lambda (i)
       (when (= (logand (car (generator->list gen-a 1)) #xFFFF)
                (logand (car (generator->list gen-b 1)) #xFFFF))
         (inc! matches)))
     (iota how-often))
    matches))

(define (process-arg arg)
  (if (string=? arg "ex")
      (list (generator->list (gen-gen-a 65) 5)
            (generator->list (gen-gen-b 8921) 5)
            (count-matches 65 8921 5)
            (count-matches 65 8921 40000000))
      (count-matches 289 629 40000000)))

<<src-day15-common-main>>
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day15-part1

tangled/day15-part1.scm: ex -> ((1092455 1181022009 245556042 1744312007 1352636452) (430625591 1233683848 1431495498 137874439 285222916) 1 588)
355.08user 2.66system 3:46.84elapsed 157%CPU (0avgtext+0avgdata 1208364maxresident)k
0inputs+0outputs (0major+297941minor)pagefaults 0swaps

tangled/day15-part1.scm: pz -> 638
365.71user 1.30system 3:40.42elapsed 166%CPU (0avgtext+0avgdata 1161284maxresident)k
3888inputs+0outputs (13major+283098minor)pagefaults 0swaps
#+END_EXAMPLE

*** Day 15, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day15-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day15-common-header>>

(define (make-gen-fun start factor mult)
  (lambda (yield)
    (let loop ((n start))
      (let ((next (remainder (* n factor) 2147483647)))
        (when (zero? (modulo next mult)) (yield next))
        (loop next)))))

(define (gen-gen-a start)
  (generate (make-gen-fun start 16807 4)))

(define (gen-gen-b start)
  (generate (make-gen-fun start 48271 8)))

(define (count-matches start-a start-b how-often)
  (let ((gen-a (gen-gen-a start-a))
        (gen-b (gen-gen-b start-b))
        (matches 0))
    (for-each
     (lambda (i)
       (when (= (logand (car (generator->list gen-a 1)) #xFFFF)
                (logand (car (generator->list gen-b 1)) #xFFFF))
         (inc! matches)))
     (iota how-often))
    matches))

(define (process-arg arg)
  (if (string=? arg "ex")
      (list (generator->list (gen-gen-a 65) 5)
            (generator->list (gen-gen-b 8921) 5)
            (count-matches 65 8921 1056)
            (count-matches 65 8921 5000000))
      (count-matches 289 629 5000000)))

<<src-day15-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day15-part2

tangled/day15-part2.scm: ex -> ((1352636452 1992081072 530830436 1980017072 740335192) (1233683848 862516352 1159784568 1616057672 412269392) 1 309)
45.04user 0.78system 0:35.04elapsed 130%CPU (0avgtext+0avgdata 163384maxresident)k
0inputs+0outputs (0major+24439minor)pagefaults 0swaps

tangled/day15-part2.scm: pz -> 343
48.14user 0.43system 0:36.35elapsed 133%CPU (0avgtext+0avgdata 161680maxresident)k
0inputs+0outputs (0major+10208minor)pagefaults 0swaps

$ make -f tangled/Makefile day15-part2
#+END_EXAMPLE

** Day 16

*** Source, common parts

/Note:/ (found [[https://sourceforge.net/p/gauche/gauche-gl/ci/release0_1_2/tree/][here]]) Generally passing uniform vectors is more efficient, for it doesn't need to check type of every
values in it. Among variations of uniform vectors, f32vector is usually the most efficient.

#+name: src-day16-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>

(define (split-moves line)
  (split-words-by line #\,))

(define (idx->char i)
  (integer->char (+ i (char->integer #\a))))

(define (make-progs :optional (n 16) (str "abcdefghijklmnopqrstuvvxyz"))
  (string->u8vector (substring str 0 n)))

(define (find-prog progs prog-char)

  (define (helper elt a b found?)
    (if found?
        (values a b found?)
        (if (= elt a)
            (values a b #t)
            (values a (+ b 1) #f))))

  (fold3 helper (char->integer prog-char) 0 #f progs))

(define (spin progs x)
  ;; Make X programs move from the end to the front.
  ;; s1: (assert (string=? (u8vector->string (spin (make-progs 5) 1)) "eabcd"))
  ;; s3: (assert (string=? (u8vector->string (spin (make-progs 5) 3)) "cdeab"))
  (let* ((len (u8vector-length progs))
         (new-progs (make-uvector <u8vector> len)))
    (u8vector-copy! new-progs 0 progs (- len x) len)
    (u8vector-copy! new-progs x progs 0 (- len x)))) ; u8vector-copy! returns the target vector

(define (exchange progs a b)
  ;; Make the programs at positions A and B swap places.
  ;; x3/4: (assert (string=? (u8vector->string (exchange (make-progs 5 "eabcd") 3 4)) "eabdc"))
  (let ((tmp (u8vector-ref progs a)))
    (u8vector-set! progs a (u8vector-ref progs b))
    (u8vector-set! progs b tmp)))       ; u8vector-set! returns the passed vector

(define (partner progs a b)
  ;; Make the programs named A and B swap places.
  ;; pe/b: (assert (string=? (u8vector->string (partner (make-progs 5 "eabdc") #\e #\b)) "baedc"))
  (receive (_a pos-a found-a?)
      (find-prog progs a)
    (receive (_b pos-b found-b?)
        (find-prog progs b)
      (assert (and found-a? found-b?))
      (exchange progs pos-a pos-b))))

(define (parse-move progs move)
  (cond
   ((char=? (string-ref move 0) #\s)
    (spin progs (string->number (substring move 1 (string-length move)))))
   ((char=? (string-ref move 0) #\x)
    (let ((params (map string->number (string-split (substring move 1 (string-length move)) #\/))))
      (exchange progs (list-ref params 0) (list-ref params 1))))
   ((char=? (string-ref move 0) #\p)
    (partner progs (string-ref move 1) (string-ref move 3)))
   (else (error "Bad command" move))))
#+end_src

#+name: src-day16-common-main
#+begin_src scheme
(define (main args)
  (let ((progs (if (string=? (cadr args) "ex") (make-progs 5) (make-progs))))
    (for-each
     (lambda (infile) (format #t "~a: ~a -> ~a~%"
                              (car args) infile (process-infile progs infile)))
     (cddr args)))
  0)
#+end_src

*** Day 16, Part 1

**** Data

#+begin_src txt :tangle tangled/day16-part1-exercise.txt
s1,x3/4,pe/b
#+end_src

#+begin_src txt :tangle tangled/day16-puzzle.txt
x15/1,s15,x2/3,s15,x11/1,pm/a,x6/0,s4,x8/7,s4,x12/9,pi/l,x10/2,s1,x8/15,s7,x13/3,s10,x10/8,pk/e,x4/9,po/j,x8/15,pd/c,x6/4,s15,x2/7,s15,x4/13,pk/o,x0/3,s5,x1/14,s2,x5/10,s8,x2/7,s14,x0/13,s1,x7/9,pa/l,x3/0,pp/o,x13/14,pa/m,x9/5,s11,x6/14,pf/p,x9/5,s6,x1/7,s13,x4/14,pb/k,x2/3,pg/o,x11/7,s15,x5/2,pp/i,x6/14,s11,x15/4,s8,po/d,x6/7,pb/l,x2/8,pf/a,x4/12,pk/h,x11/1,s15,x8/2,pe/n,s13,x15/4,pl/h,s6,po/p,x6/13,s9,ph/e,x2/11,s14,pk/o,s13,x7/15,s1,x10/5,pc/h,x15/3,pd/p,x13/4,s8,x7/8,s5,x4/14,s6,x1/6,s5,x12/9,s13,x2/3,s2,x13/11,s8,x10/6,s8,x1/5,s8,x13/12,s15,x11/4,pb/l,x2/14,s12,po/i,x6/11,ph/m,x13/15,pi/o,x2/11,ph/j,x8/15,pg/n,x2/13,s1,x1/14,s15,x4/3,s8,pe/h,x6/14,s11,x9/10,pg/f,s5,x14/7,s8,x6/11,pi/a,x2/7,s4,x3/12,pe/d,x8/9,s12,x14/10,pj/k,x0/12,s7,po/i,x9/3,s15,x11/0,s9,x1/10,pa/h,x0/3,s10,x2/8,pg/p,s8,x5/9,pc/a,x4/10,s7,x1/11,s13,x9/8,ph/j,x10/4,s7,x14/1,s4,x7/5,s1,x11/3,s4,x5/1,s3,x0/9,pm/a,x15/7,s9,x12/2,s2,x9/3,s5,x5/8,po/c,x4/14,s1,x2/3,s11,x12/7,s13,x1/5,s11,x2/0,s15,x9/1,s11,x13/4,s13,x1/6,s12,x12/4,ph/i,x13/7,s5,x6/1,s6,x2/13,pe/p,x5/12,pk/h,x9/2,s8,x1/0,pm/b,x10/3,pi/l,x8/13,pk/n,x5/9,s1,x15/12,s11,x4/11,pm/p,x14/2,s4,x15/8,s6,x0/6,pa/i,x3/2,pl/o,x10/7,pk/j,x12/15,pi/f,x8/2,s12,x0/15,pj/m,x11/4,s9,x10/5,pa/p,x15/11,po/l,s10,x10/14,s6,x0/3,pg/d,x6/12,s15,x0/7,s6,x1/15,s7,x10/9,pi/m,x5/11,pn/c,x7/15,s5,x0/10,s5,x2/8,s2,x5/11,s5,x7/0,po/h,x5/10,s3,x3/9,pc/d,x12/13,pm/f,x15/7,pd/h,x5/2,s1,x9/0,s7,x8/7,s2,x4/10,s7,x7/9,s6,x8/2,s2,x15/3,pc/o,x14/1,pe/k,x13/11,pa/p,x12/15,s13,x11/2,s7,x6/14,pk/e,x2/12,s5,x14/5,s2,x7/15,pc/h,x1/2,s5,x12/3,pe/m,s9,x15/6,s7,x8/11,s6,x7/14,s10,x2/10,s11,x3/5,pl/f,x6/12,pg/m,x4/13,s13,x1/2,ph/k,x0/14,s10,x4/13,s10,x3/14,s8,x10/12,s10,x6/0,s10,x3/14,pd/c,x10/12,s14,x0/5,pn/f,x12/11,s1,x0/5,s7,x6/10,s4,x4/5,s1,x12/7,po/l,x9/13,s5,x6/4,s10,x3/8,s8,x1/7,pa/c,x6/3,s12,x1/14,s12,x13/3,s3,x4/8,po/k,x13/7,s2,x5/14,s6,x13/6,pb/d,x4/9,pg/n,x12/2,s5,x7/3,s10,x11/8,s7,x5/7,pl/b,x6/15,pe/c,x4/5,s6,x6/10,s4,x12/13,pd/m,x2/7,s4,x0/14,s8,x2/15,s10,x11/8,pc/k,x15/12,s15,x8/2,pi/l,x14/9,s15,x3/6,pd/e,s8,x0/11,s11,x15/10,s12,x8/7,pj/b,x10/9,ph/d,x11/13,s11,x7/2,pa/f,x0/14,pb/h,x7/5,pa/l,x6/14,s12,x1/3,pe/g,s11,x6/15,s5,x8/12,s4,x10/6,ph/a,x7/1,s14,x5/6,s5,x10/13,s14,x9/15,s5,x7/4,pd/e,x8/1,s2,x14/2,s5,x6/10,pp/f,s6,po/m,x4/9,s4,ph/k,x11/14,pn/g,x1/4,s10,x10/5,s14,x15/4,s15,x5/7,s3,x11/14,s10,x8/13,s8,pj/p,x9/1,ph/l,x8/5,s3,x0/2,pk/n,x1/15,s7,x13/8,s11,x11/15,pa/o,x2/9,s7,x12/10,s14,x2/7,s12,x4/13,s7,x5/7,pd/n,s11,x0/11,pp/f,x15/9,ph/e,x4/1,s6,x7/9,s15,x2/13,s4,x9/15,pf/c,x3/5,s8,x2/6,s14,x7/15,po/j,x9/1,s7,x2/13,s2,x12/6,pe/p,x1/5,ph/d,s8,x12/11,po/l,x5/9,s14,pc/a,x3/11,s14,x9/15,pm/b,x11/4,pc/e,x1/14,pl/o,x5/3,ph/f,x4/1,pj/g,s11,x3/14,s6,pm/l,x11/6,po/k,x4/13,pc/p,x1/5,s8,x8/9,s5,x12/1,s5,x11/14,s8,x6/5,po/j,x1/3,pp/d,x8/13,s15,x12/10,pl/e,x11/15,s13,x4/13,pi/n,s12,x15/10,pf/k,s13,pl/d,x6/8,s11,pc/b,x12/1,s4,pa/l,x6/8,pc/e,x3/13,po/a,x4/0,s2,x13/5,s3,x0/6,pd/f,x11/10,s3,x13/12,s14,x6/8,pm/a,x14/3,s9,x9/15,pn/e,x3/11,s11,x1/8,s1,x15/3,s14,x5/7,s4,pm/i,s13,x10/4,s1,x0/14,s13,x12/5,s3,pk/o,s6,pm/d,x2/13,s10,x3/0,pl/b,x9/13,pc/e,x6/0,pm/h,x2/12,s3,x11/7,s13,x13/3,s13,x4/1,s13,x9/12,s13,x7/13,pc/a,x12/8,s6,x3/15,pm/h,x12/8,s3,x10/3,s14,x0/4,s9,x12/13,pi/e,x4/3,pj/l,x1/2,s8,x7/4,s4,x6/10,s1,x15/12,ph/i,x0/3,s5,x7/13,s8,x9/0,pd/e,x2/6,s6,pf/h,s7,x0/11,s10,x10/6,s10,x9/2,s1,x7/12,pl/a,x6/1,ph/e,x10/8,pn/l,x15/5,po/h,x12/8,s12,pj/f,x9/14,s7,x15/0,s9,x14/11,s2,x13/8,s2,x15/9,pk/d,s3,x0/6,s14,x2/1,s15,x7/3,s3,x15/4,s4,x11/1,pm/g,x12/13,s9,x11/6,s12,x0/13,s2,x6/8,s8,x12/2,pi/l,x15/8,s4,x11/1,s14,x4/2,pd/o,x7/3,s10,x11/4,pk/b,x1/0,pm/a,x6/11,s10,pd/c,x9/7,pm/f,s14,x14/12,s13,x0/10,s6,x5/1,s10,x10/14,pg/e,x15/1,pb/p,x9/10,s12,x6/12,s1,x4/11,s1,pi/d,x8/10,s3,x1/3,pf/n,x2/10,s14,x1/3,s14,x10/9,s1,x7/11,pm/d,x4/10,pe/l,x0/9,ph/p,x2/11,s3,pc/g,x0/8,pb/o,x4/11,s12,x12/8,pf/p,s15,pm/b,x5/4,pj/d,x12/9,s12,x5/6,pe/b,x11/10,s5,x0/13,pp/d,s9,x6/1,s5,x5/14,s10,x12/3,s3,x5/8,s10,x0/13,s11,x7/2,s10,x13/15,s10,x4/9,s8,x11/5,s11,pg/b,x9/3,pf/a,s1,pi/l,x6/7,s2,x13/11,s3,x0/4,s10,x8/15,s10,x5/4,s14,x11/12,s9,x13/8,s1,x11/0,pa/h,x1/4,pe/k,x8/3,pi/f,x2/5,s3,x4/0,s11,x9/7,s6,x15/2,pc/b,x6/10,s15,pf/o,x3/1,s15,x14/8,s4,pl/d,x1/10,s4,x7/9,pa/h,x14/15,s14,x12/4,s8,x15/3,s11,x0/10,s5,x13/5,s10,x4/1,s13,pg/p,x15/6,s10,x11/3,s11,x10/0,s3,x4/1,s3,x14/2,s4,x13/11,ph/n,x9/5,po/m,s14,ph/e,x15/7,s10,x11/3,s4,x6/13,pj/d,x5/12,pb/g,x9/14,ph/k,x12/8,po/c,s9,x6/15,pl/f,x3/0,pc/k,x12/11,pa/e,s6,x9/15,s11,x13/11,s13,x6/10,s4,x14/11,pp/k,x1/13,pa/c,x15/10,pn/m,x3/4,s12,x7/6,s6,x8/3,pl/g,x10/2,s5,x3/13,pp/k,x7/9,s12,x11/4,pd/m,s7,x7/15,s10,x14/9,pe/p,x6/8,s12,x2/10,s4,pd/j,x7/5,ph/c,x0/9,s10,x8/1,s4,x11/5,pg/k,x13/10,s10,x9/5,pe/a,x7/14,pn/m,x4/1,s6,x8/13,pb/k,x6/2,s14,x5/15,pa/p,x2/14,s3,x4/11,pd/k,x9/1,pi/j,x4/7,s2,x5/9,s13,x1/15,s9,ph/n,s8,x7/12,pj/k,x13/11,pp/g,x0/14,s8,pc/l,x5/11,ph/f,x14/2,s3,x7/15,s1,x5/2,s5,x14/7,s10,x13/1,pb/g,x15/3,s4,x10/0,s14,x7/9,s4,x12/4,s14,x8/13,ph/k,x3/10,po/i,x5/4,s12,x1/2,pc/b,x4/13,pg/m,x11/15,pp/h,x7/12,pe/d,x4/15,pa/n,x5/1,s14,pi/k,x4/8,ph/o,x10/9,s9,x2/8,pi/b,s4,x14/6,pj/d,x1/7,s10,x0/9,s9,pg/o,x12/8,pb/m,x5/10,s9,x7/1,s4,x11/9,s9,x12/14,s9,x1/7,s13,x3/15,pf/n,x6/10,po/b,x2/9,s8,x12/13,s13,pn/f,x15/1,pb/j,x10/8,s10,x6/15,pd/a,x13/2,s12,x12/15,pc/e,x10/13,s2,x2/0,s10,pp/b,s6,x9/1,s13,x4/7,pg/e,x12/5,s15,x9/8,ph/n,x15/13,s13,x2/8,s3,x14/0,pa/e,x13/12,pl/c,s6,x2/0,ph/n,x3/5,s2,pf/l,x1/9,pp/m,x2/5,s1,x4/8,s6,x7/6,s9,x0/2,s7,x12/13,s10,x11/14,s1,x6/7,s5,x1/3,pi/c,x12/15,s15,x8/2,s13,x11/3,s10,x0/9,pd/o,x5/13,s1,pk/n,x2/10,pp/b,x7/12,s3,x8/1,s11,x7/6,pc/i,x13/5,s4,x0/6,s15,x9/11,pn/o,x14/15,s13,x5/12,pp/m,x13/0,s5,x9/11,s12,x1/6,s6,x0/2,s7,x12/7,pn/l,x14/11,s11,x10/6,s13,x9/12,s14,x14/8,pg/i,x9/3,s6,x7/14,pk/l,x6/0,pg/a,x7/4,pp/i,s7,x3/5,s12,x8/10,pc/b,x0/5,pn/f,x7/6,s15,pj/l,s4,x2/5,pi/n,x10/9,pk/p,x5/8,s9,x15/10,s3,x5/14,s12,x15/7,s13,x1/9,s12,x11/0,pa/o,x13/6,s2,x10/14,s4,x1/11,s7,x14/8,s10,x12/7,pl/e,s7,pi/m,x6/3,s7,x13/12,pb/a,x5/4,s2,x8/10,s14,x15/6,pm/j,x9/13,s8,x1/3,s10,x15/9,s3,x2/13,pf/d,s4,x3/5,po/c,x2/9,pg/p,x5/14,pc/e,s6,x10/3,pk/l,x8/2,pb/g,x13/3,pd/f,x7/9,s10,x2/4,pc/b,x1/14,po/n,x2/10,s11,x1/0,pp/a,x13/4,pe/n,x9/0,s7,x5/13,pd/m,x4/10,s14,x11/8,s7,x9/13,pl/c,x12/1,pi/j,x6/2,s10,x14/7,pn/p,x1/6,s13,x13/0,s11,x4/9,s12,x5/7,pe/c,x0/13,po/a,x1/9,s13,pc/m,x6/14,pj/k,x8/2,s9,pn/g,x4/12,s9,x2/6,s12,x3/1,s4,x2/11,s11,x10/8,s9,x7/15,pp/m,x1/5,pk/b,s9,x14/12,pd/c,x1/13,s1,x11/0,s10,x5/6,s4,x10/1,s2,x8/11,s6,po/k,s9,x13/9,pe/g,x12/6,po/n,x14/13,s3,x6/2,s15,x11/3,s5,x14/2,s5,x6/12,s11,x9/14,s5,x1/4,pe/p,x15/10,s3,x1/12,pb/d,s5,x9/4,s9,x7/1,pg/p,x14/3,pl/i,x7/6,pp/d,x9/0,ph/e,x12/8,pp/k,x10/5,s2,x11/14,s14,x13/15,s5,x8/12,pf/g,x2/13,s11,x5/6,s13,x12/15,s10,x6/3,pe/p,x15/7,s1,x11/5,s8,x10/0,pc/i,x8/1,s8,pj/g,x7/0,pc/o,x6/10,pp/i,x15/13,pb/c,x0/1,pj/o,x12/4,s11,x1/13,pc/n,x7/11,s13,x14/10,ph/o,x1/2,pi/d,x0/15,pa/b,x7/4,s11,x0/8,s14,pn/c,s8,x13/1,s7,x9/4,pb/p,x3/13,s12,pi/l,s5,x15/8,s14,x10/0,ph/c,s8,x8/14,pl/p,x13/2,pd/h,x9/14,pp/o,x2/0,s12,x15/1,pg/n,x14/7,s1,x2/13,po/d,x5/0,pf/l,x10/4,s5,x0/12,s11,ph/d,s7,x8/15,s9,x0/6,pj/g,x13/11,pk/f,x14/3,s10,x7/12,pe/l,x9/6,s4,x0/3,s11,x4/10,po/n,s3,pd/p,x5/7,pi/f,x3/6,s2,x1/15,s1,pm/a,x4/0,s7,x5/2,pf/o,x6/11,pg/b,x3/1,s8,x15/10,ph/l,x5/6,s12,x8/4,s11,x0/7,s4,x8/6,s10,x10/4,s3,x6/9,pa/g,x2/7,s12,x11/3,pe/l,x14/0,s7,x8/12,s10,x3/10,pg/b,s1,x2/9,s13,x7/5,s1,x13/3,pd/n,x2/14,s10,x13/8,s10,x14/11,pp/h,s12,x8/4,s2,x3/9,po/j,x1/11,s5,x6/5,s9,x12/0,s12,x13/14,s2,x6/11,s10,x9/14,pd/g,x0/6,s13,pi/j,x3/4,s11,x1/10,po/h,x2/5,s12,x14/3,pj/l,s3,x12/10,s1,pm/e,s4,pb/k,x3/8,ph/c,x9/11,pg/n,x7/15,pm/l,s11,x8/6,s6,x2/7,s4,x0/3,s8,pb/h,x11/2,s8,x15/6,s3,x2/14,s4,x7/6,s4,x12/15,s6,pc/a,x6/13,pj/e,x10/3,pp/m,x15/2,s8,x10/3,ph/o,x7/8,s2,x3/13,pk/d,x15/5,pi/e,s9,x14/9,pc/g,x5/11,pe/p,x13/2,s5,x10/8,s14,x11/4,s1,x14/9,s6,x2/3,s15,x10/11,ph/o,x14/5,pf/i,x9/7,s1,x8/14,pb/g,x5/10,s3,x9/0,s12,x13/2,s5,pa/f,s6,x14/7,s8,x15/3,s9,x13/9,s15,x10/0,s10,x7/5,pe/h,x2/11,s11,x4/10,s1,x7/6,pn/d,x10/9,pb/o,x6/13,s14,x3/1,pj/g,x12/0,pi/h,x2/14,s15,x9/1,s13,x11/14,pm/d,x13/7,pg/o,x12/14,s9,x13/10,s2,x0/1,s6,x7/13,s7,x6/12,s4,pe/j,x13/9,ph/p,s14,x2/4,s11,x1/8,pg/o,x14/9,s12,x6/8,s3,x12/14,s6,x7/6,s15,x2/1,s10,x10/7,s6,x3/9,s1,x12/2,pa/l,x11/5,pc/m,s9,x4/7,s3,x12/14,pk/b,s15,x8/3,s12,x4/9,pg/i,x8/1,pn/o,x12/4,s2,x8/15,pb/f,x1/14,s5,x10/7,s4,x8/12,pp/e,x0/13,s1,x8/3,s10,x9/5,s4,x13/4,pb/g,x11/1,pi/c,x7/9,po/d,x12/14,s2,x0/15,pp/e,x13/9,pj/n,x7/2,s11,x13/14,s6,x11/12,pm/a,s1,x4/0,ph/j,s14,x15/9,pa/l,x4/14,s5,x13/6,s3,x14/8,s9,x11/15,s4,x2/1,po/g,s2,x11/3,s2,x8/0,pp/f,x5/1,s5,x7/0,s7,pa/c,x8/11,pf/h,x14/6,pm/c,x9/8,s1,x13/3,pb/n,s4,x1/9,s15,pc/a,x12/5,pp/i,x14/15,s3,x9/13,pj/d,s3,x15/1,s3,x13/2,s12,pf/o,x8/4,pg/b,x12/6,s9,x0/2,s15,x9/1,pj/l,x10/7,pb/d,x2/0,s14,po/k,x3/5,s10,x7/1,pm/j,s13,x14/2,pn/l,s14,x3/13,s7,x6/11,pj/k,s15,x10/15,s10,x2/12,pn/e,x11/14,s8,x7/9,s8,x12/2,s6,x8/7,s4,pk/g,x12/5,pi/b,x9/7,s11,x2/1,pa/e,s12,x11/10,pd/l,x7/13,pb/i,x11/10,pa/p,x9/3,pn/f,x1/13,s9,pg/a,x8/2,pi/b,x7/14,pn/l,x10/13,s10,x6/15,pp/k,x5/11,s14,x14/7,s4,x1/6,pl/n,x4/7,s1,x8/15,pf/i,x2/9,s5,x11/0,pl/e,x13/5,pf/o,x1/15,s9,x11/10,pi/e,x8/15,s5,x9/1,s9,x8/7,s14,x0/5,pa/g,x4/8,s10,x6/14,s3,x7/10,s15,x8/9,s11,x7/13,pb/p,x1/12,s8,x9/15,s11,x11/14,s12,x13/1,pe/g,x0/5,s1,x12/11,pi/l,x6/2,s15,x14/9,pn/f,s13,x13/7,s12,x5/6,pm/j,x11/7,s4,x9/13,pk/a,x10/7,s13,x3/14,s6,x10/5,pp/i,x6/11,pn/m,x8/4,s9,x6/0,pd/i,x3/9,pk/b,x8/11,s11,x7/3,pf/c,x8/0,ph/a,x10/3,s1,x6/9,s4,x4/0,s4,x14/12,s14,x15/4,pm/o,x9/5,s11,x10/13,pf/d,x14/8,pg/h,x3/7,s15,x9/0,pd/c,x5/12,s1,x13/9,s1,x15/7,s4,x12/4,s10,x15/5,s11,x13/2,s11,pa/f,x11/7,s15,x14/10,s14,x15/2,s10,x13/8,s15,x4/0,s7,x10/14,pm/l,x15/1,s3,x5/4,s13,x2/10,s4,x8/3,pn/o,x9/15,pd/a,x14/2,s4,x13/10,s9,x2/3,pj/g,x9/4,s1,x3/7,s9,x5/9,s5,x14/7,s14,x0/11,s1,x7/5,pc/o,x8/11,pd/p,x3/2,pf/b,x10/5,s7,pm/c,x11/7,s4,x15/3,s6,x4/9,s12,x0/15,pl/i,s11,x11/3,s6,x4/5,pj/m,x6/2,s9,x10/7,po/h,x9/1,s15,x0/5,s7,x11/4,pf/g,x14/6,pi/n,x5/13,pj/b,x7/11,s15,x5/12,pn/e,x2/4,pg/l,x15/5,s10,x4/0,pp/k,x3/13,s8,x11/2,s15,x4/14,s13,pf/e,x8/0,pj/b,s3,x10/1,pk/i,x11/14,s10,x9/15,s14,x11/4,pg/c,x3/5,s11,x14/4,pd/a,x1/0,pi/f,x15/2,pm/c,x5/4,s1,pj/b,x8/0,ph/e,x15/3,s14,x14/6,pa/n,x10/0,s3,x6/13,pd/k,x9/8,pi/o,x13/6,s7,x15/5,pl/e,x1/0,s2,x6/12,s14,x4/10,s7,x12/15,s1,x14/7,pm/d,x12/3,s4,x0/7,pl/c,x10/8,s15,x14/12,s1,x10/15,s4,x3/0,s8,x5/7,s13,x0/11,s9,x14/3,s2,x9/2,ph/j,x11/12,pn/o,x1/8,s10,x11/13,pe/c,x5/6,s5,x1/3,pl/h,x14/12,s3,x4/0,s3,x1/6,pb/e,s4,x11/12,s8,x2/14,s14,x11/15,s8,x13/6,s7,x9/11,s6,x0/7,pj/p,x1/2,s11,x8/14,s14,pd/k,x10/9,pm/f,x13/3,s9,po/h,x1/10,s15,x0/8,s4,x15/3,s12,x8/6,s14,x10/1,pn/b,x12/4,s11,x3/1,s6,pd/e,x0/14,pi/k,x3/2,pb/h,x11/15,s14,x14/7,pd/l,x0/10,s10,x2/9,s14,x12/14,s3,x2/6,s14,x7/8,s8,x2/4,s9,x15/0,pk/o,x7/13,s3,x6/11,pg/h,x13/2,pl/e,x0/8,pa/k,s14,x12/14,s1,x15/0,pb/e,x9/6,pd/h,x10/13,s4,x8/9,pk/i,s12,x5/4,pa/l,x15/8,s10,x11/14,s13,x12/4,s1,x7/2,pb/e,x12/11,s10,x9/1,s2,x2/10,s1,x7/9,s13,x13/5,pc/i,x4/9,s3,x13/7,pn/b,s8,x8/12,pm/h,x10/15,s15,x5/8,s3,x7/2,s11,x14/6,s10,pl/e,x3/7,s1,x8/14,pk/m,x15/6,s8,x0/2,pa/h,x1/13,pi/n,x12/0,pj/k,x3/4,pl/i,x12/14,pn/o,x3/11,s3,x13/7,pk/j,x11/9,pe/c,x0/5,pf/l,x8/3,pm/b,x14/10,s14,x1/4,s10,x3/5,s5,x14/6,s6,x2/10,s14,x9/11,s15,x0/2,s8,x6/5,s2,x4/9,pj/p,s5,x3/5,s10,x14/6,pa/h,x12/4,s10,x10/8,s8,x6/7,s1,x11/5,pk/n,x4/0,pb/h,s15,x11/1,s4,x2/13,s12,x1/11,pk/d,x12/8,pf/n,s1,x15/1,pg/m,x13/10,s7,x2/11,pi/j,x7/8,s7,x6/10,s10,x0/11,pc/g,x12/2,pn/o,x1/15,s7,x0/6,s7,x3/8,s13,x7/5,s9,x4/2,s11,x13/14,s10,x3/5,s11,x4/2,pp/m,x14/10,s5,pb/g,x7/0,s14,x5/13,s8,x3/10,s7,x7/13,s3,x2/5,pk/e,s13,x0/7,pf/p,x1/9,pa/n,x4/14,s5,x10/6,s10,x13/8,s15,x9/14,s7,x11/7,s13,x15/3,s10,x2/8,pg/l,x5/1,s3,x14/13,s6,x10/1,po/h,x5/8,pn/p,x1/7,s13,x11/0,s15,x13/2,pf/b,x5/12,pk/d,x15/3,s2,x4/1,pn/b,x2/11,s1,x5/0,pf/j,x4/15,s12,x0/9,pc/h,x1/7,s5,x8/6,pf/a,x11/0,ph/j,x8/10,s1,x12/2,po/e,x10/14,pl/f,x7/13,pp/b,x4/11,pd/o,x2/0,pk/c,x6/3,pn/p,x14/7,s9,x0/6,s3,x10/12,s5,x7/8,s12,x1/12,s4,x5/2,s2,x1/4,s11,pb/d,x6/9,pm/c,x10/3,s2,x7/14,pe/j,x2/13,pb/m,x8/15,pc/a,x1/11,s15,x2/4,pe/d,s11,x3/10,s8,pa/n,x12/7,pd/o,s14,x0/1,s10,pf/a,x10/8,ph/d,x1/12,s7,x3/5,pk/e,x1/12,ph/j,x11/10,s7,x5/3,s4,x14/2,pn/f,x1/15,pk/b,x7/9,s3,x12/6,pg/p,s7,x9/10,po/e,x14/11,pf/m,s4,x0/8,pk/h,x9/7,s12,x6/11,pm/f,x7/12,po/g,x8/2,pb/k,x9/5,s1,x14/7,s3,x6/13,s12,x10/0,s3,x1/14,s10,x0/11,s9,x14/15,s11,x11/7,s13,x15/4,s10,x10/11,po/f,x12/2,pi/h,x10/13,s6,x6/4,pe/g,x9/14,s5,pd/b,x13/0,s13,x5/14,s7,x12/2,s4,x14/15,s2,pn/l,x6/9,pa/b,x1/0,pf/c,s9,x11/5,s13,pd/h,x12/7,s9,x1/15,pl/e,x3/7,s13,x5/8,s3,pp/h,x6/12,s4,pd/f,x0/8,s5,x14/11,pe/j,x15/9,s14,x6/13,s1,x11/8,s1,x5/14,pd/o,x0/12,s13,x11/1,pp/c,x13/5,s11,x9/10,s11,x5/3,s9,x8/15,s5,x3/14,pg/l,x12/9,s9,x8/7,s9,x5/4,s2,x6/15,s11,x1/2,pk/j,x7/0,pm/c,x8/10,s8,x1/3,pe/o,x2/6,pm/j,x9/10,s5,x15/5,s14,x0/2,s4,x15/11,s3,ph/d,x13/0,s1,x14/8,pm/b,x9/12,ph/o,x11/5,pg/l,x1/12,pe/i,s5,x10/13,po/k,x0/14,s4,x5/11,s10,x14/0,ph/b,x8/4,pa/o,x7/0,s1,x4/3,s13,x13/7,pc/l,x5/10,s1,x11/13,s8,x7/15,s10,x5/2,s3,pe/k,x10/0,pm/c,x4/15,s15,x11/12,pi/k,x1/10,s4,x4/0,s1,x13/1,s4,x0/2,pp/l,x12/8,s5,x14/0,s13,x11/8,pk/g,x12/0,s4,pi/n,x10/6,s12,x13/12,pe/f,x0/2,pl/n,x15/5,s12,x8/14,s14,x13/7,s3,x11/5,s8,x4/10,s3,x2/12,s10,x0/5,s12,x15/7,s5,x14/3,s11,x10/12,pb/c,x7/1,pn/o,s5,x2/4,s5,x11/0,s1,x15/1,pe/f,x8/11,pb/c,s11,pf/n,x13/5,pb/k,x11/3,s11,x14/5,pl/f,x6/3,s8,x12/15,s5,x2/6,po/m,x14/4,s1,x12/5,s12,x11/3,s11,x12/1,s2,x5/9,pe/g,x3/12,s7,x1/9,s11,pc/j,x13/10,s1,x3/11,pg/a,x9/8,pk/c,x13/6,ph/j,x0/9,s13,pc/n,x13/2,s10,x1/6,s14,x13/10,s14,x15/3,s12,pf/g,x0/9,s6,x1/3,s7,x4/0,s8,x2/14,s6,x11/4,s6,x7/2,s5,x6/12,s13,x7/0,s8,x9/13,s6,x7/2,pi/j,x11/9,s3,x2/5,s13,x14/3,pm/d,x11/8,s11,x6/10,s12,x13/12,s4,x9/14,ph/c,x10/11,s2,x0/14,s8,x1/3,s12,x2/6,pn/a,x8/9,s8,x3/0,s1,x13/4,ph/g,x8/12,s9,x9/13,s8,x10/15,s15,x3/4,pa/f,x1/15,s15,x13/6,s2,x9/5,po/n,x0/4,s8,x7/13,s1,x11/8,pf/g,x13/12,pn/l,x10/1,s7,x5/12,pk/b,s13,x14/11,s6,x1/15,ph/c,s5,x9/5,pf/j,s10,x11/7,s4,x12/9,pa/b,x11/15,s14,x13/2,pe/k,x4/10,s10,x2/12,pp/c,s10,x14/9,s8,pm/d,x12/15,pf/j,x10/8,s5,x15/4,s14,x0/9,pp/n,x14/11,s2,x2/5,s5,x0/6,pc/o,x5/2,s13,x7/1,pg/j,x9/6,s8,x0/1,s3,x13/14,pl/a,x4/12,s8,pn/i,x5/0,s13,x6/1,s1,x14/2,s11,x1/5,pl/c,x6/10,s7,x3/1,pj/i,x4/7,pm/g,x5/13,pb/a,x2/1,s7,x6/8,s15,x1/4,pd/o,x7/0,s9,x13/15,pe/m,x7/0,s7,x6/10,pg/n,x9/14,pc/j,x13/15,s11,x1/4,s15,x10/2,s15,x5/7,pl/g,x1/8,s6,x7/4,pn/d,x1/8,pg/b,x9/4,s1,x2/8,pa/c,x7/0,s10,x9/11,s11,x5/2,s9,x11/4,pb/g,x14/5,s13,x6/11,s13,x9/14,pl/o,x11/2,s2,x0/7,ph/f,s11,x14/1,s15,x6/10,s7,x8/14,po/i,x7/12,s6,x13/11,s14,pj/b,x1/9,po/h,x14/10,s7,x13/9,pm/n,x8/10,pk/b,s14,x6/11,pj/e,s14,x8/14,s9,x1/6,s14,x11/15,pn/b,s11,x1/12,s6,x14/9,s14,x3/1,s12,x11/5,ph/k,x14/9,s14,pl/d,x1/11,ph/m,x6/8,pn/i,x10/3,pp/f,x6/7,s2,x5/1,po/l,s7,x8/10,pn/p,x3/0,s15,x6/11,s11,x10/8,s15,x0/6,s7,x4/8,s7,x2/7,po/h,x3/6,s14,pj/b,x8/9,s10,pg/n,x6/1,pi/c,x10/7,pm/p,x13/3,pb/n,x1/9,pf/l,x7/5,s4,pb/n,x1/12,ph/f,x8/2,s5,x11/9,pj/o,x2/8,s3,x3/11,s1,x1/6,s13,x13/5,s3,x3/6,pi/p,s7,x8/11,pg/j,x5/9,po/h,x12/15,s7,x14/7,s8,x11/13,s11,x12/4,s10,pn/m,x9/7,s8,x11/3,s7,x10/0,s6,x3/13,po/l,x6/7,s4,x0/1,pj/k,x9/4,s5,x14/11,s3,x8/7,s9,x11/0,pc/b,x9/14,pk/j,x4/1,s2,x13/2,s2,x1/3,s12,x14/7,ph/n,x3/5,s2,x1/10,pc/g,x12/6,s9,ph/j,x10/3,s7,pf/p,x0/14,pm/g,x1/13,po/l,x0/10,s12,x11/12,pp/d,x6/7,s9,x14/2,s11,x11/5,s11,x6/7,s1,x5/13,s11,x7/1,s2,x10/8,pb/o,x2/14,s14,pl/f,x5/10,pm/k,x2/12,pj/l,x1/13,pn/m,x11/6,pf/j,x4/3,s10,x15/7,pe/m,x5/14,pd/c,s2,x0/10,pn/o,x3/5,s5,pa/d,x12/2,s10,x3/9,pj/h,x4/1,pb/n,x10/5,s7,x7/1,s3,x12/5,s2,x0/3,s6,x8/6,pg/e,s14,x15/12,po/i,x10/13,s5,x5/11,pk/b,s2,x10/14,s7,x12/5,s13,x9/2,pm/p,x7/4,s5,x9/15,s3,x6/4,s9,x12/11,pl/o,x1/9,s4,x12/11,s7,pa/h,x8/6,s2,x12/15,pe/k,s8,x4/13,s7,x14/10,s5,x12/11,s11,x4/0,s13,x7/6,s10,x8/12,pj/m,x3/6,pk/d,x1/4,s11,pc/n,x11/10,s14,x13/15,s7,x14/3,s11,pd/i,x15/4,s12,x14/6,s3,x10/7,s10,x0/1,pa/p,x11/9,pf/l,x7/2,ph/e,x3/0,pg/p,x5/1,ph/d,x7/8,s13,x0/10,pc/f,x3/12,po/n,x13/10,s15,x15/6,pc/g,x3/14,ph/a,x8/10,s9,x6/12,pc/l,x4/3,ph/e,x12/7,pn/a,x5/11,pi/g,x7/2,s12,x14/3,s11,x8/6,s5,x2/13,s7,x7/5,pd/m,x12/13,s15,x2/14,s7,x15/8,pe/k,x5/3,s10,x13/8,s3,x5/9,s12,x12/8,s7,x1/2,pn/c,x15/6,pm/e,x5/7,pb/i,x6/12,s11,pf/c,x9/5,s6,pl/h,x12/11,s11,x8/15,s12,x2/13,s10,x7/14,pk/n,x9/12,pl/c,s9,x6/10,pd/k,x14/5,s2,x3/4,s6,x2/10,s5,ph/n,x9/6,s4,x14/7,s3,x0/4,s6,pa/b,s15,x7/2,s4,x9/12,pc/e,x10/2,s11,x5/11,s9,x3/6,pm/k,x7/10,s3,x2/3,s14,x8/0,s15,x13/3,s4,pe/o,x11/14,ph/d,x13/2,s4,pp/f,x10/12,s4,x0/1,s12,x12/7,s9,x3/9,s13,x1/7,pd/h,x12/0,s2,pc/m,x2/1,pe/p,x13/12,s6,x8/2,s1,x7/14,s14,x12/0,pc/j,x11/8,s15,x13/5,pi/o,x10/15,s12,x12/8,pm/d,x14/5,s6,x9/6,pk/a,x10/1,s11,x3/11,s10,x13/1,s1,x15/4,pm/l,x2/10,s11,x7/8,s12,pk/p,s4,x0/14,pg/f,x12/1,s12,pc/o,x9/13,s4,x0/2,pf/b,x5/13,pn/m,x7/10,s11,x6/5,pa/i,x3/12,s7,x14/11,pc/k,s10,x4/7,s1,x2/0,pe/p,s6,x4/6,s4,x10/8,s2,pf/o,x4/9,s8,x13/2,s10,x0/14,s2,x1/10,s8,x14/9,s6,x1/8,s14,x12/14,s4,x15/7,pp/d,x9/14,pj/a,x7/3,pk/d,x9/8,po/e,x2/15,pm/h,x6/11,pa/d,s14,x5/2,s9,x10/9,s11,x1/8,po/e,x0/12,pf/p,x9/6,s15,x1/10,s8,x7/2,s10,x9/4,pa/n,x13/11,s10,x1/7,s13,x11/6,s5,x9/2,pk/d,x12/14,s5,x6/11,s9,x12/13,s13,x14/7,s4,x4/13,s11,x1/7,s15,x3/5,s3,x14/7,pn/b,x9/10,po/c,x7/6,s11,x0/4,s14,x12/7,s7,x13/10,pb/p,s11,x1/14,s15,x12/6,s3,x5/3,s6,x8/6,ph/o,x14/11,pd/n,x13/9,s11,x0/5,pe/f,x11/2,pn/o,x0/9,s1,x15/12,pc/b,x3/9,s12,x8/6,pp/f,x12/14,po/j,x10/15,s6,x3/12,s4,x9/5,s14,x2/3,s11,pi/m,x1/7,pn/a,x11/15,pi/m,s12,x10/1,pe/g,x0/8,s12,x13/11,s5,x9/1,pb/k,x8/0,s4,x6/11,pd/n,x3/0,s14,x7/5,s3,x0/1,ph/i,x7/11,s14,x12/2,pa/m,x15/10,s15,x11/8,s5,x9/4,pe/o,x6/3,pb/c,s2,x11/13,pp/a,s9,pg/c,x5/7,pb/d,s13,x8/9,s14,x3/12,s11,x13/8,s5,x14/10,pe/o,x5/8,s1,x14/1,s6,pc/f,x10/15,s9,x5/12,s7,x14/2,pj/l,s11,x3/6,pc/g,x1/0,s13,x8/11,s1,x9/12,s1,x13/2,s6,x3/12,pm/n,x13/7,s9,x0/14,pb/a,x4/15,pm/i,x12/14,s12,x5/15,pa/n,x13/10,s11,pg/j,x14/12,pl/o,x6/4,s9,x7/14,s15,x2/13,pn/c,x6/7,s10,x10/11,s7,x12/14,s10,x5/7,s14,x13/14,pj/i,x12/6,s15,x8/2,pk/e,x5/3,pi/p,x10/2,pa/d,x14/1,s5,x9/3,s9,x5/6,pi/c,s13,x1/4,pp/j,x7/10,pk/d,x1/14,s5,x11/9,pg/b,x7/5,s10,x6/15,pi/m,x0/5,s2,x4/11,pn/g,x7/6,pp/m,x3/12,s13,ph/a,x15/10,s3,x5/7,s11,pd/f,x14/2,pe/b,x7/4,s5,x12/11,pj/a,x15/13,s9,x10/1,s9,x11/5,pi/f,x2/15,pj/b,x10/12,s4,x9/4,pe/a,x6/15,s12,x14/3,s9,x2/8,s6,x7/12,s13,pi/h,x1/11,s10,x0/7,s13,x1/5,pb/p,x7/2,pa/e,x12/3,s5,x13/4,s6,x1/0,s8,x14/7,pb/c,x4/15,pp/h,x12/7,s9,pa/g,x1/11,s11,x10/15,pj/n,x7/5,pb/i,x8/6,pd/f,s3,x7/13,pb/m,x15/12,s6,x4/9,s9,x14/13,s3,x9/8,pi/k,x0/5,pp/j,x7/15,s12,x8/14,s9,x0/13,pd/n,x4/9,s14,x7/12,s11,x13/4,s8,x2/6,ph/g,x9/13,pc/i,x3/10,ph/o,s14,pl/e,s14,x13/4,s14,x2/5,s6,x0/7,s5,x14/13,s13,x6/4,s13,x15/9,s15,x13/11,s15,x10/12,pd/p,x13/7,pm/f,x14/11,s12,x15/7,s4,x3/13,s6,x11/15,pk/p,x8/10,pa/f,x7/2,pk/h,x10/9,s7,x2/15,s5,x12/6,s5,pg/e,x7/2,s7,x8/15,s8,x2/10,s11,x7/1,s13,x3/6,s13,x10/13,s4,x1/15,pj/d,s2,x8/2,s5,x0/15,s5,x4/6,s5,x12/1,s6,x10/15,s8,x6/3,s9,x14/9,s8,x15/6,s12,pm/l,x11/8,pf/c,s13,x13/15,s5,x1/9,s5,x6/5,pp/n,s6,x11/15,ph/g,x0/12,s2,x13/3,s6,x15/14,s6,x6/2,s15,x0/4,pm/b,x8/7,pj/p,x13/12,s12,x11/0,s8,pk/o,s1,x12/10,pl/h,s12,x2/11,pk/m,x3/1,po/c,x6/0,pf/b,x8/5,s7,x7/12,pn/g,s4,x3/9,s2,x0/11,s5,x3/14,s15,x8/1,pl/c,x0/2,pp/o,x12/1,pg/n,x5/4,s1,x9/14,s14,x8/15,s3,x1/0,pa/e,x2/8,po/i,x13/7,pc/a,x2/12,s7,x0/8,pp/m,x12/11,pc/o,s9,x0/3,s12,x14/6,pg/p,x10/11,pj/c,x0/2,s15,x10/11,s4,pk/p,x3/4,pl/a,x9/8,s6,x13/6,s13,x12/8,pn/h,x2/6,s3,x0/1,s12,x13/11,s14,x4/1,s2,x11/8,s11,x5/14,pe/i,x4/7,s6,x1/11,s6,x12/4,s1,x2/14,s8,x5/9,s1,x0/2,po/d,s15,pa/p,x8/4,s9,x11/15,s1,pl/g,x7/10,pk/f,s13,x2/3,po/i,x13/4,pf/l,x11/1,pn/c,x5/2,pa/g,x12/8,pb/p,x14/3,pf/j,x15/5,s1,x10/6,s13,x7/13,pa/o,x9/6,pf/j,x11/15,pn/o,x7/0,s6,x12/1,pf/l,x7/2,s12,x8/12,pi/c,x6/11,s4,x0/14,pk/h,x13/2,s8,x6/4,s9,x2/9,s9,x4/8,pd/j,x13/1,s7,x10/4,pc/n,x12/1,pa/j,x8/7,pm/c,x4/0,s11,x12/10,s8,x15/7,s2,x8/4,pd/g,x6/9,pb/c,x11/5,pn/f,x15/4,s7,x14/10,s11,x12/15,pi/a,x11/14,s15,x5/0,s2,x12/13,s3,x3/5,s4,x7/1,s4,x13/0,s3,x1/8,s2,x15/14,pp/f,x1/5,s1,x11/14,s5,x8/0,pc/m,x6/5,s15,x8/7,s6,x13/3,pg/a,x10/12,s3,x13/2,s8,x0/1,pe/n,x2/13,pi/p,s11,x11/0,ph/c,x7/2,s6,x6/8,pj/o,x9/13,s3,x4/14,s3,x3/9,s2,x8/1,s1,x5/3,pk/p,x9/2,pf/d,x4/5,s15,x0/10,pa/o,x1/7,s12,x9/10,pi/f,x1/12,pp/a,x14/10,s1,x11/13,pj/c,x15/7,pd/g,x9/13,s13,x8/12,s12,pm/n,x15/9,s12,pf/l,x4/6,s2,x1/13,s7,x11/14,s7,x1/12,s3,x7/14,s2,x11/15,s7,x8/12,s8,x11/13,s2,x6/0,s4,x4/8,s9,ph/c,x1/14,s10,pl/n,x12/2,s12,x3/7,pd/h,x10/14,po/k,x0/9,s7,x2/7,s2,x11/14,pj/i,x1/12,pd/a,s9,x7/11,s3,x13/0,pe/m,x5/2,pk/f,x13/14,ph/j,x11/6,pl/n,x8/15,pp/a,s7,x3/1,pe/d,x7/13,s4,x2/1,s4,x0/9,s5,x1/15,s4,x7/11,s11,x15/2,s5,x3/11,s14,x6/8,s9,x7/2,pg/h,x14/1,po/d,x7/8,s4,x1/5,pn/b,s11,x15/14,s9,x0/9,s7,x14/3,pm/d,s5,x15/9,s9,x6/2,pp/f,s3,x9/1,pe/j,x6/0,pk/a,x2/12,ph/m,s12,x6/1,s10,x14/13,s5,x12/15,s11,x11/13,pp/n,s4,pj/f,s12,x14/6,po/m,x5/10,pk/n,x3/14,s11,x13/6,s4,x8/2,s1,x1/11,pp/i,x10/9,pc/j,x6/12,s5,x14/11,pa/n,x3/4,pp/c,x14/11,pf/n,x13/1,s8,x3/7,pc/d,x11/2,pp/m,x7/15,s14,x1/8,pa/g,x15/9,s14,x1/11,pi/b,x3/7,s11,x13/9,pp/k,x6/3,ph/b,x4/7,pe/o,x10/9,pg/n,x12/6,ph/c,x1/7,s13,x14/0,pe/p,x15/2,pg/l,x0/11,pb/o,x7/8,pd/e,x14/6,pg/c,x9/3,ph/b,x5/11,s5,x14/12,s2,x9/13,s10,x2/7,s13,x5/0,s2,x15/4,s8,x10/7,s15,x8/4,pa/j,x0/10,s14,x12/3,pf/c,x2/7,s2,x8/1,s12,x15/14,pj/d,x11/1,s5,x9/4,s12,x14/5,pf/e,s3,x9/8,pj/i,x10/3,pa/l,s7,x8/12,s3,x13/4,pi/k,x9/7,s10,pb/m,x8/13,pd/c,s15,pl/f,x4/7,s7,x3/8,s3,x6/12,pi/k,x9/10,s13,x5/12,s13,x4/14,pf/p,x2/15,pn/j,x11/10,s6,x15/9,pa/k,s9,x2/3,s6,x6/15,s13,x8/1,pp/h,x6/7,pm/a,x13/4,pe/c,x1/6,s6,pg/d,x5/15,pm/n,s7,x3/2,s2,x10/8,s10,x6/4,pp/d,x5/1,pj/a,x2/10,s4,x0/4,pf/c,x6/7,ph/d,x11/15,s4,x5/13,s14,x10/9,pc/o,x7/12,pd/k,x1/3,s7,x14/2,pm/c,x5/12,pf/k,s9,x7/11,s14,po/n,x12/8,s10,x13/1,s8,x14/11,s3,x0/9,s5,x12/5,pa/d,x0/7,s10,x1/11,s13,x5/9,s10,x0/15,s10,x10/4,pl/o,x7/2,pa/c,x14/8,pk/b,x2/11,pm/g,x5/3,pn/d,x1/7,pg/j,x15/12,s9,x11/9,s3,x0/1,pp/d,x12/7,s5,x3/1,s3,x15/11,s5,x13/7,s1,x14/15,pg/k,x7/6,s7,x15/0,s6,x4/12,s11,x7/14,s7,pa/f,s12,x15/0,pi/e,s13,x5/10,pd/m,x11/8,ph/b,x2/7,s9,x12/15,pl/j,x9/13,s8,x15/7,s13,x2/0,s3,x5/15,pi/b,x1/2,pn/o,x4/11,s11,x13/15,s7,x1/3,ph/c,x5/7,pn/a,x0/11,pi/g,x12/13,s2,x4/8,s10,x3/0,s2,x8/6,pm/h,s14,x3/15,s3,x12/5,s1,x9/4,s7,x11/1,pi/d,x13/10,s6,x6/8,pe/j,x5/11,pl/a,x12/1,s3,x0/15,s6,x5/4,s14,x10/12,s7,x14/6,pe/n,x5/10,s10,x4/8,pb/m,x11/15,pd/n,x5/3,s14,pk/p,s13,x10/6,pj/g,x9/2,pm/c,x15/1,pa/d,x0/11,pc/b,x15/9,s11,x7/11,pm/l,x5/14,pp/d,x7/2,pl/f,x6/9,s4,x3/14,s3,x4/8,s13,x13/9,s7,x8/15,ph/g,x11/14,pc/d,x15/3,s5,x5/1,s15,x10/12,s2,x6/15,pn/i,x8/12,s1,x3/6,s4,x9/4,s9,x11/10,pg/k,x3/0,s3,x6/8,pd/p,x7/11,pf/o,x3/10,pg/i,x6/0,s2,x13/10,s8,x2/12,po/d,x4/10,pj/m,x11/1,pe/a,x6/8,s13,x0/4,pc/i,x15/13,pf/p,x0/6,s12,x8/9,s1,pn/b,x11/7,pm/l,s13,x1/13,po/c,x4/11,s10,x9/1,s10,pk/d,x11/15,pp/i,s12,x13/5,s5,x10/15,s15,x11/2,po/a,x7/6,s2,x3/11,pg/m,s1,pn/k,s9,x12/13,s5,x3/15,pg/i,x14/9,s15,x12/6,pb/j,x10/13,s6,x15/5,pk/d,x12/4,pl/m,x6/14,s14,x15/10,s9,x5/6,pc/g,x13/15,s14,x3/7,pn/a,x14/11,s7,x12/1,pl/o,x13/15,s3,x6/0,s13,x11/5,pm/e,x1/12,s8,x14/7,ph/p,x11/6,s8,x8/2,s6,x14/1,s11,x15/8,pe/m,s3,x4/5,s13,x1/0,po/g,x4/6,pi/c,x8/11,s15,x12/5,pp/d,x10/11,s4,x5/3,pa/k,x9/15,s9,x4/14,s12,x12/10,s4,x14/13,pp/o,x5/15,s2,x9/4,pi/c,x6/13,pb/e,x11/12,pm/l,x15/4,s15,x5/7,s10,x4/10,s9,x14/2,po/f,x1/4,s15,pk/d,x0/14,s9,x15/1,ph/e,x7/13,pl/o,x6/9,pg/h,s3,pe/b,s11,x3/14,s13,x10/15,pd/c,x7/13,pl/f,x14/3,pj/e,s2,x15/5,s2,x13/1,s14,pk/m,x11/9,s7,x7/1,pp/c,x11/12,s7,x10/7,s14,pi/g,s11,x15/9,s5,x13/7,s4,x14/12,s6,x2/0,s10,x4/3,s6,x8/11,s6,x9/14,s1,x4/10,pj/d,x12/7,s2,pl/a,x9/14,s11,x13/2,pj/h,x9/5,s15,x11/1,s5,x5/9,s5,x14/4,s15,x7/5,s14,x2/11,pn/o,x12/9,pm/b,x10/1,s8,x2/13,s1,x6/3,pk/h,s12,x11/12,s9,x4/1,s7,x7/15,s7,x4/9,pg/p,s5,x10/3,pn/l,x6/14,s2,x9/15,pb/a,x14/10,s9,x1/5,ph/e,x7/13,s12,x14/11,s8,x15/3,s13,pl/a,x12/10,pb/i,x13/11,s7,x6/0,s10,x12/9,s8,x1/11,s2,x9/3,s13,x12/7,s5,x4/1,pk/f,x8/5,pa/p,s14,x15/10,po/g,x11/2,s7,x14/13,s6,x6/15,pc/d,x3/11,s11,x7/14,s2,pa/e,x9/15,s14,x12/7,s10,x4/13,s8,x0/1,s13,x14/3,s8,x5/8,s6,x1/6,s9,x15/5,s8,x11/14,s3,x4/6,s8,x9/2,pb/f,x12/3,ph/n,x0/11,s12,x4/14,pk/j,x11/7,pp/b,x10/14,pl/m,x4/13,s15,x6/3,s6,x11/12,pe/p,x10/5,s12,x14/7,s10,x6/3,s2,x12/0,s8,x6/9,pm/l,x10/13,s3,x0/9,s7,x2/10,s6,x1/8,s15,x13/9,pf/a,x0/8,s4,x9/6,pk/b,x8/10,pn/l,x2/0,s15,x8/4,s14,pb/p,x13/6,pm/l,x8/10,pg/j,s7,x12/14,s9,x8/4,pi/l,x6/11,s13,x2/13,ph/g,s1,x5/1,s12,x3/0,pm/k,x14/15,s6,x1/13,po/j,x5/0,s8,x7/2,s3,pb/c,s14,x3/12,s2,x5/13,s9,x8/9,s6,x4/6,pl/f,x11/15,pa/d,x1/5,pn/j,x11/3,s6,x10/5,pb/d,x3/8,s5,pp/m,x2/7,pa/o,x5/1,s4,x10/8,pg/b,x1/12,pm/f,x3/11,s6,x5/6,s15,x11/8,s5,x15/14,pj/l,s14,x0/4,s4,x8/3,pa/h,x12/13,pn/i,s1,x10/11,pm/f,x5/8,pe/n,x9/12,s13,pl/k,s13,x11/6,pa/i,x4/12,s3,x9/15,ph/l,x10/11,s9,x13/3,s13,x15/10,s7,x12/5,s5,pb/m,x10/13,pg/p,x15/7,s14,pc/f,x10/4,pg/a,x14/15,s9,x8/6,s3,x15/2,s6,x9/0,s11,x4/13,pc/b,x10/15,s8,x13/2,pi/o,x8/12,pl/n,x10/13,s11,x4/12,s2,x5/0,ph/g,x2/7,pm/l,x13/14,pb/d,x10/2,pi/p,x11/15,s11,x0/5,pb/o,x3/10,s6,pp/f,x6/1,s9,x14/0,pm/k,x15/4,pg/n,x11/6,pp/d,s11,x13/5,s7,x12/9,pi/h,x10/5,s1,x1/14,s14,x12/6,s3,po/c,x2/14,s5,x15/1,pf/g,x0/3,s1,x6/13,pl/i,x4/11,s10,x5/1,s15,x12/7,po/b,x4/10,s7,x15/14,s3,x1/11,pi/g,x6/0,s5,pc/e,s13,x10/1,pn/f,x2/4,pp/h,x0/5,s4,x4/13,po/g,x0/7,s7,x9/8,pb/m,x7/13,s11,x12/10,pl/g,x1/6,s9,x12/2,s11,x11/5,pa/p,x10/6,s2,x3/7,s11,x15/14,pl/b,x2/5,s7,x13/3,pc/k,x12/10,s4,x13/11,pg/b,s10,x3/0,pf/o,x2/14,pk/h,s15,x12/5,s15,x15/3,s2,x2/5,s10,x14/1,s5,x7/5,s7,x8/12,s3,x1/2,pm/a,x3/5,s12,x15/13,pp/n,x14/4,s2,x3/6,s3,x7/15,s10,x8/0,s1,x15/6,s1,x2/3,s11,x13/11,s12,x8/9,s15,x12/14,s9,x0/5,s3,x9/2,s2,x1/5,pc/m,x11/10,s10,pp/d,x2/12,ph/c,x15/11,pj/k,x13/0,pb/e,x1/10,pg/j,x8/2,pp/l,x0/9,s7,x2/12,ph/n,x14/4,pa/b,x11/1,po/g,x4/3,s14,x15/13,pe/k,x4/2,po/b,x12/8,s11,x9/6,pi/e,x5/15,s10,x0/12,s14,x11/15,s1,pl/m,s12,x2/9,s9,x10/11,s8,x15/2,pg/k,x12/10,s15,x3/7,pi/m,x6/14,s7,x15/7,pb/c,s2,x1/11,s1,x4/7,pm/d,x0/5,s14,x11/8,s13,x12/6,s8,x9/10,pb/k,s13,x4/3,s10,x12/6,s2,x15/2,s7,x10/9,s15,x2/0,s8,x13/10,pi/l,x1/15,s11,x14/2,pf/j,x13/0,s3,x9/12,s7,x3/5,s7,pn/h,x14/12,s3,x8/1,s2,x11/5,s10,x9/1,pj/p,x14/5,s8,x10/9,s14,x1/14,pl/m,x13/3,s1,x12/0,s11,x2/13,s8,x6/5,s2,x10/4,s13,x7/8,s3,x1/14,s11,x4/15,s14,x3/5,s6,x2/13,s7,x9/0,pp/c,s13,x3/10,s10,x0/7,s8,x6/10,pg/i,s4,ph/m,x15/0,pd/p,s12,x8/12,pa/b,x0/6,pd/j,x14/2,s9,x15/6,pf/b,x2/7,s11,x15/14,s3,x3/6,s7,x0/2,pj/l,x3/13,pk/d,x6/1,pl/p,x13/7,s12,x6/0,s12,x11/14,pj/f,x15/1,pb/e,x14/0,po/m,x12/2,s12,x5/9,pi/e,x7/15,s6,x3/5,pm/k,x13/9,pc/l,x11/12,s1,x14/6,s4,x0/11,s1,x3/10,s4,x8/12,s13,x6/15,s9,x5/1,s7,x2/7,s2,x1/5,s12,x7/8,s9,x9/14,s15,x6/15,pb/f,x2/4,s11,x7/15,pp/h,x11/6,s10,x7/3,s8,x5/10,s12,x9/15,s8,x12/6,s3,x0/2,s2,x5/9,s15,x1/7,po/m,s4,x4/5,s1,pa/c,x2/7,pe/g,x15/10,s8,x4/9,s3,x15/0,s8,x2/7,s10,x12/1,s9,x2/7,s11,x10/15,s8,x8/13,s1,x3/12,pm/c,x13/2,s11,x14/0,s13,x13/8,pd/b,x7/4,s9,x5/9,s14,po/i,x14/15,s8,x12/5,s9,x2/0,pj/l,x14/10,s3,x9/8,s7,x10/15,s1,pa/f,x2/7,pd/m,x6/10,pp/e,x4/5,s11,x10/12,s3,x3/6,pk/a,s14,x14/15,pi/c,s12,x12/1,s6,x3/10,s8,x13/2,s5,x0/1,s3,x7/12,pd/e,x0/13,ph/o,x15/11,s9,x10/5,s10,x3/1,pi/c,x0/5,pd/h,x13/15,pc/i,x3/8,po/d,x0/14,s10,x13/6,pm/i,s2,x9/8,s2,x14/10,s7,x5/4,s8,x0/13,po/d,s12,x9/7,s5,x10/13,pf/k,s10,x0/5,pe/i,x13/2,pj/d,x7/8,pc/g,x3/9,s10,x2/0,s4,ph/l,x11/12,pp/o,s15,x3/8,ph/b,x14/2,s9,x8/10,s13,pk/l,x5/11,s6,x15/10,s2,x9/5,pc/g,s13,x8/11,pp/m,x7/0,pl/d,x4/12,s12,x7/14,s6,x6/3,pi/a,x7/1,s5,x0/11,s10,x12/15,pc/m,x0/3,pi/p,x12/15,pk/d,s5,x13/8,s2,x15/10,pj/m,x1/5,s4,x8/10,s8,x3/12,pc/e,x5/6,po/a,x12/3,pb/h,s11,x1/9,s6,x7/15,pp/d,x5/6,s5,x3/15,pe/f,x14/13,pi/d,x9/5,pj/l,x6/10,s4,pf/c,x12/9,pb/e,x11/3,s3,pa/l,x12/8,s12,x9/4,s9,x15/5,s3,x12/9,s6,x7/5,pk/j,s3,x9/1,s14,x11/6,s4,x5/12,s11,x7/14,pe/a,x8/11,pj/b,x7/13,pl/i,s5,x6/8,s3,x3/10,s3,x1/2,s4,x6/14,pp/d,x2/9,s4,x8/1,pj/e,x4/10,po/p,x1/12,s2,x4/8,pg/b,x15/9,s8,x7/4,po/f,x14/11,s10,pb/l,x10/13,s13,x14/2,s7,x0/12,s3,x4/11,s7,x3/10,s14,x5/15,pp/n,x10/8,s7,x5/14,s13,x11/7,pc/l,s15,x0/6,ph/p,s2,x11/3,s10,x15/14,s6,x0/1,s12,x6/10,s13,x0/13,s15,x10/4,pb/g,x3/14,pf/l,x8/1,s6,x10/15,s15,x12/14,s15,x7/0,ph/b,x15/2,s3,x14/13,s1,x15/8,s10,x1/12,pc/i,x10/13,s10,x6/7,s12,x15/4,s7,x2/3,pk/b,s6,x8/11,pi/g,s1,pm/l,x13/7,s11,x14/6,s7,x8/4,s9,x15/2,s2,pf/g,x8/12,po/e,x3/11,s15,x0/2,pf/i,x3/10,pc/d,x12/15,s3,x14/13,s5,x8/4,pi/n,x15/11,s10,x4/14,ph/k,x6/13,pn/e,x9/5,s7,x14/4,s15,x3/15,s13,x2/6,s3,pf/j,x8/13,s2,x14/2,s12,x1/6,pe/g,x10/12,pp/i,x7/3,s2,x1/8,s9,x13/12,pf/n,s2,x4/7,s14,x11/14,pl/h,x15/9,s3,x2/5,s5,x15/10,s15,x1/8,pn/a,x9/0,s4,x10/8,s13,x4/15,s11,x13/1,pi/f,x5/15,s4,x2/3,pp/j,x0/12,pi/g,s2,x10/2,s3,x14/11,s10,x7/6,s7,x12/4,pa/p,s12,x14/10,po/k,x15/8,s7,x12/7,s8,x13/8,pm/p,x12/3,s13,x8/15,pe/k,x1/5,s5,x6/12,s12,pm/d,x15/1,pe/f,x13/7,pj/b,x3/1,pn/g,x15/0,s1,x11/14,s10,x13/4,s10,x0/2,s9,x11/14,pc/m,x5/7,s9,x14/12,pf/b,x0/10,s9,x11/14,pj/n,x1/8,pm/i,x9/4,s4,x8/14,pd/j,x9/11,pp/b,x6/14,pm/o,x15/9,pc/f,s2,pb/k,x4/12,pd/f,x6/10,pb/j,x14/12,ph/c,x15/10,po/i,x9/6,pb/j,x7/1,pl/c,x0/13,pb/a,x10/3,pg/o,x2/12,ph/m,x10/13,s9,x14/7,s7,x11/3,s15,x10/12,s4,x4/11,s3,x14/12,s1,x11/6,pb/g,x5/13,pi/e,s6,ph/j,x11/10,pm/g,x4/14,s7,x10/7,po/e,x9/3,s3,x8/7,ph/i,x4/12,pg/p,x15/13,po/c,x1/9,s5,x5/3,s3,pg/l,x4/6,s2,x0/2,s1,x13/5,s4,x3/1,s11,x7/15,s2,x14/2,s5,x4/10,s13,x9/15,s14,pe/a,x11/8,s6,x4/7,pi/f,x14/10,pe/l,x5/7,pk/m,s2,x13/1,pb/i,s3,x15/4,s3,x5/9,s1,x0/14,s15,x1/9,s12,x10/3,pf/h,x6/4,s12,x14/3,pa/p,x13/11,pb/g,s11,x4/8,s5,x5/0,pe/f,x3/11,s14,x4/5,pn/d,x13/8,s15,x5/6,s12,x10/15,s14,x7/5,pk/m,s2,x14/6,s4,x12/1,po/b,x15/5,s15,x7/13,pn/h,x9/4,s1,x3/6,s15,x0/11,pi/k,x10/9,po/j,x6/14,pm/a,x10/9,s15,x6/8,s5,x2/7,s1,x1/0,pp/c,x6/4,pm/h,x10/11,pb/n,x14/6,pg/f,x1/4,pa/p,x9/5,pg/n,x1/11,s6,x0/7,s8,x14/8,pl/o,x15/11,s12,x13/6,s12,x2/15,s8,x14/9,pp/c,x15/13,pj/h,x10/14,s4,x13/8,pe/n,x7/15,pg/l,s6,x1/9,s11,x14/3,pf/i,s3,pk/g,x5/2,s15,x15/12,s9,pe/f,x7/10,s2,x13/6,pb/p,x3/8,s9,x9/14,po/l,x10/11,pb/c,x15/9,s8,x11/6,pf/j,x9/13,s2,x14/4,s2,x7/5,pb/a,x11/8,s8,x10/6,s1,x1/2,s11,x5/3,s6,x12/0,pf/e,x13/4,pn/b,x14/9,pf/k,x12/15,pe/n,x1/9,pj/i,x7/12,pk/d,s7,x4/2,s9,x0/7,s12,x2/3,s7,x7/6,pe/l,x2/9,s14,x13/3,pp/k,x10/9,po/m,x8/14,s12,x1/11,s15,x14/3,s12,x10/12,pf/d,x8/6,s10,x0/13,pp/a,s7,x12/4,s4,x3/8,pf/k,x15/1,pp/o,s13,pb/f,x14/4,pj/m,x5/1,s15,x9/0,s4,pp/c,x12/15,s5,x0/3,ph/d,x13/2,s2,x0/12,pb/n,x14/13,s4,x11/6,pk/o,x10/12,s2,x5/0,s14,pf/c,s15,x1/13,s7,x10/12,s2,x4/11,pa/j,x9/13,pc/f,s13,x11/1,s13,x5/9,s8,x13/0,s3,x14/15,s2,x4/6,s12,x14/3,po/p,x0/4,s2,x7/5,pa/h,x6/10,pb/m,x4/14,s10,x1/8,pa/c,x0/13,ph/m,x2/3,s15,x14/0,s8,x4/12,s13,x9/6,s15,x12/11,s2,x13/4,pj/k,x2/9,s4,x8/15,s15,x3/13,s3,x8/6,s8,x12/11,pa/p,x15/8,pi/h,s4,x11/2,s9,x13/10,s14,x6/5,pp/d,x2/4,pm/o,x13/8,pe/p,x1/14,s5,pf/n,x6/11,s12,x10/8,s13,x3/1,s2,x10/5,pi/h,x4/8,s14,x10/14,pd/n,x6/15,pe/i,x2/10,pp/a,x3/9,po/m,x2/0,pe/b,s15,x6/12,pm/l,x5/10,s6,x12/4,s13,x5/1,s3,pg/a,x6/10,s6,x15/4,s14,x12/10,pn/i,x6/3,s15,x0/14,s1,x7/6,s8,x0/12,pg/a,x10/14,s3,x11/3,pm/h,x7/6,s11,x0/2,s13,x4/5,s6,x12/10,pc/j,x5/0,pp/h,x7/8,pc/b,x6/4,s12,pe/g,x5/15,s13,pf/i,x12/1,s15,x10/7,pp/h,s14,x3/13,s6,x4/7,s6,x12/1,s9,x6/15,pi/m,x1/5,s4,x12/14,pa/d,x2/5,pk/f,x6/9,s15,x3/7,s10,x15/5,s3,x7/10,s6,pc/m,s2,x11/15,pp/k,x6/10,ph/b,x4/12,s9,pp/e,x14/3,s14,x7/1,pl/c,x12/10,ph/d,x4/8,pl/e,s6,x15/2,s3,x0/12,s9,x5/1,pi/m,x0/2,s10,x9/6,s7,x14/2,pb/j,x9/11,s6,x7/1,pg/p,x3/14,pb/h,x2/9,s11,x0/8,s3,x4/9,pi/j,x12/6,s4,pm/c,x8/9,s13,x4/2,s2,x13/10,pi/b,x2/9,s6,x12/14,s8,x7/10,s10,x6/2,s11,x11/4,pg/n,x0/12,s7,x8/9,s14,x13/5,s11,x10/0,s8,x9/3,pp/l,x2/4,pn/j,x0/13,s8,po/e,x6/11,s11,x3/15,s13,x7/10,pp/k,x15/5,s14,x4/9,s4,x1/13,s5,x11/9,s13,x6/15,pf/a,x13/10,pp/m,x5/12,s3,x0/9,s8,x4/15,s1,x5/6,pg/h,x15/9,pm/c,x7/14,s7,x13/5,s6,x11/9,s3,x3/14,pn/d,x6/7,s8,x8/14,s13,x1/13,s1,x7/15,s2,x9/1,pc/a,x13/7,pm/d,s3,x2/4,pl/e,x13/6,s3,x14/0,s11,x9/5,s9,x12/7,pd/o,x0/4,s6,x1/9,pb/k,x15/4,s14,x3/7,ph/p,x8/0,s2,x12/11,pc/e,x14/8,s6,x6/3,s5,x14/13,pj/a,s15,x8/12,pn/m,x10/5,pj/i,x9/15,s4,x8/1,s11,x14/11,pb/c,x4/6,po/a,x15/14,ph/p,x7/10,s3,x8/0,s11,x15/7,s12,x13/10,s8,x5/8,pm/e,x0/12,s14,x6/11,s10,x1/10,s14,x8/13,s3,x6/2,s1,x13/5,pd/h,x0/9,pk/c,x1/3,s6,x13/8,s6,x6/1,pa/e,x8/14,s5,x15/0,po/n,s4,x2/12,s15,x11/15,pl/i,x8/6,pj/m,x14/12,pd/o,x6/1,s7,x7/8,pf/n,s7,x3/5,pk/m,x9/14,pd/e,s15,x11/15,s4,x1/9,pp/g,x13/10,pk/j,x9/5,s3,x0/1,pp/g,x6/10,pa/f,x3/11,po/p,s14,x10/4,s6,x7/0,s11,x9/11,s15,x4/14,pk/m,x9/7,s7,x8/11,pn/b,x15/13,pf/h,x3/10,s9,x1/12,pk/m,x0/14,s15,x3/13,s10,x8/1,s8,x9/14,pb/a,x13/12,po/g,x7/3,pp/c,s11,x0/14,s10,x10/2,pd/k,x11/8,s1,x9/7,s10,x15/8,pa/f,x14/0,pn/j,x12/2,s6,x3/13,s11,x2/11,pl/e,x5/3,s14,pa/o,x8/10,pg/p,x3/13,s1,x10/7,s3,x9/8,s12,x0/4,pm/j,x15/13,pl/o,s13,x4/7,pn/b,x9/3,ph/o,x11/7,pc/i,s6,x14/8,pg/h,x13/10,pa/d,x5/15,s5,x7/3,s12,x2/1,s11,x14/7,pe/h,s6,x2/10,s7,x1/7,s6,x11/3,s2,x14/0,s2,pg/m,x2/8,pi/n,x3/4,s11,x14/0,s4,x4/13,ph/p,x14/10,pg/f,x1/3,pj/i,x7/6,pa/m,x11/13,s7,x0/4,s11,x14/10,s7,x0/8,s6,x6/13,pi/l,s6,x2/1,s8,x4/11,pc/a,x3/1,s1,x15/7,s9,x4/0,s1,x7/10,s13,x4/3,s9,x11/10,s15,x9/13,pl/b,x12/7,pe/k,x11/9,s2,x8/13,s4,pi/m,x6/15,s12,x13/7,pf/c,s4,pj/l,x12/6,pa/g,x0/5,pc/e,x6/1,s3,pn/g,x2/0,s1,x11/12,pj/o,x14/15,s10,x9/1,pk/i,x15/5,pm/j,x4/11,s14,x15/1,s10,x9/11,pb/e,x0/14,pp/k,x1/11,pn/j,x13/4,s2,x5/3,pm/a,x6/9,pp/l,x0/3,s10,x9/14,s15,x1/2,s12,x4/9,s5,x1/11,s11,x12/4,pc/i,x2/14,s4,x0/4,pp/l,x11/7,s10,x5/0,pd/j,x7/10,s9,x9/3,pe/h,x4/15,s12,x7/8,s1,x6/1,s9,x4/15,pk/l,x2/3,po/i,x14/0,s4,x5/2,s9,pp/g,x12/3,s2,pa/c,x5/6,pi/h,x2/7,s6,x8/0,s11,x6/9,pf/p,x14/5,pl/b,x4/12,s12,x3/0,s14,x4/1,s6,x10/13,s6,x15/14,ph/c,x12/3,pd/a,x1/8,pb/i,x6/13,pl/k,x0/14,s6,x8/7,pe/m,x9/11,s4,x2/14,pc/o,x8/11,s12,x13/10,s12,x11/15,s12,x6/10,s7,x13/11,pg/p,x4/10,s14,x2/11,pn/d,x3/14,s8,x5/4,s4,x3/15,pm/j,s13,x14/10,s11,x13/8,s11,x10/12,s4,ph/g,x4/1,pp/o,x5/9,s9,x10/14,s13,pd/m,x11/2,ph/j,x15/10,s8,x5/11,s10,x3/14,s15,x6/4,s4,x13/8,pi/p,x7/10,pc/m,x13/4,s11,x1/11,s1,x8/6,pk/o,s4,x9/13,s1,pe/f,s13,x1/0,s8,x15/12,s9,x3/10,s13,x15/8,s13,x10/0,pn/p,x9/11,pg/o,x2/6,s6,x4/5,s1,x3/11,pe/h,x9/15,s15,x13/3,po/f,x5/10,s14,x11/4,s13,x13/7,s6,x1/0,s15,x11/7,s8,x0/2,s5,x7/11,s3,pa/h,s7,pc/o,x15/10,s4,x1/14,s8,x3/5,pb/e,x14/7,s7,x10/8,s6,x11/14,s12,x10/9,s15,x1/2,s12,x7/0,s10,x2/11,s7,x3/1,s15,x9/14,s3,x11/1,s14,x7/3,s6,x4/1,s10,x11/13,s10,x14/1,po/d,x12/0,ph/a,x5/14,pc/n,s4,x13/4,ph/d,x0/3,s14,x14/2,pl/c,s3,x5/4,s8,pe/d,x7/2,pb/f,x6/5,pj/l,x2/3,s5,x9/15,s14,x14/2,s2,x6/4,s14,x3/14,s11,x1/10,ph/n,x14/12,s2,x13/10,pd/m,x6/0,s12,x1/12,pe/l,s13,x4/14,s1,x9/1,s9,x2/0,pg/d,x3/1,s12,x0/5,s15,x14/4,s9,x5/7,po/l,x11/6,pn/k,x2/5,s11,x1/13,pl/i,s14,x11/9,pc/d,x4/0,po/m,x13/10,s13,x0/5,pp/k,x8/3,s14,x15/11,s15,x0/3,pn/j,s15,x6/13,pl/m,s11,x1/9,s1,x12/11,ph/c,s3,x3/0,s12,x8/12,s14,x14/10,s3,x1/11,s4,x13/12,s15,x11/4,s12,x14/2,s12,x5/12,pe/b,x8/0,pd/l,s15,x12/9,s13,x2/3,pe/j,x0/13,pg/l,x7/6,s13,x5/12,s15,x0/10,pd/j,x4/2,pl/k,x8/15,pn/h,x10/13,pi/l,x1/15,s13,x4/7,s12,x6/5,po/m,x12/10,pd/b,x8/9,s8,x13/10,pk/e,x1/6,s15,x12/2,pa/p,s10,ph/i,x6/8,s2,x15/10,s15,x9/7,pn/f,x8/4,s7,x13/2,s4,x0/15,pe/d,s12,x7/10,s3,x12/2,pl/n,x8/1,pm/o,x6/7,pa/n,x13/15,s10,x2/4,pl/j,x6/3,s5,x1/13,s15,x15/9,pm/k,x14/4,pa/h,x1/13,pp/m,x5/3,s12,x11/0,pk/e,x2/10,s1,x1/7,s10,x11/6,s12,x9/8,s4,x14/5,s8,x8/6,s14,x1/12,s6,x15/2,pm/p,s1,x8/1,s12,x13/2,s7,x10/6,s11,x5/7,s6,x9/8,pe/d,x6/7,s3,pn/c,x10/12,s12,x7/4,s6,x8/12,s6,x10/15,pf/j,x9/7,s8,x12/1,s6,pi/m,x2/6,pe/f,x13/1,s8,x9/14,s9,x0/13,s14,x9/1,s10,x10/11,s14,x3/8,s12,x14/5,pk/a,x0/10,s12,x12/2,s10,pl/b,x11/9,s3,x2/8,pc/k,x1/4,pb/n,x12/7,s3,pe/c,s10,x3/11,pf/b,x4/9,pl/i,x13/6,s1,x2/14,po/d,s6,x12/6,s1,pi/h,s14,x9/10,s7,x2/8,s5,x6/7,s4,x2/9,s1,x5/15,s6,x1/12,s14,x9/4,s10,x0/14,pb/f,x4/3,s12,x14/0,pj/e,x7/6,pl/c,x1/2,s13,x7/4,s5,x14/10,s2,x1/5,s4,x13/3,pg/m,x1/10,s6,x13/15,s10,x9/5,po/l,x11/8,s2,x12/7,s14,x13/10,s6,x14/3,s10,x8/2,s1,x4/6,pa/i,x12/14,s4,x5/7,s12,x9/12,pm/b,x8/5,s10,x4/3,pc/l,x10/0,s11,x9/4,s7,x13/15,pe/h,x6/5,pk/a,s5,x2/15,pd/h,x13/4,pb/e,x14/9,pl/n,x11/3,s3,x15/5,s5,x13/3,pg/f,s7,x12/11,s2,x5/6,s6,x9/13,po/a,x7/5,s12,x13/9,pn/b,x6/0,pd/j,x15/9,s12,x13/11,s8,x9/10,s6,x2/13,s12,x3/9,pb/a,x0/15,s4,x2/3,s7,x11/1,pp/c,x15/8,s15,x5/9,pl/o,x4/7,s3,x8/0,pi/k,x5/15,s14,x3/6,pl/a,x11/0,pp/c,x6/12,pi/b,x11/13,s15,x1/2,pk/f,x3/12,pj/l,x8/2,s10,x12/11,s7,x7/2,s15,x14/0,s1,x7/9,s9,x6/12,s11,x10/9,s8,x4/12,pn/i,x6/9,s2,pe/l,x3/5,s12,ph/m,x14/6,s1,x8/3,pc/k,x5/2,s15,pm/j,s8,x9/6,pp/b,x14/5,s13,x4/2,pf/i,x5/13,s15,x8/0,pc/p,x5/14,po/b,x13/1,pp/l,x10/9,pb/j,x7/6,s5,x3/11,pg/n,x14/1,po/f,x10/11,pl/k,x3/2,s6,x4/15,pi/j,x11/7,s4,x8/14,s14,x12/3,s8,x1/10,s5,x15/2,s6,x12/8,pm/a,x6/14,s2,x4/0,s5,x11/8,pe/n,x6/9,s8,pk/o,x15/12,s8,x7/8,s9,x13/10,pb/f,s5,x12/9,pc/h,x6/0,s12,x9/12,s2,x13/2,s4,x5/9,s7,x13/11,s4,x5/8,pp/n,x15/4,s2,x6/2,s9,x14/4,po/h,x7/6,s13,x8/10,s13,pp/n,x12/15,s11,x4/1,s9,x5/7,s12,x12/14,ph/o,x10/6,s5,x3/13,s13,x6/0,pl/k,s14,x15/8,s3,x11/5,s7,x15/9,s14,x0/14,s2,x2/10,s1,x1/0,pc/j,x2/11,s9,x13/14,s5,x1/11,s2,pd/e,x5/7,s8,x6/4,s7,x0/3,s11,x8/6,pa/l,x5/9,ph/d,x8/4,s13,x13/10,s8,x12/14,s4,pe/l,x13/9,s15,x5/3,s7,x7/6,s9,x9/4,pc/b,x15/2,s1,x6/9,pn/h,x0/2,pg/k,x9/3,s4,x12/15,s15,x1/7,pm/p,x13/12,s7,x1/8,s7,x3/12,ph/b,x2/9,s10,x7/15,s4,x9/0,s5,x1/13,pa/d,x0/10,s10,x14/15,pf/i,x3/6,s8,x0/8,s3,x15/13,pa/h,x0/11,pj/g,x3/10,s12,x8/11,pd/p,x2/12,pb/m,x3/8,po/c,x10/5,pi/p,x4/8,s14,x2/13,s11,x5/10,pa/k,x2/9,s3,x3/1,s4,x2/9,s4,x0/6,s4,x2/5,pe/g,x14/0,pi/d,x1/5,s12,x15/0,s13,x5/10,pm/j,x7/12,pb/k,x9/15,pl/f,x12/0,s13,x6/7,pj/c,x14/10,s1,x4/6,s12,x15/12,s3,x13/2,pb/p,x8/7,s8,x3/11,pl/n,s13,x4/13,s14,x6/15,s3,x14/9,pm/i,s12,x6/7,pg/c,x14/1,pm/e,x11/10,s5,x12/3,pc/f,x1/6,pl/g,x0/7,s11,x14/9,s5,x13/6,pc/k,x0/14,s6,x11/1,pa/n,x9/2,s3,pc/h,x13/7,s15,x5/11,pj/d,x13/7,s6,x0/3,s13,x2/5,pc/p,x8/1,ph/k,x13/15,s2,x3/4,s5,x6/13,pe/b,x4/11,pk/m,x2/8,s1,x15/5,s8,pl/p,s2,x4/10,s4,x1/3,s14,x11/8,s1,x2/15,s4,pe/o,x6/13,s6,x0/10,pd/i,x2/13,s2,x10/1,s4,x13/2,s1,pf/c,x8/14,s7,x13/3,s15,x4/1,pl/j,x2/5,s12,x6/7,s13,x11/1,s8,x13/7,s12,x6/14,s6,x1/3,pn/p,x5/4,s13,x10/8,ph/a,x12/11,pd/c,x7/6,s7,x11/8,pe/f,s13,x12/1,pd/k,x13/2,pn/g,x0/5,s9,x3/12,pa/p,x4/13,s5,x14/9,pl/m,x8/7,pi/g,x0/1,s7,x13/8,pa/l,x0/5,pm/g,x4/14,s15,x3/8,pe/n,x5/13,s9,x4/2,pm/f,x13/0,pd/n,x8/3,s4,x6/14,s9,x0/1,s8,x13/6,s11,x10/9,s14,x14/13,s9,x9/0,po/e,x5/7,s7,x11/0,s2,x13/15,pc/f,s8,po/d,x10/6,pm/c,x0/2,s10,x3/7,pg/h,s9,x10/8,s1,x2/12,pj/p,x13/14,s5,x7/10,pd/e,x15/8,s8,x7/1,s13,x6/13,po/f,s1,x12/5,s10,x11/8,pe/l,x4/3,s15,x2/13,pd/c,x8/12,s1,pn/f,x10/13,pp/d,x2/5,pi/o,x11/15,s15,x6/13,s9,x14/7,pl/f,x15/13,s15,x6/11,pk/p,x5/1,pd/i,x6/2,s7,x14/1,s2,x9/0,pl/g,x14/13,pi/b,x3/15,pf/h,x12/11,s12,x5/9,s15,x13/2,s3,x0/3,s3,x11/4,s1,x9/15,pa/b,x12/0,po/e,x2/7,pc/h,x10/5,po/g,x4/6,s4,x3/9,s11,x10/0,s2,x14/9,pl/h,x15/13,s7,x0/1,s13,x4/5,pb/m,x0/12,s12,x15/5,s1,x1/11,s11,pn/o,s11,x2/14,pp/l,x15/9,s12,x11/1,pd/k,x3/15,pi/m,s1,x5/1,s5,pa/p,x9/13,pb/k,x7/14,ph/n,x2/1,s14,x15/4,s2,x8/7,s9,x13/10,s5,x7/1,s9,x14/13,pk/b,x6/11,s9,x3/4,s9,pi/d,x1/15,s15,x12/8,pn/a,x5/10,pd/k,x7/1,s2,x11/3,pp/e,x6/10,s13,x11/9,s7,x14/15,pd/m,x5/4,s9,x2/14,pj/b,x13/0,s9,x6/2,s3,x10/7,s2,pp/c,x4/15,s12,x5/2,s3,x14/12,pm/e,x11/0,s14,x9/6,s6,x4/13,s1,x2/7,s2,x5/8,s2,x10/2,s12,x11/5,s8,x13/0,s3,x6/7,pp/g,x0/4,pj/d,x11/5,pa/b,x8/6,pj/d,x5/7,s5,x9/15,s12,x14/7,pf/k,x11/6,pl/g,x9/4,pf/c,x8/15,s6,x13/3,pm/o,x9/8,pj/g,x4/2,s5,x12/5,s13,x0/4,pd/b,s12,x1/11,pg/e,x5/9,s3,x4/15,s15,x11/0,s14,x15/8,s11,x1/5,pn/h,x4/7,pa/e,x3/14,po/d,x4/1,s15,x11/6,s15,x7/8,pf/k,s15,x3/2,s7,x12/6,s1,x15/0,pc/i,x10/1,s6,x2/11,s1,x4/12,pf/k,s3,x0/5,pp/e,x4/12,pn/b,x1/2,pl/j,x9/14,pf/h,x8/2,pg/p,x14/15,ph/l,s13,x8/5,pe/n,x6/13,s7,ph/k,s10,x9/14,pj/a,x1/3,pm/d,x0/8,s15,pp/g,s1,x6/5,s14,x7/13,pj/k,x12/11,pa/f,x10/15,pl/b,x14/4,s10,x10/9,pe/i,x11/13,ph/f,x8/2,s6,x7/10,pk/m,x8/12,pe/o,x13/15,s6,x4/14,pj/l,x13/5,pd/p,x0/11,s1,x10/14,pb/j,x0/4,pk/o,x6/8,pp/j,x11/9,s10,x0/10,s1,x12/2,s5,x6/1,pn/a,x8/7,s11,pb/e,x2/3,pm/d,s15,x0/11,s10,x15/7,s9,x1/0,s7,x14/4,pp/h,s5,x13/6,s3,pd/g,s11,x0/2,s5,x14/9,pk/a,x13/1,s14,x10/7,s3,x14/4,pe/j,x15/5,pl/k,x0/7,pi/n,x2/9,s5,pp/a,x5/0,s11,x10/2,s3,x11/8,s15,x13/15,s3,x4/10,s9,x3/9,pj/f,x15/10,ph/k,x12/6,s1,x0/3,pe/g,x15/5,s9,x6/1,s5,x7/10,pj/l,x14/6,pc/o,s11,x13/4,s8,x7/5,pp/g,x14/2,po/d,x12/6,pm/i,x4/11,s12,x14/7,s2,x4/6,s11,x11/2,s11,x10/5,s15,x6/2,pa/l,x1/8,s12,x12/0,s14,x5/13,s8,x8/4,ph/d,s9,x15/14,pc/e,x7/12,pa/i,x3/13,s11,x7/11,pj/l,s5,x1/8,s14,x13/0,pi/a,s14,x11/1,s14,pm/p,x5/12,s12,x7/13,s9,x14/12,po/n,x4/2,s11,x5/6,s7,x1/4,pc/e,x2/6,s6,x9/11,ph/j,x2/0,s7,x10/14,s14,x4/11,pn/d,s9,x10/7,s13,x2/4,pg/f,x3/9,s15,x5/15,ph/k,x8/10,s13,x7/5,pm/a,x2/15,s13,x7/8,s1,x13/15,s14,x3/5,s7,pj/d,x6/14,s12,x2/8,s8,x15/1,pl/p,x4/7,s8,x13/2,s11,x4/5,s7,x9/6,pb/e,x0/8,s8,x3/1,s14,x11/9,s2,x8/12,pn/k,x10/13,s8,x14/12,pf/p,s2,pl/g,x2/5,pd/h,x6/8,s11,x3/4,s14,x5/2,pb/c,x0/8,s4,x4/14,s14,x7/15,s12,pe/p,x13/12,pd/k,x2/3,pi/p,x7/5,s7,x9/13,pn/e,x1/5,s12,x10/13,pg/l,x12/14,s12,x2/1,s8,pn/e,s11,x14/8,s4,x12/3,ph/j,x5/4,s15,x15/10,s14,x5/13,s7,x1/6,s7,x3/5,pk/p,x15/2,pe/l,x4/0,s1,x13/12,s3,x15/4,s10,x13/6,s9,x15/14,pn/o,x8/13,pk/b,x12/6,pj/n,x2/5,pb/f,x7/14,s12,x1/4,s9,x14/3,s14,x10/12,s6,x8/4,s15,x6/0,pp/h,x13/8,s7,x3/14,s4,pg/a,x11/7,s6,x4/8,pl/h,x7/15,pa/k,x10/2,pp/i,x8/9,s11,x4/0,pj/o,x9/15,s5,x10/12,pa/b,x14/13,pl/f,x7/2,s6,x11/13,po/d,x9/7,pl/h,x3/13,s7,x1/0,pd/o,s3,x10/3,pb/k,x7/5,s4,x6/15,s13,x11/13,s8,x0/9,pe/a,x1/4,pd/f,x8/3,s14,x11/1,pg/o,x2/12,pb/f,s11,x1/0,s12,x12/13,s7,x2/11,s15,x5/4,s10,x3/0,pm/n,x9/14,pd/e,x12/7,pg/i,x4/3,s8,x8/13,s6,x11/2,po/k,x0/10,s13,x2/14,pf/a,x11/9,s2,x5/1,s7,x14/6,s11,x7/8,s12,x15/1,s13,x3/6,s15,x11/1,ph/m,x6/0,s12,x11/5,pf/l,x6/15,s2,pc/n,x5/13,s7,x14/9,pg/f,x5/11,po/l,x13/3,s12,x0/5,pd/b,x12/8,s3,x11/15,s3,x5/3,pf/m,s5,x7/8,pg/p,x11/12,pd/h,x5/4,s10,x11/6,s8,x2/10,s10,x8/6,s4,x11/10,s13,x14/13,s8,x15/6,pp/a,s9,x0/8,s4,x5/9,s10,x2/1,s4,x7/5,s14,x15/4,s13,x6/2,pg/n,x3/8,s14,x7/9,pd/p,x4/12,s6,x7/11,pf/a,x2/4,s3,x0/1,s9,x14/11,s6,x15/3,s2,x1/12,s11,x8/14,s6,po/i,x5/15,pj/a,x1/7,s6,x3/13,pf/m,x9/8,s11,x15/3,s3,x5/10,s3,pj/h,x4/12,s4,x11/6,po/k,x15/14,s12,x3/0,s15,x5/2,s11,x11/4,s6,x13/1,pe/i,x11/15,ph/a,s4,x10/0,pc/k,x15/5,s11,x10/2,s3,x8/1,s5,x15/6,ph/a,x9/4,s7,pb/i,x7/1,s14,x4/13,s7,x0/6,pf/m,x5/10,s10,x3/13,s12,x6/12,s10,x9/14,pg/p,x12/5,pf/n,x8/0,po/d,x4/11,s13,x2/3,s11,x10/7,s8,x2/3,pb/g,x8/13,pi/n,x0/14,s8,x15/4,pd/l,x3/13,s11,x10/12,s1,x13/11,s13,x2/8,s14,x7/12,s13,pk/j,x4/1,pe/p,x10/9,s12,x12/7,pg/o,x0/3,s4,x9/10,pf/n,x0/8,s2,x12/10,pk/g,x15/4,s12,x10/13,s5,x4/9,s15,x2/10,s7,x9/0,po/a,x11/14,s5,x9/1,s6,pc/i,x11/15,s8,x8/2,s5,pd/b,x0/14,s7,x11/7,pl/a,x14/8,s8,x9/2,pk/b,x4/10,s3,x12/14,pd/j,x6/0,s10,x9/11,s12,x7/8,pn/c,s1,x4/1,pg/e,s1,x11/9,s13,x5/13,s3,x4/11,s3,x8/15,pa/b,s15,x2/11,s3,x15/8,s2,x10/3,s1,x13/5,s6,pf/p,x0/6,s14,x9/7,s2,x6/10,s7,x15/12,pj/d,x5/4,s5,x7/6,po/l,x5/2,pn/a,x12/6,pk/i,x10/3,s8,x14/13,s13,x1/9,s5,x11/13,pf/b,x0/1,pd/o,x8/10,pl/p,x9/11,s15,x5/14,s12,x11/8,s1,x0/2,pc/n,x9/11,s14,x4/15,po/g,x9/13,pp/h,x4/14,pj/n,x2/6,pf/c,x9/4,s1,x0/6,pd/k,x5/15,s3,x1/0,s8,x12/4,s15,x3/14,po/g,x7/1,s1,x11/5,s7,x13/10,s11,x0/8,pb/e,x5/3,po/f,x9/13,pb/l,x8/10,s15,x12/13,s10,x10/1,pe/j,x0/11,pp/g,x2/14,s5,x12/3,s2,x6/14,s8,x4/12,s3,x8/1,s10,x15/5,ph/j,x0/6,pl/b,x9/11,pn/d,x4/12,s1,x2/6,pe/c,x13/14,s13,pk/n,x7/11,s11,x0/4,s4,x6/10,s5,x5/4,s1,x15/6,pm/d,x7/12,pa/n,x13/6,pi/p,x12/4,s14,x15/14,s14,pb/f,x2/6,pi/a,x8/10,s3,x1/12,s9,x7/9,s3,x6/8,s1,x4/5,pl/h,x9/0,s5,x10/12,pp/e,x15/6,pc/b,x14/2,ph/o,s10,x12/9,pd/b,x3/2,s11,x9/12,s10,x6/1,pg/i,x9/14,s1,pa/h,x10/1,s1,x12/9,s9,x1/3,pn/o,x8/6,pc/k,x3/5,pl/a,x7/0,s4,x9/12,pf/k,x7/11,po/a,x6/0,s10,x2/12,pj/n,x11/8,ph/f,x10/14,s5,x12/1,po/p,s9,x0/3,s14,x15/12,s8,x9/13,pn/g,x15/14,pj/i,x13/1,pg/b,x11/5,s5,x4/14,s15,x2/12,s7,x9/14,pn/a,x3/10,s13,x8/5,s12,ph/m,x0/9,pa/c,x1/6,s2,x10/9,s3,x5/14,s15,x15/9,s5,x3/14,s7,x2/6,s1,x13/4,s13,x5/12,s14,pd/f,x15/10,s9,x11/12,pn/p,s14,pc/h,s15,x14/6,s2,x13/9,s1,x6/14,s1,x7/11,s7,x6/1,po/l,x0/8,pf/m,s3,x9/13,s5,x15/3,s8,x0/14,pl/o,x4/9,s15,x15/8,s4,x13/12,s9,x8/10,s5,x9/4,pa/g,s1,x15/7,s15,x13/3,pn/p,x15/6,pc/i,s13,x14/2,s4,x10/7,s1,ph/d,x9/6,s12,x12/2,pn/p,s8,x8/15,s9,x12/11,s11,x4/13,pk/a,x2/12,s3,x6/13,s14,x0/8,pj/h,x10/14,s15,x2/3,pf/e,x7/10,s4,x8/3,pi/g,x4/9,s2,x5/14,s13,ph/f,x11/13,pe/p,s1,x0/5,ph/i,s10,x3/12,pa/l,x15/0,s5,x13/7,s9,x15/12,s2,x8/0,s10,x4/6,pd/o,x3/15,pc/m,x9/8,pi/f,x1/10,pn/m,x11/4,pk/e,x14/5,s13,x9/2,s3,x11/15,pa/i,x9/7,pm/e,x6/10,pp/j,x9/7,s4,pb/i,x6/3,s7,x4/0,s11,pa/l,x6/13,pc/f,x14/12,pp/n,x0/5,pc/a,s14,x12/8,s13,x1/2,s13,pn/p,x15/3,s11,x5/13,s13,x10/2,pm/e,x14/1,s8,x13/2,s14,x7/6,s13,x9/14,pp/b,x10/0,s5,x6/13,s4,x3/15,s14,x8/5,s15,x9/11,s4,x7/5,s1,x11/14,s11,x2/6,s9,po/g,x3/11,pi/l,s12,x5/6,s6,x9/3,pa/p,x10/1,ph/n,x11/8,s5,x0/3,s12,x15/6,s9,x13/3,pc/a,x12/2,s10,x10/7,s13,x15/1,pp/d,x12/5,s7,x3/4,s7,x10/13,pb/n,x9/12,pl/h,s2,x5/4,pd/g,x2/9,pm/o,x3/14,s7,x1/2,s15,x13/4,s2,x3/14,pe/g,x15/10,s9,x1/2,pk/c,x12/15,pm/d,x14/1,po/e,x9/4,s8,x14/15,s5,pb/n,x4/9,s7,x8/14,s5,x5/3,pd/k,s12,x14/4,pf/a,s10,x5/3,s9,x13/14,pl/d,s11,x3/10,s3,x14/0,pb/a,x2/6,pn/o,x13/15,pe/a,x12/14,s8,x11/8,s7,x2/6,pk/i,x0/15,pc/e,x12/10,pn/a,x4/14,pe/f,x0/2,pl/o,s14,x4/10,pi/k,x5/8,pm/p,x15/9,po/a,x13/2,pn/d,x8/3,pg/p,x1/10,s9,pd/j,x8/6,s10,x1/5,s6,x10/9,s8,x5/2,pk/m,x10/6,pl/f,x2/7,pn/e,x12/11,s3,x5/6,s12,x1/14,s7,x12/15,pd/l,x14/8,s13,x11/6,s6,x15/2,s4,x9/6,ph/o,x2/15,s13,x14/4,pg/i,x0/2,pa/m,x13/9,s10,x3/8,pb/i,x9/10,pg/m,x13/1,pa/l,x6/12,s7,pg/p,x7/3,pk/c,x10/15,pd/h,x7/3,s6,x6/9,s15,x10/13,s7,x3/6,s15,x9/4,pf/b,x15/8,pn/a,s10,pl/m,x14/4,s15,x12/8,s9,x0/2,s4,x4/3,s8,x8/0,s8,x2/15,pc/h,x14/0,pd/l,x9/5,pp/m,s5,x15/6,s9,pd/f,x12/14,s11,x11/3,s7,x8/10,pi/e,x3/1,s6,x5/14,s7,x9/6,s1,x8/11,s5,x15/6,pf/d,x12/10,pp/a,x4/3,s3,x5/8,s11,x11/12,s9,x3/13,pl/m,x5/7,s4,x3/12,pg/b,x14/6,pa/k,x13/9,pf/j,x7/11,s3,x14/4,s1,x6/3,s11,x4/2,s7,x11/6,pm/o,x14/10,s3,pb/a,x6/9,pk/p,x1/2,pn/g,x15/0,s10,x6/5,s15,x4/13,s13,x11/5,s2,x15/13,s2,x11/7,s2,x0/15,po/m,x8/7,pa/p,x0/13,pc/h,x6/11,s8,x0/10,s4,x5/4,s9,x12/15,s8,x2/6,pk/j,x1/10,pg/l,x14/15,s15,x0/11,pc/n,x9/2,pf/o,x13/7,s11,x10/0,pn/b,x3/12,s14,x4/5,pc/m,x9/14,s10,x13/11,pj/d,s3,x4/10,s8,x12/1,pm/o,x6/5,s13,x10/8,pc/a,s7,pd/l,x3/4,po/n,x11/5,s13,x1/13,s11,x7/3,pi/c,x2/14,s15,x7/6,s4,x1/10,po/f,x7/14,pl/b,x10/3,s6,x4/8,s13,x14/2,s10,x6/0,s2,x9/1,pm/c,x6/12,s14,x14/11,s12,x1/0,s10,x8/13,pb/k,x9/11,pm/a,x6/14,s11,pk/h,x12/13,s14,x14/15,s15,po/m,s4,x10/0,pd/j,x14/6,s13,x1/2,pe/h,x10/4,s7,x7/9,pg/n,x10/3,s6,x12/14,pp/j,x0/2,pl/n,x14/12,pe/d,x1/13,s7,x11/12,s4,x2/5,s3,x0/6,s15,x9/5,s8,x11/2,pb/h,x15/1,pl/c,s11,x6/10,s8,x5/1,s8,x12/3,ph/n,x10/5,pm/b,x8/2,pe/o,s1,x1/7,pn/h,x12/14,s14,x1/13,pi/l,x2/14,s6,x7/5,pm/d,x8/1,s2,x11/2,pj/o,x13/12,pm/i,x14/6,pb/n,x2/7,s3,x9/8,s5,x15/10,pd/p,x8/4,s6,x3/5,s14,pa/c,s11,x1/0,pl/j,x6/4,s9,x10/13,s4,x15/7,s9,x2/11,s3,x1/0,pg/o,x12/5,s8,x7/4,s12,x14/5,s2,x4/1,s12,x2/13,s4,x12/1,pb/j,x11/9,pf/m,x3/5,s5,x6/4,s5,x14/7,pj/e,x10/4,po/n,x6/0,s7,x13/15,pb/e,x4/14,s14,x13/9,s13,x5/7,s11,x6/12,s10,x14/7,pd/h,s2,x13/8,pi/a,x11/4,pm/j,x9/14,pf/d,x6/4,pn/j,x7/3,pk/o,x4/10,pc/p,s3,x2/5,pi/j,x4/13,s13,x2/11,s4,pd/o,x1/5,pe/c,x6/12,s1,x5/4,pd/j,x7/11,pa/g,x1/3,s2,x9/8,s14,x10/11,s7,x12/15,s6,x0/14,s6,x7/9,pc/p,x13/12,s5,x9/5,s12,pb/o,x15/3,s7,x4/2,pg/e,x14/3,ph/j,x8/4,pi/c,x6/12,s10,x9/8,pj/d,x5/13,po/e,x9/4,pf/m,x15/14,s1,x7/9,s3,x4/2,s13,pe/i,x13/6,s4,pb/l,x7/12,s13,x14/3,s7,x0/12,s10,x10/9,pf/h,x7/0,s5,x9/10,s12,x1/3,pc/j,x9/12,s12,x4/10,s11,x1/2,s8,x15/0,s2,x9/14,pf/a,x8/11,s9,x2/14,s1,x0/7,pn/h,x11/9,pm/o,s11,x8/5,s15,x4/13,ph/l,x8/10,pe/i,x5/4,s10,x15/10,s8,x11/9,s12,x7/1,pf/m,x0/8,s7,x12/2,s15,x13/5,s15,x12/9,s12,x15/1,pp/l,x6/9,s12,x4/11,ph/g,x13/10,pn/m,x1/0,pp/o,x4/15,s3,x6/5,pi/g,x4/1,pk/d,x15/9,s11,x2/4,s2,x14/8,s11,x10/3,s13,x13/12,pe/l,x3/15,pg/m,x1/10,s14,x3/8,s14,x14/1,pc/f,s12,x3/0,s12,x15/4,s8,x1/5,s2,x3/8,pl/p,s11,pg/b,x5/1,pp/h,x11/15,s5,x8/2,pc/n,x13/4,pa/d,x3/14,s6,x9/4,pb/f,x2/3,s2,x14/13,pk/o,x11/15,s12,x0/5,pa/g,x15/13,s8,x5/10,pc/e,x11/6,s9,x13/1,s14,x2/11,pd/b,x12/7,s8,x13/9,pn/j,x11/10,s9,x6/15,pc/l,x4/0,pp/j,x11/5,s5,x6/9,s7,pb/a,s13,x4/7,s5,x0/15,s7,x3/5,s10,x0/11,s13,x15/3,s7,x8/7,s1,x12/14,s14,x10/0,pk/l,x2/4,s7,x0/12,s14,x15/3,s4,x2/1,s9,x7/4,s15,x3/12,s4,x11/8,s2,x12/13,s7,x3/0,po/c,x12/15,s1,x6/7,s8,x9/11,s3,x12/3,s8,x14/1,s8,x5/2,pj/h,x6/15,s12,x5/11,s7,x1/4,pd/k,x12/0,s6,x15/8,pf/e,x7/10,pl/c,x6/5,s6,x8/15,ph/j,x9/11,s7,x6/14,pk/l,x11/12,s10,x9/3,s6,pg/h,x2/10,s2,x6/0,s1,pc/a,x1/12,s11,x5/3,pn/m,x2/10,pg/e,x7/6,pk/f,x14/15,ph/l,s11,x0/7,s5,x8/15,s1,x9/7,s3,x10/2,s5,x5/9,s2,x2/10,pk/m,x9/5,s8,x3/11,s9,x5/9,s14,x3/8,s1,x1/11,s1,x15/7,s1,x0/4,pa/o,x15/5,pc/m,x13/1,s4,x6/7,s12,x0/13,pa/p,x7/12,pg/e,x2/13,pl/i,x12/8,pf/b,x1/0,s4,x4/6,pn/o,x10/5,s12,pi/d,x14/6,s2,x5/1,s4,pp/c,x11/8,s5,x10/4,pn/b,s12,x3/1,pe/l,x10/13,s10,x4/6,pc/g,x11/9,s6,x15/5,pb/k,x6/0,s8,x5/1,ph/d,x15/11,pc/e,s15,x7/1,pi/o,x10/6,s6,x7/13,s5,x3/0,s8,x5/13,s10,x2/9,s11,x8/7,s4,x12/2,s12,x8/15,pb/e,x6/2,pp/n,s8,x10/5,pe/g,x7/15,s11,x4/14,s4,x10/2,s6,x8/6,s3,x5/7,pl/f,x3/0,s5,x4/15,pc/h,x14/11,s6,x2/8,s8,x14/12,pb/g,x6/11,s13,x14/2,s1,x12/7,s3,x9/5,s11,x3/8,pp/k,x5/14,pi/h,x2/9,s9,x8/4,pd/o,x12/3,s13,x5/2,s2,x15/12,pg/j,x9/3,s12,x1/15,pd/f,x8/7,pa/h,x11/15,s13,x7/1,pp/k,x3/5,s1,x0/8,s2,x15/4,s12,x5/8,s14,x10/0,pj/f,s9,x3/2,s13,x14/5,s13,x15/2,s4
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day16-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day16-common-header>>

(define (process-infile progs infile)
  (let loop ((moves (apply append (map split-moves (split-lines (load-txt infile)))))
             (progs progs))
    (if (null? moves)
        (u8vector->string progs)
        (loop (cdr moves)
              (parse-move progs (car moves))))))

<<src-day16-common-main>>
#+END_SRC

For the exercise where we've been given the results for the first loop, we can test the output for:

#+BEGIN_EXAMPLE
eabcd -> eabdc -> baedc
#+END_EXAMPLE

Results, for example and puzzle input (1st try):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day16-part1

tangled/day16-part1.scm: tangled/day16-part1-exercise.txt -> baedc

tangled/day16-part1.scm: tangled/day16-puzzle.txt -> ceijbfoamgkdnlph
#+END_EXAMPLE

*** Day 16, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day16-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day16-common-header>>

(define (naive-process-infile progs infile :optional (nb-dances 1000))
  (let ((dance-moves (apply append (map split-moves (split-lines (load-txt infile))))))
    (let loop ((moves dance-moves)
               (progs progs)
               (dance-idx 1))
      (if (null? moves)
          (if (= dance-idx nb-dances)
              (u8vector->string progs)
              (loop (cdr dance-moves)
                    (parse-move progs (car dance-moves))
                    (+ dance-idx 1)))
          (loop (cdr moves)
                (parse-move progs (car moves))
                dance-idx)))))

(define (compile-move move)
  (cond
   ((char=? (string-ref move 0) #\s)
    (lambda (progs) (spin progs (string->number (substring move 1 (string-length move))))))
   ((char=? (string-ref move 0) #\x)
    (let ((params (map string->number (string-split (substring move 1 (string-length move)) #\/))))
      (lambda (progs) (exchange progs (list-ref params 0) (list-ref params 1)))))
   ((char=? (string-ref move 0) #\p)
    (lambda (progs) (partner progs (string-ref move 1) (string-ref move 3))))
   (else (error "Bad command" move))))

(define (compiled-process-infile progs infile :optional (nb-dances 1000))
  (let ((dance-moves (map compile-move (apply append (map split-moves (split-lines (load-txt infile)))))))
    (let loop ((moves dance-moves)
               (progs progs)
               (dance-idx 1))
      (if (null? moves)
          (if (= dance-idx nb-dances)
              (u8vector->string progs)
              (loop (cdr dance-moves)
                    ((car dance-moves) progs)
                    (+ dance-idx 1)))
          (loop (cdr moves)
                ((car moves) progs)
                dance-idx)))))

(define (compiled-cached-process-infile progs infile :optional (nb-dances 1000000000))
  (let ((dance-moves (map compile-move (apply append (map split-moves (split-lines (load-txt infile)))))))

    (define (dance progs)
      (let loop ((moves dance-moves)
                 (progs progs))
        (if (null? moves)
            progs
            (loop (cdr moves)
                  ((car moves) progs)))))

    (let loop ((progs progs)
               (dance-idx 0)
               (seen '()))
      (if (= dance-idx nb-dances)
          (u8vector->string progs)
          (let* ((next-progs (dance progs))
                 (next-progs-str (u8vector->string next-progs)))
            ;; TODO: using dance-idx as cycle length assumes that we found the match as the first entry in `seen',
            ;;   but that's not a safe assumption - better check the length of the member, then probably also need
            ;;   to take that potential offset before cycling starts into account:
            ;;   0 1  2 3 4 5 6  2 3 4 5 6  2 3 4 5 6 ...
            (if (member next-progs-str seen)
                (let ((from-start (modulo nb-dances dance-idx)))
                  ;; the cons below added the dances in reverse direction, so pick from opposite end now
                  ;; (handling the corner case that we would finish with the last dance):
                  (if (zero? from-start)
                      (list-ref seen 0)
                      (list-ref seen (- dance-idx (modulo nb-dances dance-idx)))))
                (loop next-progs
                      (+ dance-idx 1)
                      (cons next-progs-str seen))))))))

;; (define process-infile naive-process-infile)
;; (define process-infile compiled-process-infile)
(define process-infile compiled-cached-process-infile)

<<src-day16-common-main>>
#+END_SRC

For the exercise where we've been given the results for the second loop, we can test the output for:

#+BEGIN_EXAMPLE
cbaed -> cbade -> ceadb
#+END_EXAMPLE

Check that member works for finding the u8-vectors in `seen':

#+BEGIN_EXAMPLE
(member #u8(98 97 101 100 99) (list #u8(97 98 99 100 101) #u8(101 99 98 100 97) #u8(99 101 97 100 98) #u8(98 97 101 100 99)))
#+END_EXAMPLE

I had the bug that storing the progs-vector instead of its string-representation into `seen' didn't work (where we have
the test above that `member' works for the u0-vector; it's just that different vector-values are put into `seen'). See
this log:

#+BEGIN_EXAMPLE
--- 1st iteration, storing the progs [#u8(99 101 ...)] into an empty `seen' [- ()]:
start dance: abcdefghijklmnop -- #u8(97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112)
>000>>ceijbfoamgkdnlph -- #u8(99 101 105 106 98 102 111 97 109 103 107 100 110 108 112 104) - () [0; 0; 70]

--- 2nd iteration: we can now see that the single entry in `seen' was changed [- (#u8(99 104 ...)]
start dance: ceijbfoamgkdnlph -- #u8(99 101 105 106 98 102 111 97 109 103 107 100 110 108 112 104)
>000>>cloeidmbjgpfhkna -- #u8(99 108 111 101 105 100 109 98 106 103 112 102 104 107 110 97) - (#u8(99 104 105 106 98 102 111 97 109 103 107 100 110 108 112 101)) [1; 1; 70]

(u8vector->string #u8(99 101 105 106 98 102 111 97 109 103 107 100 110 108 112 104)) -> "ceijbfoamgkdnlph"
(u8vector->string #u8(99 104 105 106 98 102 111 97 109 103 107 100 110 108 112 101)) -> "chijbfoamgkdnlpe"
#+END_EXAMPLE

Reason was simply that the same progs-vector instance was re-used and changed in the next iteration *after* storing it
into `seen', so that it wasn't found again. By storing the result of (u8vector->string) instead, I did avoid that.

#+BEGIN_EXAMPLE
;; naive, 1000 dances
$ make -f tangled/Makefile day16-part2

tangled/day16-part1-exercise.txt -> abcde

tangled/day16-puzzle.txt -> pnhajoekigcbflmd
62.48user 0.25system 0:51.85elapsed 121%CPU (0avgtext+0avgdata 21976maxresident)k

;; compiled, 1000 dances:
$ make -f tangled/Makefile day16-part2

tangled/day16-part1-exercise.txt -> abcde

tangled/day16-puzzle.txt -> pnhajoekigcbflmd
46.70user 0.16system 0:39.87elapsed 117%CPU (0avgtext+0avgdata 25652maxresident)k

;; compiled and cached, 1_000_000_000 dances; also the final result:
$ make -f tangled/Makefile day16-part2

tangled/day16-part2.scm: tangled/day16-part1-exercise.txt -> abcde

tangled/day16-part2.scm: tangled/day16-puzzle.txt -> pnhajoekigcbflmd
2.98user 0.03system 0:02.76elapsed 109%CPU (0avgtext+0avgdata 31192maxresident)k
0inputs+0outputs (0major+4797minor)pagefaults 0swaps
#+END_EXAMPLE

** Day 17

*** Source, common parts

#+name: src-day17-common-header
#+begin_src scheme
(define (make-circ-buffer n)
  (make-vector n 0))
#+end_src

#+name: src-day17-common-main
#+begin_src scheme
#+end_src

Some test invocations for the REPL:

#+BEGIN_EXAMPLE
(spinlock (make-circ-buffer 20) 3 9)         ; -> 5
(spinlock (make-circ-buffer 2018) 3 2017)    ; -> 638
(spinlock (make-circ-buffer 2018) 359 2017)  ; -> 1506 => OK on 1st try
#+END_EXAMPLE

*** Day 17, Part 1

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day17-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day17-common-header>>

(define (spinlock buffer nb-spins offset :optional (buffer-sz (vector-length buffer)))

  (define (insert-after pos-before value)
    (let ((ins-pos (+ pos-before 1))) ; insert the new value after the value it stopped on
      (vector-copy! buffer (+ ins-pos 1) buffer ins-pos (- buffer-sz 1))
      (vector-set! buffer ins-pos value)
      ins-pos))

  (let loop ((loop-idx 0)
             (pos 0))
    (if (= loop-idx nb-spins)
        (vector-ref buffer (+ pos 1))
        (loop (+ loop-idx 1)
              (insert-after (modulo (+ pos offset) (+ loop-idx 1)) (+ loop-idx 1))))))

(define (main args)
  (let* ((for-exercise? (string=? (cadr args) "ex"))
         (nb-spins 2017)
         (buffer (make-circ-buffer (+ nb-spins 1))))
    (for-each
     (lambda (arg)
       (format #t "~a: ~a (ex: ~a, #: ~d) -> ~a~%"
               (car args) arg for-exercise? nb-spins (spinlock buffer nb-spins (string->number arg))))
     (cddr args)))
  0)

<<src-day17-common-main>>
#+END_SRC

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day17-part1

tangled/day17-part1.scm: 3 (ex: #t, #: 2017) -> 638

tangled/day17-part1.scm: 359 (ex: #f, #: 2017) -> 1506
#+END_EXAMPLE

*** Day 17, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day17-part2.scm :noweb no-export
:END:

Reasoning for the short-cut below, assuming that 50 mio runs will take a long time:

- We always one write the next loop index into the buffer and we never increment or decrement a buffer value, so we
  can only have a 0 value at position 0.
- So the value after the 0 will always be at position 1.
- And as we always write to the buffer cell after the current position, we can only write to the cell at position 1
  if our current position is 0.
- So we don't need to update a buffer vector, we only need to memorize the next loop index =(+ loop-idx 1)= every time
  we're at position 0. The last such memorized value will be our result.
- Runtimes with that shortcut are ~4,5 sec for the 50 mio runs.

#+BEGIN_SRC scheme
<<src-day17-common-header>>

(define (simple-spinlock nb-spins offset)
  (let loop ((loop-idx 0)
             (pos 0)
             (value-after-0 0))
    (if (= loop-idx nb-spins)
        value-after-0
        (let ((new-pos (modulo (+ pos offset) (+ loop-idx 1))))
          (if (= new-pos 0)
              (loop (+ loop-idx 1)
                    (+ new-pos 1)
                    (+ loop-idx 1))
              (loop (+ loop-idx 1)
                    (+ new-pos 1)
                    value-after-0))))))

(define (main args)
  (let* ((for-exercise? (string=? (cadr args) "ex"))
         (nb-spins 50000000))
    (for-each
     (lambda (arg)
       (format #t "~a: ~a (ex: ~a, #: ~d) -> ~a~%"
               (car args) arg for-exercise? nb-spins (simple-spinlock nb-spins (string->number arg))))
     (cddr args)))
  0)

<<src-day17-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day17-part2

tangled/day17-part2.scm: 3 (ex: #t, #: 50000000) -> 1222153
4.67user 0.00system 0:04.67elapsed 99%CPU (0avgtext+0avgdata 8576maxresident)k
0inputs+0outputs (0major+1149minor)pagefaults 0swaps

tangled/day17-part2.scm: 359 (ex: #f, #: 50000000) -> 39479736
4.47user 0.00system 0:04.48elapsed 99%CPU (0avgtext+0avgdata 8580maxresident)k
0inputs+0outputs (0major+1146minor)pagefaults 0swaps
#+END_EXAMPLE

** Day 18

*** Source, common parts

#+name: src-day18-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>
#+end_src

#+name: src-day18-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a: ~a (ex: ~a) -> ~a~%"
                              (car args) infile for-exercise? (process-infile infile)))
     (cddr args)))
  0)
#+end_src

*** Day 18, Part 1

**** Data

#+begin_src txt :tangle tangled/day18-part1-exercise.txt
set a 1
add a 2
mul a a
mod a 5
snd a
set a 0
rcv a
jgz a -1
set a 1
jgz a -2
#+end_src

#+begin_src txt :tangle tangled/day18-puzzle.txt
set i 31
set a 1
mul p 17
jgz p p
mul a 2
add i -1
jgz i -2
add a -1
set i 127
set p 464
mul p 8505
mod p a
mul p 129749
add p 12345
mod p a
set b p
mod b 10000
snd b
add i -1
jgz i -9
jgz a 3
rcv b
jgz b -1
set f 0
set i 126
rcv a
rcv b
set p a
mul p -1
add p b
jgz p 4
snd a
set a b
jgz 1 3
snd b
set f 1
add i -1
jgz i -11
snd a
jgz f -16
jgz a -19
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day18-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day18-common-header>>

(define-record-type <program> %make-program #t
  (registers       %program-registers)
  (code-lines      %program-code-lines)
  (snd-freq        program-snd-freq program-snd-freq-set!)
  (done?           program-done? program-done-set!))

(define (make-program lines)
   (%make-program (make-s64vector 26) (list->vector (map compile-line lines)) 0 #f))

(define (run-program prog)
  (let loop ((ip 0) (idx 0))
    (cond
     ((> idx 100000000000)
      (format #f "stop [~2d] -- reg:~a; snd:~a"
              idx (%program-registers prog) (program-snd-freq prog)))
     ((or (< ip 0) (>= ip (vector-length (%program-code-lines prog))))
      (format #f "term [~2d] -- reg:~a; snd:~a"
              idx (%program-registers prog) (program-snd-freq prog)))
     ((program-done? prog)
      (format #f "done [~2d] -- reg:~a; snd:**~a**"
              idx (%program-registers prog) (program-snd-freq prog)))
     (else (let* ((instr (vector-ref (%program-code-lines prog) ip))
                  (offset (instr prog)))
             (loop (+ ip offset) (+ idx 1)))))))

(define (get-value prog r-or-n)
  (if (integer? r-or-n)
      r-or-n
      (if (char<=? #\a (string-ref r-or-n 0) #\z)
          (register prog r-or-n)
          (string->number r-or-n))))

(define (reg->idx reg)
  (- (char->integer (string-ref reg 0)) (char->integer #\a)))

(define (register prog reg)
  (s64vector-ref (%program-registers prog) (reg->idx reg)))

(define (register! prog reg r-or-n)
  (s64vector-set! (%program-registers prog) (reg->idx reg) (get-value prog r-or-n)))

(define (instruction-snd prog x-r-or-n)
  (program-snd-freq-set! prog (get-value prog x-r-or-n))
  1)

(define (instruction-set prog x-reg y-r-or-n)
  (register! prog x-reg y-r-or-n)
  1)

(define (instruction-add prog x-reg y-r-or-n)
  (register! prog x-reg (+ (register prog x-reg) (get-value prog y-r-or-n)))
  1)

(define (instruction-mul prog x-reg y-r-or-n)
  (register! prog x-reg (* (register prog x-reg) (get-value prog y-r-or-n)))
  1)

(define (instruction-mod prog x-reg y-r-or-n)
  (register! prog x-reg (remainder (register prog x-reg) (get-value prog y-r-or-n)))
  1)

(define (instruction-rcv prog x-r-or-n)
  (unless (zero? (get-value prog x-r-or-n))
    (program-done-set! prog #t))
  1)

(define (instruction-jgz prog x-r-or-n y-r-or-n)
  (if (positive? (get-value prog x-r-or-n))
      (get-value prog y-r-or-n)
      1))

(define (compile-line line)
  (match (split-words line)
    (("snd" x-r-or-n)          (lambda (prog) (instruction-snd prog x-r-or-n)))
    (("set" x-reg y-r-or-n)    (lambda (prog) (instruction-set prog x-reg y-r-or-n)))
    (("add" x-reg y-r-or-n)    (lambda (prog) (instruction-add prog x-reg y-r-or-n)))
    (("mul" x-reg y-r-or-n)    (lambda (prog) (instruction-mul prog x-reg y-r-or-n)))
    (("mod" x-reg y-r-or-n)    (lambda (prog) (instruction-mod prog x-reg y-r-or-n)))
    (("rcv" x-r-or-n)          (lambda (prog) (instruction-rcv prog x-r-or-n)))
    (("jgz" x-r-or-n y-r-or-n) (lambda (prog) (instruction-jgz prog x-r-or-n y-r-or-n)))))

(define (process-infile infile)
  (let ((prog (make-program (split-lines (load-txt infile)))))
    (run-program prog)))

<<src-day18-common-main>>
#+END_SRC

Some test invocations for the REPL:

#+BEGIN_EXAMPLE
(when #t
  (let ((prog (make-program '("set a 1" "set b 1"))))
    (run-program prog))

  (let ((prog (make-program '())))
    ((compile-line "set a 27") prog)
    (register prog "a"))

  (let ((prog (make-program '("set a 1"))))
    (instruction-set prog "c" "13")
    (instruction-add prog "c" "4")
    (instruction-mul prog "c" "2")
    (instruction-mod prog "c" "10")
    (list (register prog "c")
          (instruction-snd prog "a")
          (instruction-snd prog "27")
          (instruction-rcv prog "99")
          (program-snd-freq prog))))
#+END_EXAMPLE

Results, for example and puzzle input (1st try):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day18-part1

tangled/day18-part1.scm: tangled/day18-part1-exercise.txt (ex: #t) -> done [12] -- reg:#s64(...); snd:**4**

tangled/day18-part1.scm: tangled/day18-puzzle.txt (ex: #f) -> done [1374] -- reg:#s64(); snd:**1187**
#+END_EXAMPLE

*** Day 18, Part 2

**** Data

#+begin_src txt :tangle tangled/day18-part2-exercise.txt
snd 1
snd 2
snd p
rcv a
rcv b
rcv c
rcv d
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day18-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day18-common-header>>

(define-record-type <program> %make-program #t
  (id              program-id)
  (registers       %program-registers)
  (code-lines      %program-code-lines)
  (snd-count       program-snd-count program-set-snd-count!)
  (own-q           program-own-q)
  (q-to-other      program-q-to-other))

(define (make-program prog-id own-q q-to-other lines)
  (let ((prog (%make-program prog-id (make-s64vector 26) (list->vector (map compile-line lines)) 0 own-q q-to-other)))
    (register! prog "p" prog-id)
    prog))

(define snd-1-count 0)

(define (run-programs prog-0 prog-1)
  (let loop ((ip-0 0) (ip-1 0) (idx 0))
    (cond
     ((> idx 100000000000)
      (format #f "stop [~2d] -- reg-1:~a; ip: ~d/~d; snd-1:~a"
              idx (%program-registers prog-1) ip-0 ip-1 (program-snd-count prog-1)))
     ((or (< ip-0 0) (>= ip-0 (vector-length (%program-code-lines prog-0)))
          (< ip-1 0) (>= ip-1 (vector-length (%program-code-lines prog-1))))
      (format #f "term [~2d] -- reg-1:~a; ip: ~d/~d; snd-1:~a"
              idx (%program-registers prog-1) ip-0 ip-1 (program-snd-count prog-1)))
     (else (let* ((instr-0 (vector-ref (%program-code-lines prog-0) ip-0))
                  (offset-0 (instr-0 prog-0))
                  (instr-1 (vector-ref (%program-code-lines prog-1) ip-1))
                  (offset-1 (instr-1 prog-1)))
             (if (and (zero? offset-0) (zero? offset-1))
                 (format #f "done [~2d] -- reg-1:~a; ip: ~d/~d; offset: ~d/~d; snd-1:**~a/~a**"
                         idx (%program-registers prog-1) ip-0 ip-1 offset-0 offset-1 (program-snd-count prog-1) snd-1-count)
                 (loop (+ ip-0 offset-0)
                       (+ ip-1 offset-1)
                       (+ idx 1))))))))

  (define (get-value prog r-or-n)
    (if (integer? r-or-n)
        r-or-n
        (if (char<=? #\a (string-ref r-or-n 0) #\z)
            (register prog r-or-n)
            (string->number r-or-n))))

  (define (reg->idx reg)
    (- (char->integer (string-ref reg 0)) (char->integer #\a)))

  (define (register prog reg)
    (s64vector-ref (%program-registers prog) (reg->idx reg)))

  (define (register! prog reg r-or-n)
    (s64vector-set! (%program-registers prog) (reg->idx reg) (get-value prog r-or-n)))

  (define (instruction-snd prog x-r-or-n)
    (when (= 1 (program-id prog)) (inc! snd-1-count))
    (list-queue-add-back! (program-q-to-other prog) (get-value prog x-r-or-n))
    (program-set-snd-count! prog (+ (program-snd-count prog) 1))
    1)

  (define (instruction-set prog x-reg y-r-or-n)
    (register! prog x-reg y-r-or-n)
    1)

  (define (instruction-add prog x-reg y-r-or-n)
    (register! prog x-reg (+ (register prog x-reg) (get-value prog y-r-or-n)))
    1)

  (define (instruction-mul prog x-reg y-r-or-n)
    (register! prog x-reg (* (register prog x-reg) (get-value prog y-r-or-n)))
    1)

  (define (instruction-mod prog x-reg y-r-or-n)
    (register! prog x-reg (remainder (register prog x-reg) (get-value prog y-r-or-n)))
    1)

  (define (instruction-rcv prog x-reg)
    (let ((own-q (program-own-q prog)))
      (if (list-queue-empty? own-q)
          (begin
            0)
          (begin
            (register! prog x-reg (list-queue-remove-front! own-q))
            1))))

  (define (instruction-jgz prog x-r-or-n y-r-or-n)
    (if (positive? (get-value prog x-r-or-n))
        (get-value prog y-r-or-n)
        1))

  (define (compile-line line)
    (match (split-words line)
      (("snd" x-r-or-n)          (lambda (prog) (instruction-snd prog x-r-or-n)))
      (("set" x-reg y-r-or-n)    (lambda (prog) (instruction-set prog x-reg y-r-or-n)))
      (("add" x-reg y-r-or-n)    (lambda (prog) (instruction-add prog x-reg y-r-or-n)))
      (("mul" x-reg y-r-or-n)    (lambda (prog) (instruction-mul prog x-reg y-r-or-n)))
      (("mod" x-reg y-r-or-n)    (lambda (prog) (instruction-mod prog x-reg y-r-or-n)))
      (("rcv" x-r-or-n)          (lambda (prog) (instruction-rcv prog x-r-or-n)))
      (("jgz" x-r-or-n y-r-or-n) (lambda (prog) (instruction-jgz prog x-r-or-n y-r-or-n)))))

  (define (process-infile infile)
    (let* ((lines (split-lines (load-txt infile)))
           (q-to-0 (make-list-queue '()))
           (q-to-1 (make-list-queue '()))
           (prog-0 (make-program 0 q-to-0 q-to-1 lines))
           (prog-1 (make-program 1 q-to-1 q-to-0 lines)))
      (run-programs prog-0 prog-1)))

  <<src-day18-common-main>>
#+END_SRC

Testing Gauche / SRFI-??? queues:

#+BEGIN_EXAMPLE
(let ((q (make-list-queue '())))
   (display (list-queue-empty? q))
   (list-queue-add-back! q 1)
   (list-queue-add-back! q 2)
   (display (list-queue-empty? q))
   (display (list-queue-remove-front! q))
   (display (list-queue-remove-front! q))
   (display (list-queue-empty? q)))
#+END_EXAMPLE

Results, for example and puzzle input:

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day18-part2

tangled/day18-part2.scm: tangled/day18-part2-exercise.txt (ex: #t) -> done [ 6] -- reg-1:#s64(...); ip: 6/6; offset: 0/0; snd-1:**3/3**

tangled/day18-part2.scm: tangled/day18-puzzle.txt (ex: #f) -> done [58926] -- reg-1:#s64(...); ip: 21/21; offset: 0/0; snd-1:**5969/5969**
#+END_EXAMPLE

** Day 19

*** Source, common parts

/Note:/ The implementation below is using an explicit formatting of the record type instances as strings instead of
using =write-object=. And for reasons of symmetry it's using =edge-equal?= instead of =object-equal?=.

#+name: src-day19-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>

(define-record-type edge #t #t
  (complete? edge-complete?     edge-complete-set!)
  (labels    edge-labels        edge-labels-set!))

(define-record-type (vert-edge edge) %make-vert-edge #t
  (x         vert-edge-x)
  (y-from    vert-edge-y-from   vert-edge-y-from-set!)
  (y-to      vert-edge-y-to     vert-edge-y-to-set!))

(define-record-type (horz-edge edge) %make-horz-edge #t
  (y         horz-edge-y)
  (x-from    horz-edge-x-from   horz-edge-x-from-set!)
  (x-to      horz-edge-x-to     horz-edge-x-to-set!))

(define (sorted-edge-labels edge)

  (define (%sorted-edge-labels edge-labels from to)
    (sort edge-labels (if (< from to) < >) car))

  (cond
   ((vert-edge? edge)
    (map cdr (%sorted-edge-labels (edge-labels edge) (vert-edge-y-from edge) (vert-edge-y-to edge))))
   ((horz-edge? edge)
    (map cdr (%sorted-edge-labels (edge-labels edge) (horz-edge-x-from edge) (horz-edge-x-to edge))))
   (else (error "No edge" edge))))

(define (make-vert-edge x y-from)
   (%make-vert-edge #f '() x y-from -1))

(define (vert-swap-dir edge)
  (assert (edge-complete? edge))
  (let ((tmp (vert-edge-y-from edge)))
     (vert-edge-y-from-set! edge (vert-edge-y-to edge))
     (vert-edge-y-to-set! edge tmp))
  edge)

(define (vert-edge->string edge)
  (format #f "~a -- x: ~d, yf: ~d, yt: ~d, ~a (~a; ~a)~%"
          'V (vert-edge-x edge) (vert-edge-y-from edge) (vert-edge-y-to edge)
          (edge-labels edge) (edge-complete? edge) (negative? (vert-edge-y-from edge))))

(define (format-vert-edge edge)
  (display (vert-edge->string edge)))

(define (make-horz-edge x-from y)
   (%make-horz-edge #f '() y x-from -1))

(define (horz-swap-dir edge)
  (assert (edge-complete? edge))
  (let ((tmp (horz-edge-x-from edge)))
     (horz-edge-x-from-set! edge (horz-edge-x-to edge))
     (horz-edge-x-to-set! edge tmp))
  edge)

(define (horz-edge->string edge)
  (format #f "~a -- xf: ~d, xt: ~d, y: ~d, ~a (~a)~%"
          'H (horz-edge-x-from edge) (horz-edge-x-to edge) (horz-edge-y edge)
          (edge-labels edge) (edge-complete? edge)))

(define (format-horz-edge edge)
  (display (horz-edge->string edge)))

(define (edge->string edge)
  (cond
   ((vert-edge? edge)
    (vert-edge->string edge))
   ((horz-edge? edge)
    (horz-edge->string edge))
   (else (error "No edge" edge))))

(define (format-edge edge)
  (display (edge->string edge)))

(define (edge-equal? edge-1 edge-2)
  (cond
   ((and (horz-edge? edge-1) (horz-edge? edge-2))
    (and (= (horz-edge-x-from edge-1) (horz-edge-x-from edge-2))
         (= (horz-edge-x-to edge-1)   (horz-edge-x-to edge-2))
         (= (horz-edge-y edge-1)      (horz-edge-y edge-2))))
   ((and (vert-edge? edge-1) (vert-edge? edge-2))
    (and (= (vert-edge-y-from edge-1) (vert-edge-y-from edge-2))
         (= (vert-edge-y-to edge-1)   (vert-edge-y-to edge-2))
         (= (vert-edge-x edge-1)      (vert-edge-x edge-2))))
   (else #f)))
#+end_src

#+name: src-day19-common-main
#+begin_src scheme

(define (parse-line y line edges-in-progress completed-edges)

  (define (extend-vert x edges-in-progress)
    (for-each
     (lambda (edge)
       (when (and (vert-edge? edge) (= (vert-edge-x edge) x))
         (vert-edge-y-to-set! edge y)))
     edges-in-progress)
    edges-in-progress)

  (define (extend-horz x horz-edge)
    (horz-edge-x-to-set! horz-edge x)
    horz-edge)

  (define (complete-horz x horz-edge completed-edges)
    (extend-horz x horz-edge)
    (edge-complete-set! horz-edge #t)
    (cons horz-edge completed-edges))

  (define (label-horz x c horz-edge)
    (push! (edge-labels horz-edge) (cons x c))
    horz-edge)

  (define (try-complete-vert x edges-in-progress completed-edges)
    (let loop ((edges-in-progress-in edges-in-progress)
               (edges-in-progress-out '())
               (edge-completed #f))
      (if (null? edges-in-progress-in)
          (values edge-completed
                  edges-in-progress-out
                  (if edge-completed
                      (cons edge-completed completed-edges)
                      completed-edges))
          (let ((edge (car edges-in-progress-in)))
            (if (and (vert-edge? edge) (= (vert-edge-x edge) x)) ;TODO: isn't it always only vert edges in the in-progrss list
                (begin
                  (vert-edge-y-to-set! edge y)
                  (edge-complete-set! edge #t)
                  (loop (cdr edges-in-progress-in)
                        edges-in-progress-out
                        edge))
                (loop (cdr edges-in-progress-in)
                      (cons edge edges-in-progress-out)
                      edge-completed))))))

  (define (try-label-vert x c edges-in-progress)
    (let loop ((edges-in-progress edges-in-progress))
      (if (null? edges-in-progress)
          #f
          (let ((edge (car edges-in-progress)))
            (if (and (vert-edge? edge) (= (vert-edge-x edge) x))
                (begin
                  (push! (edge-labels edge) (cons x c))
                  #t)
                (loop (cdr edges-in-progress)))))))

  (let loop ((x 0)
             (chars (string->list line))
             (curr-horz-edge #f)
             (edges-in-progress edges-in-progress)
             (completed-edges completed-edges))
    (if (null? chars)
        (values edges-in-progress completed-edges)
        (let ((c (car chars)))
          (cond
           ((char=?  c #\|)
            (if (zero? y)
                (loop (+ x 1)
                      (cdr chars)
                      curr-horz-edge    ;Note: must be #f here
                      (list (make-vert-edge x -1)) ; -1 to mark as 1st line
                      completed-edges)  ;Note: must be '() here
                (loop (+ x 1)
                      (cdr chars)
                      curr-horz-edge
                      (extend-vert x edges-in-progress)
                      completed-edges)))
           ((char=?  c #\-)
            (loop (+ x 1)
                  (cdr chars)
                  (extend-horz x curr-horz-edge) ;Note: curr-horz-edge must not be #f here
                  edges-in-progress
                  completed-edges))
           ((char=?  c #\+)
            (receive (vert-edge-completed? %edges-in-progress %completed-edges)
                (try-complete-vert x edges-in-progress completed-edges)
              (if vert-edge-completed?
                  (loop (+ x 1)
                        (cdr chars)
                        (if curr-horz-edge
                            #f
                            (make-horz-edge x y))
                        %edges-in-progress
                        (if curr-horz-edge
                            (complete-horz x curr-horz-edge %completed-edges)
                            %completed-edges))
                  (loop (+ x 1)
                        (cdr chars)
                        (if curr-horz-edge
                            #f
                            (make-horz-edge x y))
                        (cons (make-vert-edge x y) %edges-in-progress)
                        (if curr-horz-edge
                            (complete-horz x curr-horz-edge %completed-edges)
                            %completed-edges)))))
           ((char<=? #\A c #\Z)
            (if curr-horz-edge
                (loop (+ x 1)
                      (cdr chars)
                      (label-horz x c curr-horz-edge)
                      edges-in-progress
                      completed-edges)
                (if (try-label-vert x c edges-in-progress)
                    (loop (+ x 1)
                          (cdr chars)
                          curr-horz-edge
                          edges-in-progress
                          completed-edges)
                    (loop (+ x 1)
                          (cdr chars)
                          (label-horz x c (make-horz-edge x y))
                          edges-in-progress
                          completed-edges))))
           ((char=?  c #\ )
            (assert (not curr-horz-edge))
            (loop (+ x 1)
                  (cdr chars)
                  curr-horz-edge ; Note: must be #f here
                  edges-in-progress
                  completed-edges))
           (else (error "Bad char" c)))))))

(define (%process-infile infile fn-sorted-edges->result)

  (define (lines->edges)
    (let loop ((y 0)                      ;0 is upper y coordinate (x starts left)
               (lines (split-lines (load-txt infile)))
               (edges-in-progress '())
               (completed-edges '()))
      (if (null? lines)
          (begin
            (assert (null? edges-in-progress))
            completed-edges)
          (receive (%edges-in-progress %completed-edges)
              (parse-line y (car lines) edges-in-progress completed-edges)
            (loop (+ y 1)
                  (cdr lines)
                  %edges-in-progress
                  %completed-edges)))))

  (define (print-edges edges)
    (for-each format-edge edges))

  (define (find-first-edge edges)
    (let loop ((edges edges))
      (if (null? edges)
          (error "No first edge found" edges)
          (let ((edge (car edges)))
            (if (and (vert-edge? edge) (negative? (vert-edge-y-from edge)))
                edge
                (loop (cdr edges)))))))

  (define (sort-edges first-edge edges)

    (define (find-next-edge curr-edge edges)
      (let loop ((l-edges edges))
        (if (null? l-edges)
            (error "Bad edge" (edge->string curr-edge)
                   (string-concatenate (map edge->string edges)))
            (let ((edge (car l-edges)))
              (cond
               ((and (vert-edge? curr-edge) (horz-edge? edge))
                (cond
                 ((and (= (vert-edge-x curr-edge)    (horz-edge-x-from edge))
                       (= (vert-edge-y-to curr-edge) (horz-edge-y edge)))
                  edge)
                 ((and (= (vert-edge-x curr-edge)    (horz-edge-x-to edge))
                       (= (vert-edge-y-to curr-edge) (horz-edge-y edge)))
                  (horz-swap-dir edge))
                 (else
                  (loop (cdr l-edges)))))
               ((and (horz-edge? curr-edge) (vert-edge? edge))
                (cond
                 ((and (= (horz-edge-y curr-edge)    (vert-edge-y-from edge))
                       (= (horz-edge-x-to curr-edge) (vert-edge-x edge)))
                  edge)
                 ((and (= (horz-edge-y curr-edge)    (vert-edge-y-to edge))
                       (= (horz-edge-x-to curr-edge) (vert-edge-x edge)))
                  (vert-swap-dir edge))
                 (else
                  (loop (cdr l-edges)))))
               (else (loop (cdr l-edges))))))))

    (define (except-edge edges edge-to-except)
       (remove (lambda (edge-to-test) (edge-equal? edge-to-test edge-to-except)) edges))

    (let loop ((edges-in (except-edge edges first-edge))
               (sorted-edges (list first-edge))
               (curr-edge first-edge))
      (if (null? edges-in)
          (reverse sorted-edges)
          (let ((next-edge (find-next-edge curr-edge edges)))
            (loop (except-edge edges-in next-edge)
                  (cons next-edge sorted-edges)
                  next-edge)))))

  (let ((edges (lines->edges)))
    (fn-sorted-edges->result (sort-edges (find-first-edge edges) edges))))

(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a: ~a (ex: ~a) -> ~a~%"
                              (car args) infile for-exercise? (process-infile infile)))
     (cddr args)))
  0)
#+end_src

#+BEGIN_EXAMPLE
(let ((ve (make-vert-edge 1 2)))
  (vert-edge-y-to-set! ve 10)
  (push! (edge-labels ve) (cons 3 'A))
  (push! (edge-labels ve) (cons 5 'B))
  (list ve                              ; #<vert-edge 0x1930c40>
        (vert-edge-x ve)
        (edge-labels ve)
        (vert-edge->string ve)
        (sorted-edge-labels ve)))

(let ((ve (make-vert-edge 1 2)))
  (vert-edge-y-to-set! ve 99)) ; Result: xxx-set! does not return the changed instance

(let ((he (make-horz-edge 1 2)))
  (horz-edge-x-to-set! he 10)
  (push! (edge-labels he) '(3 . A))
  (push! (edge-labels he) '(5 . B))
  (list he                              ; #<horz-edge 0x1936fc0>
        (horz-edge-x-from he)
        (horz-edge-x-to he)
        (horz-edge-y he)
        (edge-labels he)
        (horz-edge->string he)
        (sorted-edge-labels he)))

(let ((he (make-horz-edge 1 2)))
  (horz-edge-x-to-set! he 3)
  (edge-complete-set! he #t)
  (horz-swap-dir he)
  (list (horz-edge-x-from he)
        (horz-edge-x-to he)
        (edge-labels he)))
#+END_EXAMPLE

*** Day 19, Part 1

**** Data

#+begin_src txt :tangle tangled/day19-part1-exercise.txt
     |
     |  +--+
     A  |  C
 F---|----E|--+
     |  |  |  D
     +B-+  +--+

#+end_src

#+begin_src txt :tangle tangled/day19-puzzle.txt
                                                                                                                                                                         |
                 +---------------+           +-------------------+         +---+         +-----------------------------------------------------------------------------+ |       +-------------------+
                 |               |           |                   |         |   |         |                                                                             | |       |                   |
           +-----|---------------|-----------------------------------------|------R------|-----------+       +-----------------------+                       +-----+   | |       |                   |
           |     |               |           |                   |         |   |         |           |       |                       |                       |     |   | |       |                   |
           |     |               |           |                   +-----------------------|---+       |       |                 +-----+ +-+                   |     |   | | +-----|-------------------+
           |     |               |           |                             |   |         |   |       |       |                 |       | |                   |     |   | | |     |
           |     |               |           |                   M-----------------------------------|-----+ |                 +-------|---------------+     |     |   +-+ |     |                   +-+
           |     |               |           |                             |   |         |   |       |     | |                         | |             |     |     |       |     |                   | |
           |     |               | +---------|-----------------------------+   |         |   +-------|-------|-------------------------|-----------------------------------|-----|---------------------+
           |     |               | |         |                                 |         |           |     | |                         | |             |     |     |       |     |                   |
           |   +-------------------+         |           +-------+             |         |         +---------|-------------------------|---------------|-------------------------|---+               |
           |   | |               |           |           |       |             |         |         | |     | |                         | |             |     |     |       |     |   |               |
           |   | |               |           |           |   +---|-------------|---------|---------|-|---------------------------------|-+       +-----+     |     |       |     |   |               |
           |   | |               |           |           |   |   |             |         |         | |     | |                         |         |           |     |       |     |   |               |
           |   | |               |           |           |   |   |             |       +-|---------|-|-----|-|-------------------------|-+       |           |     |       |     |   |               |
           |   | |               |           |           |   |   |             |       | |         | |     | |                         | |       |           |     |       |     |   |               |
           |   | |               |           |           |   |   |             |       | |         | |     | |       +-+ +-----------------------------------|---------+   |     |   |               |
           |   | |               |           |           |   |   |             |       | |         | |     | |       | | |             | |       |           |     |   |   |     |   |               |
           |   | |               +-----------------------|---|---|-------------|-------|-----------|-|-----|-|-------|-|-|-----------------------|-----------------|---|---|-----|---|---------------|-+
           |   | |                           |           |   |   |             |       | |         | |     | |       | | |             | |       |           |     |   |   |     |   |               | |
           |   | |                           |           |   |   |             |       | |         | |     | |       | | |             | |       |           |     |   |   |     |   |               | |
           |   | |                           |           |   |   |             |       | |         | |     | |       | | |             | |       |           |     |   |   |     |   |               | |
           |   | |                     +-----|---------------------------+     |     +-|-----------|---------------------|---------------|-+     |   +-------|-------------|-+   | +-----+ +---+     | |
           |   | |                     |     |           |   |   |       |     |     | | |         | |     | |       | | |             | | |     |   |       |     |   |   | |   | | |   | |   |     | |
           |   | |                     +-----|-------------------|-------------+     | | |         | | +---|-|-------------------------|---------|---+       |     |   |   | +---|-+ |   | |   |     | |
           |   | |                           |           |   |   |       |           | | |         | | |   | |       | | |             | | |     |           |     |   |   |     |   |   | |   |     | |
           |   | |                           |   +-------|-----------+   |           | | |         | | |   | |       | | |             | | |     |           |     |   |   |     |   |   | |   |     | |
           |   | |                           |   |       |   |   |   |   |           | | |         | | |   | |       | | |             | | |     |           |     |   |   |     |   |   | |   |     | |
           |   | |                         +-|-----------|---|-------|-----------------|-----------|-------+ |       | | |             | | |     |           |     |   |   |     |   |   | |   |     | |
           |   | |                         | |   |       |   |   |   |   |           | | |         | | |     |       | | |             | | |     |           |     |   |   |     |   |   | |   |     | |
           |   | |         +-----------+   | |   |       |   |   |   |   |           | | |       +-|---------|---------|-----------------------+ |           |     |   |   |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |           | | |       | | | |     |       | | |             | | |   | |           |     |   |   |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |           | | |       | | | |     |       | | |           +-|-+ |   +-|-----------|-----|---+   |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |           | | |       | | | |     |       | | |           | |   |     |           |     |       |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |           | | |       | | | |     |       | | |           | |   |     |           |     |       |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |           | | |       | | | |     |       | | |           | |   |     |           |     |       |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |           | | |       | | | |     |       | | |           | |   |     |           |     |       |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |           | | |       | | | |     |       | | |           | |   |     |           |     |       |     |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |   +---------|-|-----------------------------|-|-------------+   |     |   +-------|-----------------+ |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   |   |   |   |       | | |       | | | |     |       | | |           |     |     |   |       |     |       |   | |   |   | |   |     | |
           |   | |         |           |   +-|-----------------------|-------|---------|---------------------|-------|-|---+         |     |     |   |     +-+   +-------+ |   | |   |   | |   |     | |
           |   | |         |           |     |   |       |   |   |   |   |   |       | | |       | | | |     |       | | | |         |     |     |   |     |     | |     | |   | |   |   | |   |     | |
           |   | |         |           |   +-----|-------|---------+ |   |   |       | | |       | | | |     |       | | | |         |     |     |   |     |     | |     | |   | |   |   | |   |     | |
           |   | |         |           |   | |   |       |   |   | | |   |   |       | | |       | | | |     |       | | | |         |     |     |   |     |     | |     | |   | |   |   | |   |     | |
           |   | | +-------|-----------|-----|---------------|---|-|-----+   |   +-------------+ | | | |     |       | | | |         |     |     |   +-----|-+ +-|-+     +-|-+ | |   |   | |   +-----+ |
           |   | | |       |           |   | |   |       |   |   | | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         | | | |   |   | |           |
           |   | | |       |           |   | |   |       |   |   | | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         | | | |   |   | |           |
           |   | | |       |           |   | |   |       |   |   | | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         | | | |   |   | |           |
   +-+     |   +---|-+     |           |   | |   |       |   |   | | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         | | | |   |   | |           |
   | |     |     | | |     |           |   | |   |       |   |   | | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         | | | |   |   | |           |
 +---------------|-|-|-----|---------+ |   | |   | +---------|---+ | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         | | | |   |   | |           |
 | | |     |     | | |     |         | |   | |   | |     |   |     | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         | | | |   |   | |           |
 | | |     |     | | |     |         +-|-----|---|-|-----|-----------|-------|---|-------|-------|---|-|-----|-------|---|-|---------|-----------|-----------|---|---------|-+ | |   +---------------+ |
 | | |     |     | | |     |           |   | |   | |     |   |     | |       |   |   | | |     | | | | |     |       | | | |         |     |     |         | | | |         |   | |       | |         | |
 +-|-|-----|---------+ +---------------|---|-|---|-|-----|---|---+ +---+     |   |   | | |     | | | | |     |       | | | | +-------|---+ |     |         | | | |         | +-|-|-------|-|-------+ | |
   | |     |     | |   |   |           |   | |   | |     |   |   |   | |     |   |   | | |     | | | | |     |       | | | | |       |   | |     |         | | | |         | | | |       | |       | | |
   | |   +-------|---------------------|---|-------|---------|---|-----|-----|---|-----|-------|-|---|---------------|-----|---------------------|-----------|-|-----------|---|---+     | |       | | |
   | |   | |     | |   |   |           |   | |   | |     |   |   |   | |     |   |   | | |     | | | | |     |       | | | | |       |   | |     H         | | | |         | | | | |     | |       | | |
 +-+ +-----|---+ | |   |   |           |   | |   | |     |   |   |   | |     |   |   | | |     | | | | |     |       | | | | |       |   | |     |         | | | |         | | | | |     | |       +-+ |
 |       | |   | | |   |   |           |   | |   | |     |   |   |   | |     |   |   | | |     | | | | |     |       | | | | |       |   | |     |         | | | |         | | | | |     | |           |
 |   +---|-----|---+   |   |           |   | |   | |     | +-|-------|-|-+   |   |   | | |     | | | | |     |       | | | | |       |   | |     |         | | | |         | | | | |     | |           |
 |   |   | |   | |     |   |           |   | |   | |     | | |   |   | | |   |   |   | | |     | | | | |     |       | | | | |       |   | |     |         | | | |         | | | | |     | |           |
 |   |   | |   | |     |   |           |   | |   | |     | | |   |   | | |   |   |   | | |     | | | | |     |       | | | | |       |   | |     |   +-+   | | | |         | | | | |     | |       +-+ |
 |   |   | |   | |     |   |           |   | |   | |     | | |   |   | | |   |   |   | | |     | | | | |     |       | | | | |       |   | |     |   | |   | | | |         | | | | |     | |       | | |
 |   |   | |   | |     |   |           |   +-----|---------------|-----|-|-------|---|-|-------|-----|-------|---------------+       |   | |     |   | |   | | | |         | | | | |     | |       | | |
 |   |   | |   | |     |   |           |     |   | |     | | |   |   | | |   |   |   | | |     | | | | |     |       | | | |         |   | |     |   | |   | | | |         | | | | |     | |       | | |
 |   |   | |   | |     +---|------------E----+ +-+ |     | | |   |   | | |   |   |   | | |     | | | | | +-----------------|-----------+ | |     |   | |   | | | |         | | | | |   +-|-+       | | |
 |   |   | |   | |         |           |       |   |     | | |   |   | | |   |   |   | | |     | | | | | |   |       | | | |         | | | |     |   | |   | | | |         | | | | |   | |         | | |
 |   |   | |   | |         |           +-------|---|-----|-|-|-----------|-+ | +-|-----------------------|-----------|-|-------------|---|-------|-----|-------|-|-----------|---------+ +-------+ | | |
 |   |   | |   | |         |                   |   |     | | |   |   | | | | | | |   | | |     | | | | | |   |       | | | |         | | | |     |   | |   | | | |         | | | | |             | | | |
 |   |   | |   | |         |               +---|---|-------|-----------+ | | | | |   | +-|-------------+ |   |   +---|---|-|---------|-+ | |     |   | |   | | | |         | | | | |             | | | |
 |   |   | |   | |         |               |   |   |     | | |   |   |   | | | | |   |   |     | | | |   |   |   |   | | | |         |   | |     |   | |   | | | |         | | | | |             | | | |
 |   |   | |   | |         |               |   |   |     | | |   |   |   | | | | |   |   |     | | | |   |   |   |   | | | |         |   | |     |   | |   | | | |         | | | | |             | | | |
 |   |   | |   | |         |               |   |   |     | | |   |   |   | | | | |   |   |     | | | |   |   |   |   | | | |         |   | |     |   | |   | | | |         | | | | |             | | | |
 |   |   | |   | |         |               +-------|-----|-|-|-----+ |   | | | | |   |   |     | | | |   |   |   |   | | | |         |   | |   +-+   | |   | | | |         | | | | |             | | | |
 |   |   | |   | |         |                   |   |     | | |   | | |   | | | | |   |   |     | | | |   |   |   |   | | | |         |   | |   |     | |   | | | |         | | | | |             | | | |
 |   |   | |   | +-+       |                 +-----|-------------|---------|---|-|---|---|-----+ | | |   |   |   |   | | | |         |   | |   |     | |   | | | |         | | | | |             | | | |
 |   |   | |   |   |       |                 | |   |     | | |   | | |   | | | | |   |   |       | | |   |   |   |   | | | |         |   | |   |     | |   | | | |         | | | | |             | | | |
 |   |   | |   |   |       |               +-|-|-----------|-------------|-----------|---|-------|-|-|---|---|---|---|-----------+   |   | |   |     | |   | | | |         | | | | |             | | | |
 |   |   | |   |   |       |               | | |   |     | | |   | | |   | | | | |   |   |       | | |   |   |   |   | | | S     |   |   | |   |     | |   | | | |         | | | | |             | | | |
 +-------|-|---|---|-------------------------|-|---|-----|-----------|---|-----+ +---|-----------|-|-----|---+   |   +-|-----+   +---|---|-----------|---------|-|---------|-----|-|---------+   | | | |
     |   | |   |   |       |               | | |   |     | | |   | | |   | | |       |   |       | | |   |       |     | | | |       |   | |   |     | |   | | | |         | | | | |         |   | | | |
     | +-|-|---|---+       |               | | |   |     | | +-----|-------|---------+   |       | | |   |       |   +-|-|-+ |       |   | |   |     | |   | | | |         | | | | |         +-+ | | | |
     | | | |   |           |               | | |   |     | |     | | |   | | |           |       | | |   |       |   | | |   |       |   | |   |     | |   | | | |         | | | | |           | | | | |
     | | | |   |           |               | | |   |     | |     | | |   | | |           |       | | |   |       |   | | |   |       | +-|-------------------|---+ +---+   | | | | |           | | | | |
     | | | |   |           |               | | |   |     | |     | | |   | | |           |       | | |   |       |   | | |   |       | | | |   |     | |   | | |   |   |   | | | | |           | | | | |
     | | | |   |           |       +-------|-|-----|-------|-------|-|-----|-----------------------|-----|---+   +---|---|-----------|---|-----|-----|-|---|---|---|-------|-|-+ | |           | | | | |
     | | | |   |           |       |       | | |   |     | |     | | |   | | |           |       | | |   |   |       | | |   |       | | | |   |     | |   | | |   |   |   | |   | |           | | | | |
     | | | | +-|---+       |       |       | +-------------------|-|-|---+ | +-----+   +-|-------|---|---------------|-|-|-----------|-|-|-|---|-------|---|-|-|-----------|---+ | |           | | | | |
     | | | | | |   |       |       |       |   |   |     | |     | | |     |       |   | |       | | |   |   |       | | |   |       | | | |   |     | |   | | |   |   |   | | | | |           | | | | |
     | | | | | |   |       |       |       | +-----|-----|-|-----|-|-|-----|---------+ | |       | | |   |   |   +-----------|-------|-----+ +---------------|-----|---|---|-----|-----+       | | | | |
     | | | | | |   |       |       |       | | |   |     | |     | | |     |       | | | |       | | |   |   |   |   | | |   |       | | |   | |     | |   | | |   |   |   | | | | |   |       | | | | |
     | | | | | |   |       |       |       | | |   |     | |     | | |     |       | | | |       | | | +-----|-------+ | |   |       | | |   | |     | |   | | |   |   |   | | | | |   |       | | | | |
     | | | | | |   |       |       |       | | |   |     | |     | | |     |       | | | |       | | | | |   |   |     | |   |       | | |   | |     | |   | | |   |   |   | | | | |   |       | | | | |
     | | | | | |   |       |       |       | | |   |     | |     | | |     |       | | | |       | | | | |   |   |     | |   |       | | |   | |     | |   | | |   |   |   | | | | |   |       | | | | |
     | | | | | |   |       |       |       | | |   |     | |     | | |     |       | | | |       | | | | |   |   |     | |   |       | | |   | |     | |   | | |   |   |   | | | | |   |       | | | | |
 +-------------|-------------------|-------|-|-------------+     | | |     |       | | | |       | | | | |   |   |     | |   |       | | |   | |     | |   | | +---|-+ | +-|-+ | | |   |       | | | | |
 |   | | | | | |   |       |       |       | | |   |     |       | | |     |       | | | |       | | | | |   |   |     | |   |       | | |   | |     | |   | |     | | | | |   | | |   |       | | | | |
 |   | | | | | |   |       |   +-----------|-|-----|-+   |       | | |     |       | | | |       | | | | |   |   |     | |   |       | | |   | |     | |   | |     | | | | |   | +-----|-----+ | | | | |
 |   | | | | | |   |       |   |   |       | | |   | |   |       | | |     |       | | | |       | | | | |   |   |     | |   |       | | |   | |     | |   | |     | | | | |   |   |   |     | | | | | |
 +---|-|-|-----------------|-+ |   |       | | +---|-----|-------|---------|-------|-|---------+ | | | +-|-------|-----+ |   |       | | |   | |     | |   | |     | | | | |   |   |   |     | | | | | |
     | | | | | |   |       | | |   |       | |     | |   |       | | |     |       | | | |     | | | |   |   |   |       |   |       | | |   | |     | |   | |     | | | | |   |   |   |     | | | | | |
     | | | | | |   |       | | +-------------|-----------|-------|---|-----|-------------------|---------|---|---|---------------------|----D----------------|-----|---|-------|---|---|-------|-+ | | |
     | | | | | |   |       | |     |       | |     | |   |       | | |     |       | | | |     | | | |   |   |   |       |   |       | | |   | |     | |   | |     | | | | |   |   |   |     | |   | | |
     | +-|-----------------|-|-----|-------|-------|-----------+ | | |     |       | | | +-----|-|-|-|-----------|-------|-------------|-----|-------|-|-----|-----|-|-----+ +-|---------------|-+ | | |
     |   | | | |   |       | |     |       | |     | |   |     | | | |     |       | | |       | | | |   |   |   |       |   |       | | |   | |     | |   | |     | | | |   | |   |   |     | | | | | |
   +-----|-|-|-----|-------|-|-------------|-|-----|-----|-------|-----------------|-|-------------|-----|---------+     |   |       +-|-------|-----------|---------|-|-|---+ |   |   |     | | | | | |
   | |   | | | |   |       | |     |       | |     | |   |     | | | |     |       | | |       | | | |   |   |   | |     |   |         | |   | |     | |   | |     | | | |     |   |   |     | | | | | |
   | |   | | | |   |       | |     |       | |     | |   |     | | | |     |   +---------------|-|---|-----------------------|---------|-|---|-|-----|-|-----------|-|-|-------|---------------|-+ | | |
   | |   | | | |   |       | |     |       | |     | |   |     | | | |     |   |   | | |       | | | |   |   |   | |     |   |         | |   | |     | |   | |     | | | |     |   |   |     | |   | | |
 +-|-----+ | | |   |   +---|-------|-------|-|-------|---------|-|---|---------|-----|-|-------|-|---|---------------------+ |         | |   | |     | |   | |     | | | |     |   |   |     | |   | | |
 | | |     | | |   |   |   | |     |       | |     | |   |     | | | |     |   |   | | |       | | | |   |   |   | |     | | |         | |   | |     | |   | |     | | | |     |   |   |     | |   | | |
 | | |     | | |   |   |   | |     | +-----|---------|---|-------|-----------------+ | |       | | | |   |   +-----|---------|-+ +-----|-|---|---------------------|---|-|---------|---|---------+ | | |
 | | |     | | |   |   |   | |     | |     | |     | |   |     | | | |     |   |     | |       | | | |   |       | |     | | | | |     | |   | |     | |   | |     | | | |     |   |   |     | | | | | |
 | | |     | | |   |   | +-|-------|-|-----|-|-------|---------|-|-|-------|---------|-|-------------|---|---------|-------|---|---------|-----|-----|-|---------------|-------|---+   |     | | | | | |
 | | |     | | |   |   | | | |     | |     | |     | |   |     | | | |     |   |     | |       | | | |   |       | |     | | | | |     | |   | |     | |   | |     | | | |     |       |     | | | | | |
 | +-+     | | |   |   | | | |     | |     | |     | |   +-----|---|-----------|-------|-------|-|-|-------------|-|-------|---|-------|-|-------------|-----|-----|-|-|---+   |       |     | | | | | |
 |         | | |   |   | | | |     | |     | |     | |         | | | |     |   |     | |       | | | |   |       | |     | | | | |     | |   | |     | |   | |     | | | | |   |       |     | | | | | |
 | +-+     | | |   |   | | | |   +-|-|-----|-------------------|-----|---------------------------|-|---+ | +---+ | |     | | | | |     | |   | |     | |   | |     | | | | |   |       |     | | | | | |
 | | |     | | |   |   | | | |   | | |     | |     | |         | | | |     |   |     | |       | | | | | | |   | | |     | | | | |     | |   | |     | |   | |     | | | | |   |       |     | | | | | |
 | | |     | | |   |   | | | |   | | |     | |     | |   +-----|-|-|-|-------+ +-----|---------|---+ | +-----+ | +-+ +---|-------------|-|---+ |     | |   | |     | | | | |   |       |     | | | | | |
 | | |     | | |   |   | | | |   | | |     | |     | |   |     | | | |     | |       | |       | |   |   | | | |     |   | | | | |     | |     |     | |   | |     | | | | |   |       |     | | | | | |
 | | |     | | |   |   | | | |   | | |     | |     | |   |     | | | |     | |       | |   +---|---------|---|-|-----|-----|-----|-------|-----+     | |   | |   +-+ | | | |   |       |     | | | | | |
 | | |     | | |   |   | | | |   | | |     | |     | |   |     | | | |     | |       | |   |   | |   |   | | | |     |   | | | | |     | |           | |   | |   |   | | | |   |       |     | | | | | |
 | | |     | | |   |   | | | |   | +-------|-|-----|-----|-----|-|---|-------|-------|-|---|-----|---|---------------|---|-|-+ | |     | +-----------|-----+ |   |   | | | |   |       |     | | | | | |
 | | |     | | |   |   | | | |   |   |     | |     | |   |     | | | |     | |       | |   |   | |   |   | | | |     |   | |   | |     |             | |     |   |   | | | |   |       |     | | | | | |
 | | |     | | +---|---|-|-|-|---------------|-----|-|---------|-|---|-----|-----------|-------|-----|-----|---|---------+ |   | |     |             | |     |   |   | | | |   |       |     | | | | | |
 | | |     | |     |   | | | |   |   |     | |     | |   |     | | | |     | |       | |   |   | |   |   | | | |     |     |   | |     |             | |     |   |   | | | |   |       |     | | | | | |
 | | |     | |     |   | | | |   |   |     | |     | |   |     | | | |     | |       | |   |   | |   |   | | | |     +-----------|-----+             | |     |   +-+ | | | |   |       |     | | | | | |
 | | |     | |     |   | | | |   |   |     | |     | |   |     | | | |     | |       | |   |   | |   |   | | | |           |   | |                   | |     |     | | | | |   |       |     | | | | | |
 | | |     | |     |   | | | |   |   |     | |   +---|---+     | | | |   +-|-|-------|-|---------|---|---------|-------+   |   | |                   | |     |     | | | | |   |       |     | | | | +-+
 | | |     | |     |   | | | |   |   |     | |   | | |         | | | |   | | |       | |   |   | |   |   | | | |       |   |   | |                   | |     |     | | | | |   |       |     | | | |
 | | | +---|-|-+   |   | | | |   |   |     | |   | | |         | | | |   | | |       +-+   |   | |   | +-|-----|-------|---------|---------------------|-----------|-|-|-|-------------|-----|-----|-+
 | | | |   | | |   |   | | | |   |   |     | |   | | |         | | | |   | | |             |   | |   | | | | | |       |   |   | |                   | |     |     | | | | |   |       |     | | | | |
 | | | |   | | |   |   | | | |   |   |     | |   | | |         | | | |   | | |             |   | |   | | | | | |       |   |   | |                   | |     |     | | | | |   |       |     | | | | |
 | | | |   | | |   |   | | | |   |   |     | |   | | |         | | | |   | | |             |   | |   | | | | | |       |   |   | |                   | |     |     | | | | |   |       |     | | | | |
 | | | |   | | |   |   | | | |   |   |     | +---|-|-|---------|-|---------|-|-------------|---|-----|-----------------|---|-----|------------------U--------|-----|---|---|---|-------|-------|-|-+ |
 | | | |   | | |   |   | | | |   |   |     |     | | |         | | | |   | | |             |   | |   | | | | | |       |   |   | |                   | |     |     | | | | |   |       |     | | |   |
 | | | |   | | +---|-+ | | | |   |   |     |     | | |         | | | |   | | |         +-+ |   | |   | | | | | |       |   |   | |                   | |     |     | | | | |   |       |     | | | +-+
 | | | |   | |     | | | | | |   |   |     |     | | |         | | | |   | | |         | | |   | |   | | | | | |       |   |   | |                   | |     |     | | | | |   |       |     | | | |
 | | | |   | |   +-|-|-------|---|---|-----------|-|-+         | | | |   | | |         | | |   | |   | | | | | |       |   |   | |       +-----------|-|-----------|---|-------+       |     | | | |
 | | | |   | |   | | | | | | |   |   |     |     | |           | | | |   | | |         | | |   | |   | | | | | |       |   |   | |       |           | |     |     | | | | |           |     | | | |
 | | | |   | |   | | | | | | |   |   |     |     | |           | | | |   | | | +-------|-------+ |   | | | | | |       |   |   | |       |           | |     |     | | | | |           |     | | +-----+
 | | | |   | |   | | | | | | |   |   |     |     | |           | | | |   | | | |       | | |     |   | | | | | |       |   |   | |       |           | |     |     | | | | |           |     | |   |   |
 | | | |   | |   +-----|-|-----------|-----|-----|-------------|-|-|-|---|-----------------------|---|-|-|---|-|-----------|---|---------|-------------------------|-|-|-|-+           |     | |   |   |
 | | | |   | |     | | | | | |   |   |     |     | |           | | | |   | | | |       | | |     |   | | | | | |       |   |   | |       |           | |     |     | | | |             |     | |   |   |
 | | | |   | |     | | +---|-|-------|-----+     | |           | | | |   | | | +---------|-----+ |   | | | | | |       |   |   | |       |           | |     |     +-|-|---------------|-----|-|---|---+
 | | | |   | |     | |   | | |   |   |           | |           | | | |   | | |         | | |   | |   | | | | | |       |   |   | |       |           | |     |       | | |             |     | |   |
 | | | |   +-----+ | |   | | | +-|-----------+   | |           | | | |   +-+ |         | | |   | |   | | | | | +-------------+ +-+       |     +-----|-|---------+   | | |   +---------|-------|---+
 | | | |     |   | | |   | | | | |   |       |   | |           | | | |       |         | | |   | |   | | | | |         |   | |           |     |     | |     |   |   | | |   |         |     | |
 | | +---------------------------|-+ |   +---|---|-------------+ | | | +-------+       | | |   | |   | | | | |         |   | +-------------------------|---------|---+ | |   |         |     | |
 | |   |     |   | | |   | | | | | | |   |   |   | |             | | | |     | |       | | |   | |   | | | | |         |   |             |     |     | |     |   |     | |   |         |     | |
 | |   |     |   | | |   | +-----|-|-------------|---------+     | | +-|-----|-|---------------|-|---|---|-|-----------|-----------------------|-------------|---|-------|-------------|-----|-|-------+
 | |   |     |   | | |   |   | | | | |   |   |   | |       |     | |   |     | |       | | |   | |   | | | | |         |   |             |     |     | |     |   |     | |   |         |     | |       |
 | |   |     |   | | |   |   | | | | +---|---+   +---------+     +-------------|-------|-|---------------|-|-----------|---|-----------------------+ | |     |   |     | |   |         |     | |       |
 | |   |     |   | | |   |   | | | |     |         |               |   |     | |       | | |   | |   | | | | |         |   |             |     |   | | |     |   |     | |   |         |     | |       |
 | |   |     |   +-------|-------|-|---------------|---------------|-----------|-----------|---|-|---|---|-|-|---------|-----------------------|---|-|-------|---------|-|---|---------------+ |     +-+
 | |   |     |     | |   |   | | | |     |         |               |   |     | |       | | |   | |   | | | | |         |   |             |     |   | | |     |   |     | |   |         |       |     |
 | | +-|-----|-----|-----|-----|---------|-----+   | +-------------|---|-----|-|-------|-|-|---|-|---+ | | +-|---------------------------|-------------|-----------------|---------------------|-------+
 | | | |     |     | |   |   | | | |     |     |   | |             |   |     | |       | | |   | |     | |   |         |   |             |     |   | | |     |   |     | |   |         |       |     | |
 | | | +-----|---+ | |   |   | | | |     |     |   +-|-----------+ +-+ | +-+ | |       | | |   | | +---|-|-----------------|-------------------+   | | |     |   |     | |   |         |       |     | |
 | | |       |   | | |   |   | | | |     |     |     |           |   | | | | | |       | | |   | | |   | |   |         |   |             |         | | |     |   |     | |   |         |       |     | |
 | | |   +---+   | | |   |   | | | |     |     |     |           |   | | | | +-+       | | |   +---|-+ +-------------------|-------------|---------|-|-|-----|---|-----|-----------------------|-----+ |
 | | |   |       | | |   |   | | | |     |     |     |           |   | | | |           | | |     | | |   |   |         |   |             |         | | |     |   |     | |   |         |       |       |
 | | |   +-------|-------------|---------------|-----------------------|-|-|-------------|-|-----|---|---|---|-------------------------------------|-|-|--------A|-----|-|-----------+ |       |       |
 | | |           | | |   |   | | | |     |     |     |           |   | | | |           | | |     | | |   |   |         |   |             |         | | |     |   |     | |   |       | |       |       |
 +---------------|-|---------|-|-|-------|-----|-----|---------------------------------|-|-|-----|-------|---|-------------|-------------------------|-----------+     +---------------|-------|-------+
   | |           | | |   |   | | | |     |     |     |           |   | | | |           | | |     | | |   |   |         |   |             |         | | |     |           |   |       | |       |
   | |           | | |   |   | | | +-----------|-----------------|-----|-|-----------------|-----|---|-------|-------------------------------------|-+ |     |           |   |       | |       |
   | |           | | |   |   | | |       |     |     |           |   | | | |           | | |     | | |   |   |         |   |             |         |   |     |           |   |       | |       |
   | |           | | |   |   | | |       |     |     |           |   | | | |           | | |     | | |   |   |         |   |             |         |   |     |           |   |       | |       |
   | |           | | |   |   | | |       |     |     |           |   | | | |           | | |     | | |   |   |         |   |             |         |   |     |           |   |       | |       |
 +-|-|-----------------------------------------------|-----------|-----|---------------|-----------|-------------------------------+     |   +-+   |   |     |           |   |       | |       |
 | | |           | | |   |   | | |       |     |     |           |   | | | |           | | |     | | |   |   |         |   |       |     |   | |   |   |     |           |   |       | |       |
 | | |     +-----|-|-|---|---|---------------------------------------|-----------------|-|-|---------|---------------------|-------+     |   | |   |   | +-----------+   |   |       | |       |
 | | |     |     | | |   |   | | |       |     |     |           |   | | | |           | | |     | | |   |   |         |   |             |   | |   |   | |   |       |   |   |       | |       |
 | | +-----|--K--|-----------|-+ |       +-----|-----|-----------|-----|-|-|---------------------+ | |   | +---------------------------------|-|-------+ |   |       +---|---|-------|---------------+
 | |       |     | | |   |   |   |             |     |           |   | | | |           | | |       | |   | | |         |   |             |   | |   |     |   |           |   |       | |       |     |
 | |       |     | +-----|-------+             |     |           |   | | | |     +-----|-|-|-------|-------|---------------|-----------------|-|-------------|-----------+   |       | +-----+ |     |
 | |       |     |   |   |   |                 |     |           |   | | | |     |     | | |       | |   | | |         |   |             |   | |   |     |   |               |       |       | |     |
 | |     +-+     +-------|---|-----------------|-----------------|-----|---|-----|-----|-|-----------|-------|---------|---------+       |   | |   |     |   |               |       |       | |     |
 | |     |           |   |   |                 |     |           |   | | | |     |     | | |       | |   | | |         |   |     |       |   | |   |     |   |               |       |       | |     |
 | |     |           |   +---------------------|-----+           |   | | | |     |     | | |       | |   | +-|-----------------+ |       |   | |   |     +---|-----------+   |       | +-----|-------+
 | |     |           |       |                 |                 |   | | | |     |     | | |       | |   |   |         |   |   | |       |   | |   |         |           |   |       | |     | |
 | |     +-------------------|-----------------|---------------------|-|-|-|-----+     | +-+       +-----|---------+   |   |   | |       |   | |   |         |           |   |       | |     | |
 | |                 |       |                 |                 |   | | | |           |             |   |   |     |   |   |   | |       |   | |   |         |           |   |       | |     | |
 | |       +-----------------------------------|-------------------------------------------------------------|---------|---|-----------------|-----+         |           |   +-------+ |     | +-+
 | |       |         |       |                 |                 |   | | | |           |             |   |   |     |   |   |   | |       |   | |             |           |             |     |   |
 | |       |         |       |                 |                 |   | | | |           |             +---|---|-----|---+   |   | |       |   | |             |           |             |     |   |
 | |       |         |       |                 |                 |   | | | |           |                 |   |     |       |   | |       |   | |             |           |             |     |   |
 +---------+         +-------|---------------------------------------------|---------------------------------|-----+       |   | +-------+   | |             |           |             +-----|-+ |
   |                         |                 |                 |   | | | |           |                 |   |             |   |             | |             |           |                   | | |
   +-------------------------+                 |                 |   | | +-|-----------|-----------------|-----------------|---|---+         | |   +---------|-----------+                   | | |
                                               |                 |   | |   |           |                 |   |             |   |   |         | |   |         |                               | | |
                                               |                 |   | |   |           |               +---------------------------+         +-|W--+         | +---------------------------+ | | |
                                               |                 |   | |   |           |               | |   |             |   |               |             | |                           | | | |
                                               |         +-------|---+ +---+           +---------------+ +---+             +---+               +-------------------------------------------+ +-+ |
                                               |         |       |                                                                                           | |                                 |
                                               +---------+       +-------------------------------------------------------------------------------------------+ +---------------------------------+

#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day19-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day19-common-header>>
<<src-flatmap>>

(define (sorted-edges->result sorted-edges)
  ;; Note: `flatmap identity' will also tale care to filter out the '() entries:
  (flatmap identity (map sorted-edge-labels sorted-edges)))

(define (process-infile infile)
  (%process-infile infile sorted-edges->result))

<<src-day19-common-main>>
#+END_SRC

/Note:/ Obviously this solution is much too complicated as - other than I assumed - it wasn't necessary to build the
complete graph for task 2.

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day19-part1

tangled/day19-part1.scm: tangled/day19-part1-exercise.txt (ex: #t) -> (A B C D E)

tangled/day19-part1.scm: tangled/day19-puzzle.txt (ex: #f) -> (R U E D A H W K S M)
#+END_EXAMPLE

*** Day 19, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day19-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day19-common-header>>

(define (sorted-edges->result sorted-edges)

  (define (count-steps edge)
    (cond
     ((vert-edge? edge)
      (abs (- (vert-edge-y-from edge) (vert-edge-y-to edge))))
     ((horz-edge? edge)
      (abs (- (horz-edge-x-from edge) (horz-edge-x-to edge))))
     (else (error "No edge" edge))))

  (apply + (map count-steps sorted-edges)))

(define (process-infile infile)
  (%process-infile infile sorted-edges->result))

<<src-day19-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day19-part2

tangled/day19-part2.scm: tangled/day19-part1-exercise.txt (ex: #t) -> 38

tangled/day19-part2.scm: tangled/day19-puzzle.txt (ex: #f) -> 17264
#+END_EXAMPLE

** Day 20

*** Source, common parts

#+name: src-day20-common-header
#+begin_src scheme
<<src-dflt-uses>>
(use gauche.generator)

<<src-assert>>
<<src-txt-io>>

(define (same-values vals new-val min-len)
      (if (< (length vals) (- min-len 1))
          (values #f (cons new-val vals))
          (if (every (lambda (v) (= new-val v)) vals)
              (values #t (cons new-val vals))
              (values #f (list new-val)))))
#+end_src

#+name: src-day20-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a: ~a (ex: ~a) -> ~a~%"
                              (car args) infile for-exercise? (process-infile infile for-exercise?)))
     (cddr args)))
  0)
#+end_src

*** Day 20, Part 1

**** Data

#+BEGIN_EXAMPLE
(rxmatch-substrings (#/p=<\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*>/ "p=< 3,0,0>"))
;; ("p=< 3,0,0>" "3" "0" "0")

(rxmatch-substrings (rxmatch (string->regexp "p=<\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*>") "p=< 3,0,0>"))
;; ("p=< 3,0,0>" "3" "0" "0")

(string-concatenate '("foo" "bar"))
;; "foobar"

(let ((coord "\\s*(\\d+)\\s*"))
   (define (pattern prefix) (format #f "~a=<~a,~a,~a>" prefix coord coord coord))
   (rxmatch-substrings (rxmatch (string->regexp (pattern "p")) "p=< 3,0,0>")))
;; ("p=< 3,0,0>" "3" "0" "0")

(let ((coord "\\s*([+-]?\\d+)\\s*"))
   (define (pattern prefix) (format #f "~a=<~a,~a,~a>" prefix coord coord coord))
   (rxmatch-substrings (rxmatch (string->regexp (pattern "p")) "p=< -3,+1,0>")))
;; ("p=< -3,+1,0>" "-3" "+1" "0")

(let ((coord "\\s*([+-]?\\d+)\\s*"))
   (define (pattern prefix) (format #f "~a=<~a,~a,~a>" prefix coord coord coord))
   (let ((coords (format #f "~a,\\s*~a,\\s*~a" (pattern "p") (pattern "v") (pattern "a"))))
      (rxmatch-substrings (rxmatch (string->regexp coords)
                          "p=< 3,0,0>, v=< 2,0,0>, a=<-1,0,0>"))))
;; ("p=< 3,0,0>, v=< 2,0,0>, a=<-1,0,0>" "3" "0" "0" "2" "0" "0" "-1" "0" "0")

#+END_EXAMPLE

#+begin_src txt :tangle tangled/day20-part1-exercise.txt
p=< 3,0,0>, v=< 2,0,0>, a=<-1,0,0>
p=< 4,0,0>, v=< 0,0,0>, a=<-2,0,0>
#+end_src

#+begin_src txt :tangle tangled/day20-puzzle.txt
p=<1500,413,-535>, v=<-119,22,36>, a=<-5,-12,3>
p=<65,1223,-530>, v=<-14,-136,52>, a=<2,2,0>
p=<260,-387,800>, v=<49,14,-103>, a=<-13,4,4>
p=<429,726,462>, v=<-36,-36,-19>, a=<0,-6,-4>
p=<1705,-165,1331>, v=<-134,9,-104>, a=<-3,0,-3>
p=<341,693,-473>, v=<-28,9,-18>, a=<0,-13,10>
p=<2816,-2250,1464>, v=<-91,41,149>, a=<-4,6,-20>
p=<-1237,-1704,-531>, v=<47,125,35>, a=<1,-4,-1>
p=<-4828,-171,-447>, v=<86,8,-24>, a=<13,0,4>
p=<2553,3286,-5524>, v=<-128,45,41>, a=<3,-9,8>
p=<1065,8038,-3700>, v=<1,-87,17>, a=<-2,-10,6>
p=<1081,-4698,860>, v=<50,113,-43>, a=<-5,2,1>
p=<-4103,102,-7540>, v=<47,-37,137>, a=<5,2,6>
p=<2985,-3162,1516>, v=<40,65,-47>, a=<-8,2,0>
p=<8089,4886,-2404>, v=<-4,28,26>, a=<-15,-11,3>
p=<-188,492,143>, v=<29,78,-27>, a=<-2,-13,2>
p=<1556,2084,1247>, v=<-97,-115,-45>, a=<0,-2,-4>
p=<220,-404,-1241>, v=<-39,-2,0>, a=<3,3,9>
p=<-948,908,751>, v=<102,-16,-99>, a=<-5,-5,6>
p=<676,-2628,-1641>, v=<-8,52,59>, a=<-4,13,5>
p=<-1636,-204,2167>, v=<77,11,-77>, a=<3,0,-7>
p=<-92,-212,615>, v=<23,-65,37>, a=<-2,9,-9>
p=<660,1700,-1217>, v=<-75,-40,41>, a=<4,-8,4>
p=<2428,-284,1007>, v=<-143,-35,-30>, a=<-1,6,-4>
p=<2516,-3412,-577>, v=<-4,101,1>, a=<-18,13,4>
p=<-1551,-1873,-3487>, v=<29,-15,-125>, a=<1,4,13>
p=<-276,3805,-2229>, v=<-61,98,13>, a=<4,-12,3>
p=<-752,5811,1239>, v=<-12,-66,-19>, a=<2,-6,-1>
p=<-6736,1782,-13636>, v=<24,70,156>, a=<10,-7,14>
p=<1169,-819,2123>, v=<124,-81,-45>, a=<-9,6,-1>
p=<31,-1310,-640>, v=<-8,167,15>, a=<0,-9,6>
p=<-1895,-1544,878>, v=<68,76,-53>, a=<13,8,-3>
p=<2382,126,1908>, v=<-112,-6,8>, a=<1,0,-7>
p=<18,-3462,288>, v=<-1,81,13>, a=<0,5,-2>
p=<-1958,317,-1998>, v=<173,40,64>, a=<-7,-6,4>
p=<-818,507,-136>, v=<13,140,-14>, a=<3,-17,2>
p=<3362,-640,-138>, v=<-32,44,18>, a=<-16,-1,-1>
p=<50,-1351,303>, v=<-19,17,22>, a=<2,6,-4>
p=<896,-244,-2424>, v=<-123,-16,31>, a=<8,3,11>
p=<50,197,726>, v=<0,-12,8>, a=<0,0,-5>
p=<698,-2431,2949>, v=<2,77,-144>, a=<-4,6,-2>
p=<-202,-226,-21>, v=<14,97,-17>, a=<0,-9,2>
p=<-1363,998,168>, v=<50,-47,1>, a=<3,-1,-1>
p=<2039,476,1554>, v=<-101,115,0>, a=<-1,-15,-9>
p=<-2992,1664,-2190>, v=<150,-27,113>, a=<2,-7,1>
p=<-4132,2004,373>, v=<47,-37,18>, a=<11,-4,-3>
p=<-1694,2004,-2433>, v=<37,-97,68>, a=<3,1,3>
p=<-1326,-2320,-1835>, v=<33,103,78>, a=<2,0,0>
p=<-1027,1682,1247>, v=<-40,-47,-116>, a=<7,-2,5>
p=<-337,2234,534>, v=<14,-47,-1>, a=<0,-4,-2>
p=<2745,3016,-202>, v=<-24,-81,-29>, a=<-8,-4,3>
p=<-1343,-3402,1983>, v=<99,84,-43>, a=<-2,13,-8>
p=<-272,1460,1303>, v=<-72,-31,-111>, a=<10,-6,4>
p=<1377,-2348,130>, v=<-52,67,21>, a=<-3,8,-3>
p=<2482,1409,1371>, v=<-135,-100,-7>, a=<-1,2,-8>
p=<136,-3334,-2879>, v=<-15,134,108>, a=<1,7,7>
p=<-2754,-614,-873>, v=<74,1,-55>, a=<10,4,12>
p=<136,950,-431>, v=<-6,17,27>, a=<0,-8,0>
p=<272,-1940,-1502>, v=<-5,142,45>, a=<-1,-3,5>
p=<952,-1532,-2743>, v=<-54,-26,118>, a=<0,13,5>
p=<646,4570,-4911>, v=<-54,-65,-31>, a=<2,-4,10>
p=<-7837,3193,-5948>, v=<73,-77,17>, a=<9,-1,9>
p=<1666,3686,6547>, v=<21,-109,-53>, a=<-4,0,-8>
p=<-1731,-1228,580>, v=<163,24,-58>, a=<2,18,0>
p=<399,422,-2410>, v=<-6,-42,197>, a=<-6,0,8>
p=<7537,-5727,-3546>, v=<-129,57,14>, a=<-12,12,9>
p=<-6802,2710,-6328>, v=<58,-11,67>, a=<15,-7,13>
p=<-2616,-3153,1771>, v=<32,120,-15>, a=<5,0,-4>
p=<1804,1046,5307>, v=<-84,-55,-70>, a=<1,1,-10>
p=<2233,-2321,445>, v=<-60,61,-18>, a=<-2,2,0>
p=<2193,-2574,-5336>, v=<-77,45,38>, a=<1,1,5>
p=<3090,1248,319>, v=<80,-33,13>, a=<-8,0,-1>
p=<4299,-1209,-8807>, v=<-111,-70,47>, a=<0,5,9>
p=<6288,-1092,-227>, v=<18,7,47>, a=<-9,1,-2>
p=<-6426,-4992,-1943>, v=<84,-53,111>, a=<4,9,-3>
p=<-5880,-10491,-4751>, v=<90,48,63>, a=<3,11,3>
p=<6210,-8463,670>, v=<-80,76,-176>, a=<-4,7,8>
p=<384,-1868,1875>, v=<-17,72,-18>, a=<0,0,-4>
p=<5376,-672,913>, v=<-47,-1,-35>, a=<-12,2,0>
p=<4856,4489,783>, v=<-27,-24,-57>, a=<-12,-11,2>
p=<-3100,1070,-946>, v=<-18,13,23>, a=<10,-4,1>
p=<-786,-5534,1420>, v=<1,132,-41>, a=<2,6,-1>
p=<2659,-2297,692>, v=<-91,21,95>, a=<-1,5,-9>
p=<-1514,-724,-2584>, v=<-79,1,-22>, a=<10,2,9>
p=<1426,-304,32>, v=<-145,-39,32>, a=<7,5,-3>
p=<1526,2846,-738>, v=<-129,-186,81>, a=<5,4,-4>
p=<356,-114,-2458>, v=<-18,-17,41>, a=<0,2,8>
p=<-719,-741,-2568>, v=<47,35,55>, a=<-1,0,6>
p=<1003,-342,3144>, v=<86,16,-30>, a=<-12,0,-11>
p=<1276,897,-2631>, v=<-59,-21,-8>, a=<0,-2,12>
p=<-1244,-426,-2862>, v=<39,97,69>, a=<2,-7,6>
p=<-530,708,603>, v=<-17,-56,-85>, a=<4,2,5>
p=<-2882,2724,-3114>, v=<-15,-20,81>, a=<14,-10,6>
p=<4552,-1035,624>, v=<-61,82,35>, a=<-14,-3,-6>
p=<2809,1317,-783>, v=<-33,-74,-41>, a=<-9,1,7>
p=<3229,1464,3417>, v=<-119,-81,-153>, a=<-3,1,-1>
p=<1321,1115,5088>, v=<62,70,-117>, a=<-8,-8,-5>
p=<3319,-2611,3711>, v=<-96,26,-80>, a=<-2,5,-4>
p=<916,-316,-744>, v=<7,-59,-41>, a=<-3,5,5>
p=<376,3302,-2526>, v=<-71,45,-87>, a=<4,-12,13>
p=<889,-181,687>, v=<-76,6,32>, a=<3,0,-4>
p=<-2594,-964,1281>, v=<-73,91,52>, a=<12,-4,-7>
p=<1240,3707,-5496>, v=<37,16,23>, a=<-6,-11,13>
p=<-3026,-2017,-4227>, v=<-29,60,-80>, a=<10,1,17>
p=<-5056,959,3746>, v=<34,-37,-136>, a=<13,0,-1>
p=<-7106,-3941,1596>, v=<77,3,-63>, a=<16,12,0>
p=<2194,-591,-3679>, v=<-48,25,31>, a=<-3,0,9>
p=<-2281,284,4771>, v=<131,-23,-47>, a=<-3,1,-11>
p=<5469,1859,-4929>, v=<-166,5,133>, a=<-4,-6,5>
p=<2194,3084,-1279>, v=<-100,-122,26>, a=<1,0,2>
p=<-3781,-1991,2496>, v=<61,42,-8>, a=<7,3,-7>
p=<-4606,-1641,6321>, v=<146,54,-70>, a=<3,1,-14>
p=<5994,2959,-3779>, v=<-148,-65,61>, a=<-7,-4,7>
p=<-1372,142,2651>, v=<63,-130,-5>, a=<0,11,-11>
p=<3101,-2693,3428>, v=<-51,115,-42>, a=<-9,1,-11>
p=<4382,3901,-1213>, v=<-167,-166,36>, a=<-4,-2,2>
p=<1862,-2084,3743>, v=<-80,130,-90>, a=<-1,-3,-8>
p=<-395,-2026,-944>, v=<-2,132,-47>, a=<2,-3,9>
p=<-2675,554,-1744>, v=<28,-18,-28>, a=<10,-1,11>
p=<-1595,-5756,-104>, v=<163,119,37>, a=<-8,16,-3>
p=<-1795,2784,2936>, v=<-16,70,-52>, a=<10,-20,-9>
p=<-1135,-86,166>, v=<14,56,13>, a=<4,-5,-2>
p=<-3989,-76,-5091>, v=<30,65,138>, a=<11,-5,6>
p=<415,-892,1581>, v=<34,-1,135>, a=<-4,3,-16>
p=<-365,-28,-3327>, v=<179,-137,77>, a=<-13,11,5>
p=<2623,3740,-5691>, v=<-8,-94,38>, a=<-8,-5,16>
p=<-497,3020,-2283>, v=<-53,-14,96>, a=<6,-9,0>
p=<403,-904,1737>, v=<22,-13,66>, a=<-3,4,-11>
p=<1195,1460,489>, v=<-61,-74,-107>, a=<1,1,7>
p=<-2009,104,1245>, v=<35,145,24>, a=<4,-12,-6>
p=<-1493,1808,-5115>, v=<101,-76,89>, a=<-3,0,10>
p=<7013,6579,-435>, v=<60,-101,-18>, a=<-18,-7,2>
p=<-3403,-2597,3595>, v=<76,19,-100>, a=<2,4,-1>
p=<-2659,1216,-3752>, v=<-28,-136,-39>, a=<7,6,10>
p=<3200,-4240,2789>, v=<-41,136,6>, a=<-4,0,-6>
p=<3262,-5852,-3690>, v=<-75,28,55>, a=<-2,10,4>
p=<-6503,1836,1487>, v=<112,-12,16>, a=<6,-3,-4>
p=<-3589,8687,1859>, v=<98,-57,36>, a=<1,-14,-6>
p=<7381,-1966,-607>, v=<-29,67,22>, a=<-15,0,0>
p=<595,1659,379>, v=<25,77,33>, a=<-3,-9,-3>
p=<1717,347,26>, v=<-92,-79,34>, a=<-6,7,-5>
p=<-1611,659,2184>, v=<143,-40,-160>, a=<-3,-2,-1>
p=<599,958,988>, v=<-41,-84,-68>, a=<-1,1,-1>
p=<469,438,1638>, v=<-59,-72,-20>, a=<3,5,-15>
p=<1457,-2175,962>, v=<-142,122,-31>, a=<4,6,-6>
p=<-2131,-4,299>, v=<134,32,-106>, a=<4,-5,12>
p=<-1013,-563,1677>, v=<-29,-37,-86>, a=<15,11,-6>
p=<-1312,-563,-871>, v=<22,-23,68>, a=<11,9,0>
p=<677,1504,1495>, v=<-82,-126,-44>, a=<4,1,-10>
p=<-401,-354,-103>, v=<54,101,-37>, a=<-3,-12,8>
p=<787,-1531,-257>, v=<-90,70,31>, a=<3,11,-1>
p=<83,405,-4>, v=<-26,-40,8>, a=<3,0,-1>
p=<-654,1032,-598>, v=<-43,-73,-10>, a=<17,-4,11>
p=<160,273,491>, v=<45,50,-49>, a=<-10,-13,1>
p=<72,-2,-895>, v=<83,9,83>, a=<-15,-2,0>
p=<-797,-1311,-631>, v=<60,26,89>, a=<2,15,-5>
p=<1045,-1354,502>, v=<-56,11,-67>, a=<0,6,4>
p=<-1691,2294,1737>, v=<28,-101,38>, a=<6,-2,-13>
p=<1847,521,-3642>, v=<0,-89,36>, a=<-5,5,7>
p=<1307,1682,30>, v=<-78,-90,40>, a=<2,2,-3>
p=<5411,5192,-5181>, v=<-20,-94,-47>, a=<-13,-7,17>
p=<-1015,-3583,651>, v=<36,105,-25>, a=<0,2,0>
p=<-1196,-512,-1809>, v=<89,-65,105>, a=<0,15,5>
p=<-91,125,102>, v=<-24,40,28>, a=<4,-7,-5>
p=<-1495,996,453>, v=<77,-41,-55>, a=<5,-5,3>
p=<-299,-1500,-1042>, v=<-43,123,-17>, a=<9,-1,14>
p=<1651,-1448,453>, v=<-32,-14,-55>, a=<-14,18,3>
p=<-520,-668,-1289>, v=<-19,10,86>, a=<8,6,2>
p=<-728,632,635>, v=<158,-27,-55>, a=<-15,-3,1>
p=<0,671,1103>, v=<18,-93,-84>, a=<-3,6,0>
p=<-975,1126,869>, v=<65,-37,-157>, a=<1,-7,13>
p=<-6957,4124,-167>, v=<90,-6,95>, a=<10,-9,-6>
p=<-1592,180,4560>, v=<10,-80,37>, a=<3,5,-13>
p=<1482,4849,906>, v=<-36,29,-47>, a=<-1,-13,1>
p=<-1360,-690,732>, v=<-103,10,4>, a=<10,1,-2>
p=<-4811,-5011,471>, v=<31,-21,-17>, a=<9,13,0>
p=<-8262,586,4647>, v=<195,56,-101>, a=<6,-5,-4>
p=<-5594,10214,2588>, v=<148,-66,0>, a=<3,-19,-6>
p=<10593,874,-5911>, v=<-83,109,43>, a=<-14,-8,8>
p=<1419,-9455,-6637>, v=<161,133,48>, a=<-12,9,9>
p=<-3333,280,128>, v=<33,25,-21>, a=<4,-2,1>
p=<-3069,-8300,722>, v=<8,13,-39>, a=<5,14,1>
p=<5973,2029,-3469>, v=<-113,40,20>, a=<-4,-6,5>
p=<-667,2909,-4429>, v=<21,-20,-131>, a=<0,-5,18>
p=<758,1919,5456>, v=<20,44,-11>, a=<-3,-7,-11>
p=<5818,2323,4262>, v=<-79,-70,-68>, a=<-16,-3,-11>
p=<417,-823,-875>, v=<-52,-65,39>, a=<3,9,0>
p=<-2179,-1098,5648>, v=<20,28,-131>, a=<7,2,-11>
p=<681,-944,-523>, v=<5,21,0>, a=<-3,2,2>
p=<-1387,-614,2832>, v=<84,-69,-62>, a=<-2,8,-5>
p=<-628,-1672,3200>, v=<39,13,-66>, a=<-1,5,-6>
p=<522,-3466,49>, v=<-59,55,-13>, a=<3,8,1>
p=<-2537,2146,-227>, v=<-34,51,47>, a=<12,-12,-3>
p=<-582,1295,739>, v=<-47,-32,-67>, a=<6,-2,3>
p=<-610,2649,-2932>, v=<-30,8,52>, a=<5,-11,7>
p=<2525,-607,-3460>, v=<0,-51,76>, a=<-10,7,7>
p=<-577,790,819>, v=<-43,-34,-38>, a=<6,0,0>
p=<3020,2363,-105>, v=<35,-48,27>, a=<-15,-5,-2>
p=<292,163,368>, v=<21,52,-29>, a=<-3,-5,1>
p=<1436,691,-3196>, v=<-31,-110,64>, a=<-3,7,7>
p=<-2007,1439,2766>, v=<91,63,46>, a=<0,-11,-15>
p=<-71,-1146,-2965>, v=<26,77,42>, a=<-2,-2,8>
p=<-3646,2451,-336>, v=<85,63,-20>, a=<7,-15,3>
p=<-730,-1186,2066>, v=<-2,27,-64>, a=<5,5,-6>
p=<3503,-1679,77>, v=<-107,74,-1>, a=<-11,3,0>
p=<2007,-2053,-1368>, v=<-10,168,66>, a=<-12,-5,2>
p=<-543,-387,570>, v=<68,-92,33>, a=<-4,13,-7>
p=<-203,378,2763>, v=<30,-128,-96>, a=<-2,12,-7>
p=<-560,2758,3647>, v=<33,-97,-121>, a=<0,-7,-10>
p=<-577,38,-280>, v=<43,-54,-25>, a=<-1,6,5>
p=<-3161,-802,-1532>, v=<86,26,29>, a=<6,1,4>
p=<-1565,-1096,2731>, v=<43,84,-119>, a=<3,-3,-1>
p=<-158,395,295>, v=<9,13,-25>, a=<0,-3,1>
p=<-1376,143,6469>, v=<-32,-96,-154>, a=<9,8,-14>
p=<73,4238,1513>, v=<-13,-159,-39>, a=<1,-4,-3>
p=<73,1592,1891>, v=<9,-121,53>, a=<-1,4,-13>
p=<703,-2314,1282>, v=<-32,-23,-105>, a=<0,12,4>
p=<-2888,-3826,-2603>, v=<29,-6,14>, a=<10,17,10>
p=<-956,-1789,3361>, v=<25,62,-39>, a=<2,2,-11>
p=<4714,-1600,1345>, v=<-3,119,2>, a=<-20,-4,-6>
p=<-341,-1584,886>, v=<9,82,2>, a=<1,0,-5>
p=<1027,-3104,-1508>, v=<-103,72,88>, a=<5,9,-1>
p=<628,12,1760>, v=<58,38,-144>, a=<-9,-4,5>
p=<-4084,1342,1000>, v=<116,-52,56>, a=<10,-2,-11>
p=<1388,1418,1817>, v=<38,-6,-107>, a=<-11,-7,1>
p=<1654,487,-4453>, v=<-66,-87,53>, a=<-2,6,18>
p=<632,-186,-1501>, v=<-10,45,26>, a=<-3,-4,7>
p=<-1204,-662,-753>, v=<71,-44,144>, a=<0,9,-11>
p=<-1051,1174,-566>, v=<-1,37,-2>, a=<7,-12,4>
p=<1975,1548,-2657>, v=<-17,-75,94>, a=<-11,-2,7>
p=<-3040,1548,-532>, v=<80,-75,-13>, a=<11,-2,5>
p=<-2037,-3416,-1705>, v=<48,172,47>, a=<8,3,6>
p=<1397,2721,233>, v=<-91,-99,59>, a=<1,-7,-8>
p=<-727,94,-946>, v=<24,-36,94>, a=<0,2,-4>
p=<1328,6919,-7711>, v=<-29,-93,180>, a=<-1,-9,5>
p=<4628,-191,-2656>, v=<-77,51,-4>, a=<-5,-3,6>
p=<4808,5914,614>, v=<10,18,-20>, a=<-11,-14,0>
p=<668,-8816,2699>, v=<-131,137,-74>, a=<7,10,-1>
p=<2978,-101,-721>, v=<9,-14,-84>, a=<-7,1,7>
p=<413,3334,1529>, v=<-45,73,58>, a=<2,-12,-7>
p=<-3442,-56,6539>, v=<68,0,-140>, a=<3,0,-5>
p=<1039,1335,128>, v=<-56,-75,-89>, a=<0,0,9>
p=<1174,2631,1478>, v=<-73,-90,-12>, a=<1,-6,-7>
p=<31,-1257,803>, v=<-95,-7,-3>, a=<10,8,-4>
p=<958,-1167,1613>, v=<53,140,-86>, a=<-11,-8,0>
p=<-1049,1335,839>, v=<41,-113,-81>, a=<2,4,4>
p=<-2219,-141,-295>, v=<30,7,134>, a=<10,0,-12>
p=<-1967,2550,2585>, v=<54,0,-45>, a=<6,-15,-10>
p=<-891,-3575,2084>, v=<62,43,-121>, a=<-2,7,3>
p=<-293,1326,-1465>, v=<93,-51,-79>, a=<-6,0,10>
p=<3698,-2262,-2687>, v=<-74,33,-32>, a=<-5,4,10>
p=<162,3224,-3896>, v=<89,-16,55>, a=<-7,-8,7>
p=<-3556,-611,-2219>, v=<151,-44,85>, a=<-1,5,0>
p=<1202,-1443,-5092>, v=<-32,69,128>, a=<-1,-1,5>
p=<6168,-1261,1967>, v=<-88,62,5>, a=<-11,-1,-6>
p=<-8173,10133,282>, v=<170,-53,9>, a=<4,-14,-1>
p=<-4688,-2923,333>, v=<155,-54,-10>, a=<-1,8,0>
p=<-4263,6393,2390>, v=<55,-48,-18>, a=<4,-8,-3>
p=<-472,1259,12743>, v=<31,68,-95>, a=<-1,-6,-16>
p=<-2308,-9910,2645>, v=<50,-6,-8>, a=<1,17,-4>
p=<-2002,-8346,11910>, v=<-29,-52,-53>, a=<5,17,-17>
p=<-489,-6459,-398>, v=<119,85,99>, a=<-6,6,-5>
p=<2418,-1512,-10785>, v=<51,-8,2>, a=<-7,3,18>
p=<-3226,-7547,4940>, v=<7,117,-58>, a=<5,6,-5>
p=<-1883,-2362,1829>, v=<-50,52,-54>, a=<6,1,0>
p=<-104,-2146,-706>, v=<-47,82,78>, a=<6,5,-4>
p=<-3300,149,1538>, v=<-3,19,-36>, a=<22,-3,-6>
p=<865,2121,-1335>, v=<-59,-115,-56>, a=<1,-1,15>
p=<491,-2350,-145>, v=<-37,13,117>, a=<1,14,-12>
p=<-2042,2835,892>, v=<157,-67,-16>, a=<-4,-11,-4>
p=<259,-985,2750>, v=<-92,-12,-33>, a=<7,5,-8>
p=<798,1072,2783>, v=<56,-2,-23>, a=<-8,-4,-9>
p=<-4691,225,1276>, v=<41,2,-35>, a=<15,-1,-2>
p=<2125,2739,2007>, v=<-41,-42,-41>, a=<-1,-2,-1>
p=<-885,-3946,-5588>, v=<45,41,-22>, a=<-1,4,10>
p=<4085,6519,-1808>, v=<-115,12,-40>, a=<0,-11,5>
p=<-2999,-2892,7364>, v=<61,-50,-88>, a=<3,10,-11>
p=<7731,2937,-31>, v=<-84,-56,47>, a=<-12,-3,-3>
p=<-911,-4110,2782>, v=<4,67,-5>, a=<2,5,-6>
p=<-4217,2328,839>, v=<-17,-80,-88>, a=<11,0,4>
p=<-1491,-340,2115>, v=<84,-138,-12>, a=<-2,10,-4>
p=<5092,2966,2376>, v=<22,-72,-126>, a=<-13,-2,3>
p=<-1250,-4251,-7477>, v=<-64,15,41>, a=<5,5,8>
p=<4792,5743,2707>, v=<11,-53,-71>, a=<-7,-5,0>
p=<-6703,-2826,-2100>, v=<21,-3,-81>, a=<8,4,7>
p=<-4032,-444,5776>, v=<55,-6,-144>, a=<10,2,-9>
p=<-3204,177,-1147>, v=<79,51,-59>, a=<5,-5,9>
p=<3305,-2054,141>, v=<-60,40,-7>, a=<-7,4,0>
p=<890,3581,3637>, v=<-15,-25,-135>, a=<-2,-11,-2>
p=<1842,1039,-3622>, v=<-84,-48,28>, a=<0,0,12>
p=<1886,775,-3303>, v=<29,-13,25>, a=<-10,-2,11>
p=<2898,3558,1548>, v=<-109,-59,0>, a=<-2,-9,-6>
p=<632,-644,1779>, v=<-52,86,-91>, a=<2,-5,1>
p=<-358,-1260,2505>, v=<-53,-24,-55>, a=<6,7,-5>
p=<1578,1567,3572>, v=<-3,-72,-23>, a=<-6,0,-12>
p=<-3614,-347,3033>, v=<141,15,13>, a=<2,0,-13>
p=<1105,-6221,129>, v=<-39,167,30>, a=<-1,10,-3>
p=<5076,2315,-311>, v=<-139,-106,-65>, a=<-8,0,7>
p=<2727,-1894,-1187>, v=<-64,98,42>, a=<-8,0,2>
p=<-579,6,-3543>, v=<-20,-12,166>, a=<5,1,2>
p=<2404,709,-1890>, v=<3,61,-61>, a=<-13,-10,16>
p=<1150,-602,390>, v=<-51,20,-31>, a=<-1,1,1>
p=<143,-1704,1701>, v=<42,138,-60>, a=<-5,-5,-3>
p=<2708,-1381,694>, v=<17,1,-17>, a=<-16,7,-2>
p=<979,-1039,-3391>, v=<-62,83,118>, a=<1,-3,6>
p=<2622,993,1733>, v=<-122,-103,-97>, a=<-1,5,1>
p=<312,-1597,2523>, v=<4,-26,-42>, a=<-2,10,-8>
p=<-538,-2877,-517>, v=<-27,59,-16>, a=<5,8,4>
p=<-1462,-3479,-1080>, v=<78,157,0>, a=<1,5,7>
p=<425,-725,433>, v=<30,67,-71>, a=<-6,-3,5>
p=<-1972,-1864,586>, v=<126,8,10>, a=<-1,11,-5>
p=<-1513,-1575,620>, v=<-9,18,-37>, a=<11,8,0>
p=<-119,873,-2491>, v=<26,-18,110>, a=<-2,-4,4>
p=<748,652,518>, v=<-61,22,-40>, a=<2,-7,1>
p=<2584,-2646,-859>, v=<-115,54,104>, a=<-4,11,-6>
p=<-221,-1116,-2304>, v=<86,72,117>, a=<-8,-1,2>
p=<3757,108,-26>, v=<-94,-72,82>, a=<-14,7,-9>
p=<-455,484,-1995>, v=<-55,68,32>, a=<6,-7,4>
p=<3073,-1724,-2607>, v=<-152,85,20>, a=<2,-1,7>
p=<-7043,-5420,5289>, v=<82,89,-84>, a=<17,11,-11>
p=<3505,1096,513>, v=<-170,-45,-85>, a=<2,0,5>
p=<-431,-920,-987>, v=<44,64,115>, a=<-2,-2,-6>
p=<-8771,2980,-723>, v=<179,-86,104>, a=<15,-3,-6>
p=<-923,1264,561>, v=<-98,48,-87>, a=<11,-8,5>
p=<-11,1792,-2019>, v=<39,-49,33>, a=<-3,-2,4>
p=<-435,1273,-382>, v=<-7,-121,-13>, a=<6,3,6>
p=<-461,571,411>, v=<37,17,-67>, a=<0,-9,5>
p=<1034,1481,255>, v=<-50,-102,64>, a=<-4,-2,-12>
p=<1109,-1211,-3947>, v=<-98,-108,-91>, a=<4,11,17>
p=<920,895,-3731>, v=<49,-18,-71>, a=<-6,-1,15>
p=<-1672,-185,-2813>, v=<-65,50,-63>, a=<9,-3,12>
p=<-4291,-4721,454>, v=<-38,36,-2>, a=<14,10,-1>
p=<3512,2596,-329>, v=<-103,-95,55>, a=<-2,0,-3>
p=<2162,-2642,1885>, v=<-193,71,57>, a=<8,2,-9>
p=<2438,-3105,2240>, v=<-85,122,13>, a=<0,-1,-6>
p=<-2086,723,4154>, v=<-34,110,-38>, a=<7,-9,-7>
p=<3424,4377,-1298>, v=<-59,-31,-45>, a=<-4,-8,6>
p=<550,-910,-2884>, v=<60,11,-17>, a=<-8,3,14>
p=<1264,1022,203>, v=<-139,-92,-54>, a=<7,4,4>
p=<1306,2576,1589>, v=<-20,-78,12>, a=<-4,-4,-8>
p=<1474,917,-28>, v=<5,1,155>, a=<-7,-4,-14>
p=<-605,1967,1379>, v=<-17,-115,-110>, a=<4,2,4>
p=<-2999,707,1316>, v=<163,-55,-52>, a=<-2,2,-1>
p=<-2124,85,1333>, v=<-76,97,-1>, a=<19,-10,-7>
p=<-2865,674,-985>, v=<43,-54,-19>, a=<11,2,7>
p=<-699,845,-4215>, v=<-21,-3,121>, a=<6,-4,10>
p=<1182,-1796,-1308>, v=<-30,66,88>, a=<-3,3,-2>
p=<-53,2080,1884>, v=<-75,-48,-100>, a=<8,-6,0>
p=<1828,-1245,1675>, v=<-74,-23,-19>, a=<-2,9,-7>
p=<1790,2859,3784>, v=<38,-109,-110>, a=<-13,-4,-9>
p=<-3245,1909,1751>, v=<143,1,27>, a=<3,-10,-12>
p=<1279,-4391,-2768>, v=<118,19,6>, a=<-13,12,8>
p=<1079,2259,4932>, v=<-4,-91,-68>, a=<-3,0,-10>
p=<3109,1104,4379>, v=<-46,-43,-174>, a=<-6,0,0>
p=<-1866,-2221,-1021>, v=<23,51,16>, a=<4,3,2>
p=<609,-2071,-3171>, v=<41,58,63>, a=<-5,2,5>
p=<3634,1004,2654>, v=<-54,-117,12>, a=<-7,6,-9>
p=<-716,5304,-171>, v=<-10,-94,-31>, a=<3,-9,3>
p=<4930,-4950,-2256>, v=<-35,96,91>, a=<-9,5,-1>
p=<-928,4214,1891>, v=<-28,-40,143>, a=<4,-7,-14>
p=<1682,1343,1456>, v=<-73,59,-82>, a=<1,-7,2>
p=<5394,-4660,-3677>, v=<-186,11,-70>, a=<0,10,13>
p=<-1740,2184,-1705>, v=<-30,-75,12>, a=<6,0,3>
p=<-2378,2851,-2894>, v=<67,-68,-7>, a=<1,-2,7>
p=<-2728,1792,2081>, v=<44,95,-69>, a=<3,-10,0>
p=<7382,-6773,-4144>, v=<-76,24,-32>, a=<-11,13,11>
p=<-6778,-1613,1556>, v=<117,-24,-36>, a=<7,5,-1>
p=<-1870,806,494>, v=<41,-29,-54>, a=<5,-1,3>
p=<360,946,2374>, v=<3,27,-22>, a=<-2,-7,-9>
p=<-1500,1016,-556>, v=<54,-29,72>, a=<2,-2,-4>
p=<870,696,2034>, v=<30,-76,-26>, a=<-7,4,-7>
p=<-390,-3464,644>, v=<-33,69,-51>, a=<5,10,2>
p=<-1180,1486,-476>, v=<17,0,68>, a=<4,-7,-4>
p=<1224,-754,1267>, v=<-14,55,-40>, a=<-10,0,-7>
p=<-1513,891,147>, v=<69,-115,25>, a=<5,7,-5>
p=<-1289,-292,868>, v=<53,97,-34>, a=<5,-10,-4>
p=<-1951,3305,-2253>, v=<-32,-17,79>, a=<7,-7,0>
p=<2123,-4535,1485>, v=<-47,31,47>, a=<-2,9,-7>
p=<-1237,3067,-6145>, v=<-14,-110,44>, a=<4,0,12>
p=<-2287,-1931,-111>, v=<9,170,46>, a=<5,-7,-3>
p=<-2940,427,-2488>, v=<53,-30,21>, a=<3,1,4>
p=<-4140,-203,4397>, v=<62,53,-7>, a=<5,-3,-9>
p=<-3240,-938,-3928>, v=<125,0,100>, a=<-1,2,2>
p=<4020,1147,-4738>, v=<-55,8,65>, a=<-5,-3,6>
p=<-1888,1962,-3057>, v=<-10,99,90>, a=<5,-11,1>
p=<838,1237,2279>, v=<-89,94,-109>, a=<4,-9,2>
p=<7044,-1547,1728>, v=<-153,70,-60>, a=<-6,-1,0>
p=<-3976,-1402,-1230>, v=<152,-10,-63>, a=<-1,4,7>
p=<-5484,-3461,-3840>, v=<69,136,117>, a=<8,-1,1>
p=<-1685,-4911,-4942>, v=<-2,81,170>, a=<4,6,0>
p=<-5861,831,5730>, v=<7,48,-3>, a=<13,-5,-13>
p=<2868,628,1148>, v=<-99,25,65>, a=<0,-3,-7>
p=<-1308,-4766,-4652>, v=<0,61,40>, a=<3,7,8>
p=<-1917,-1721,1699>, v=<-9,-59,-59>, a=<5,8,0>
p=<4897,-13852,5050>, v=<14,-6,-29>, a=<-7,18,-5>
p=<-836,-1606,-6416>, v=<41,-20,-35>, a=<-1,3,10>
p=<-9338,5648,-9068>, v=<-1,-6,73>, a=<12,-7,8>
p=<-7778,-9679,-2360>, v=<39,47,81>, a=<8,10,-1>
p=<7978,11537,6649>, v=<-25,-57,-30>, a=<-9,-12,-7>
p=<-8870,-3517,3022>, v=<-73,-71,63>, a=<15,8,-7>
p=<334,9821,682>, v=<51,67,-117>, a=<-3,-16,5>
p=<-378,289,-2545>, v=<-115,19,22>, a=<12,-3,9>
p=<672,184,2159>, v=<-66,123,-81>, a=<3,-12,-2>
p=<-2583,2620,-4456>, v=<23,7,58>, a=<9,-12,14>
p=<4662,1507,500>, v=<-135,-17,-57>, a=<-8,-5,3>
p=<-1533,2536,1403>, v=<39,-66,43>, a=<3,-5,-10>
p=<714,919,122>, v=<-68,-66,-39>, a=<3,2,3>
p=<21,-2588,-3931>, v=<53,-31,154>, a=<-5,14,3>
p=<1575,1255,1655>, v=<-65,-60,42>, a=<-1,0,-11>
p=<-2961,-404,-2818>, v=<184,30,101>, a=<-4,-1,3>
p=<-2961,1465,-3280>, v=<52,51,-9>, a=<8,-11,15>
p=<446,81,-335>, v=<-29,-42,-22>, a=<-2,6,8>
p=<193,510,-720>, v=<-6,-87,31>, a=<-2,7,5>
p=<-214,-2196,853>, v=<7,141,-28>, a=<2,10,-9>
p=<-49,48,-984>, v=<10,-21,1>, a=<-1,3,14>
p=<-1237,719,-621>, v=<82,-10,4>, a=<5,-9,8>
p=<-104,1709,171>, v=<63,-136,-50>, a=<-9,-3,5>
p=<611,-513,-1215>, v=<-38,0,82>, a=<-3,8,4>
p=<-1138,-1954,-742>, v=<1,125,21>, a=<17,9,7>
p=<1227,587,-841>, v=<-82,2,6>, a=<-5,-9,11>
p=<820,-1019,1414>, v=<-93,76,-109>, a=<3,3,-4>
p=<-2978,8304,-1519>, v=<30,-106,-23>, a=<5,-12,5>
p=<-2137,-889,5441>, v=<106,-74,-38>, a=<-2,7,-10>
p=<-629,5259,-533>, v=<69,-61,78>, a=<-3,-8,-4>
p=<10318,3176,-4795>, v=<-111,31,89>, a=<-11,-7,3>
p=<3246,4315,-2262>, v=<-78,-55,67>, a=<-1,-4,0>
p=<-2381,5199,2872>, v=<35,-11,126>, a=<2,-8,-12>
p=<6051,-6140,-2381>, v=<-38,60,-122>, a=<-8,7,11>
p=<-1925,445,1736>, v=<31,-85,-133>, a=<7,6,4>
p=<1571,-1683,3617>, v=<-43,57,-62>, a=<-4,3,-13>
p=<184,2003,-734>, v=<10,-97,-63>, a=<-2,-1,10>
p=<-1583,-3070,368>, v=<63,150,-1>, a=<2,1,-2>
p=<2255,-1550,1527>, v=<-79,-110,-72>, a=<-4,19,-1>
p=<-595,65,3256>, v=<51,-5,-203>, a=<-2,0,3>
p=<-766,2839,-1580>, v=<-35,-67,29>, a=<7,-7,5>
p=<-116,-2071,1060>, v=<48,63,-19>, a=<-4,4,-3>
p=<-3386,-2081,-1570>, v=<159,11,81>, a=<1,9,0>
p=<1604,1409,470>, v=<25,-48,-42>, a=<-10,-2,2>
p=<-3586,-511,290>, v=<64,6,51>, a=<11,2,-6>
p=<-596,429,-3420>, v=<-12,-20,58>, a=<4,0,11>
p=<704,539,1230>, v=<70,-78,-59>, a=<-10,5,0>
p=<3944,-4401,1840>, v=<-113,148,-16>, a=<-8,7,-7>
p=<-456,3089,1380>, v=<65,-69,7>, a=<-4,-8,-7>
p=<1714,1789,-780>, v=<-96,59,-53>, a=<1,-14,9>
p=<1943,-411,2163>, v=<0,20,-14>, a=<-16,1,-16>
p=<98,-1566,603>, v=<11,49,74>, a=<-2,7,-14>
p=<-502,-2541,-342>, v=<3,82,-95>, a=<4,11,15>
p=<263,-291,1473>, v=<72,12,-112>, a=<-11,1,2>
p=<1688,-381,-567>, v=<-143,-22,-40>, a=<4,6,10>
p=<-682,519,2883>, v=<23,-10,-118>, a=<3,-3,-9>
p=<383,744,-72>, v=<8,-1,79>, a=<-4,-6,-9>
p=<443,9,168>, v=<52,0,71>, a=<-10,0,-10>
p=<-1387,-2950,-247>, v=<115,110,-16>, a=<-4,6,3>
p=<-730,-1438,-2092>, v=<12,83,77>, a=<3,0,4>
p=<2276,695,-301>, v=<-22,-26,44>, a=<-11,-1,-3>
p=<628,-3534,-2913>, v=<-39,-38,186>, a=<1,15,-5>
p=<-140,1326,603>, v=<-107,-28,-23>, a=<9,-2,0>
p=<1480,-1650,2583>, v=<13,71,-43>, a=<-6,0,-5>
p=<-824,-366,-657>, v=<59,-20,-108>, a=<-2,3,11>
p=<1168,-426,-2625>, v=<1,20,74>, a=<-4,0,3>
p=<-260,2154,2079>, v=<-2,0,78>, a=<1,-7,-13>
p=<-128,2286,3579>, v=<55,32,-122>, a=<-4,-10,-2>
p=<-3812,1686,27>, v=<-29,-43,-24>, a=<15,-2,2>
p=<-33,-807,1257>, v=<-20,31,-83>, a=<4,4,-2>
p=<942,-1249,685>, v=<-67,79,-53>, a=<0,2,0>
p=<-423,-1119,191>, v=<-32,-15,-15>, a=<10,14,0>
p=<2772,-7072,-3749>, v=<-53,-94,34>, a=<-2,19,5>
p=<-3052,3008,5659>, v=<-3,-13,-128>, a=<6,-5,-3>
p=<2980,-11056,-2565>, v=<56,80,30>, a=<-9,16,3>
p=<4676,3696,7083>, v=<-162,-51,-90>, a=<1,-4,-8>
p=<-492,2224,379>, v=<82,-71,-62>, a=<-4,0,3>
p=<3332,-1264,8443>, v=<-54,104,-17>, a=<-3,-4,-15>
p=<-1196,11904,-3445>, v=<-28,-126,-25>, a=<4,-15,8>
p=<244,2096,8779>, v=<-7,65,22>, a=<0,-8,-18>
p=<-1502,113,127>, v=<3,-41,-53>, a=<12,4,6>
p=<-1112,233,-548>, v=<65,15,40>, a=<1,-4,0>
p=<73,-2377,-458>, v=<10,-3,42>, a=<-2,20,-1>
p=<-632,-1537,-188>, v=<-31,-3,48>, a=<9,13,-4>
p=<253,8,1267>, v=<14,-2,-57>, a=<-4,0,-3>
p=<-2342,-1792,517>, v=<67,54,1>, a=<11,8,-4>
p=<-1607,1193,37>, v=<2,-81,-103>, a=<13,0,13>
p=<-3302,-232,-2588>, v=<123,6,32>, a=<12,1,18>
p=<156,-333,2057>, v=<58,-71,-52>, a=<-6,8,-4>
p=<-75,969,-2017>, v=<25,-12,10>, a=<-2,-3,8>
p=<30,-4869,1469>, v=<-156,35,-46>, a=<14,18,-2>
p=<-3204,1200,-2374>, v=<86,-100,27>, a=<6,4,8>
p=<2907,1137,-2815>, v=<-18,24,26>, a=<-11,-7,10>
p=<-278,189,-3099>, v=<3,-12,51>, a=<1,0,11>
p=<-468,930,-2928>, v=<43,-21,102>, a=<-2,-3,5>
p=<-2045,-210,207>, v=<-44,-11,-23>, a=<15,2,1>
p=<596,4369,-420>, v=<-113,-42,0>, a=<8,-19,2>
p=<-829,-96,-1921>, v=<-8,13,129>, a=<5,-1,-3>
p=<2914,-780,1537>, v=<-85,29,7>, a=<-7,1,-9>
p=<667,-850,-181>, v=<18,13,-9>, a=<-5,3,2>
p=<952,404,3961>, v=<33,67,-117>, a=<-8,-9,-9>
p=<-4083,689,3182>, v=<58,-38,-36>, a=<16,0,-13>
p=<3669,2627,1586>, v=<-70,-20,-12>, a=<-12,-12,-7>
p=<1731,-204,-1549>, v=<-88,69,63>, a=<0,-6,2>
p=<-2525,366,1909>, v=<16,39,31>, a=<12,-6,-13>
p=<420,3862,-200>, v=<-19,-105,-18>, a=<0,-10,3>
p=<1256,-1382,-390>, v=<-63,61,-8>, a=<0,1,3>
p=<1284,1741,445>, v=<-113,-41,68>, a=<4,-8,-11>
p=<-780,885,885>, v=<-1,-47,-36>, a=<6,-1,-2>
p=<796,-1587,-731>, v=<-74,99,48>, a=<3,0,0>
p=<1036,-1859,1717>, v=<30,-3,-20>, a=<-11,14,-10>
p=<52,669,325>, v=<-2,9,-103>, a=<0,-6,10>
p=<1724,-2675,-379>, v=<-149,99,9>, a=<5,8,2>
p=<-3652,989,-435>, v=<136,-96,4>, a=<11,4,3>
p=<-660,-427,-1139>, v=<119,69,116>, a=<-9,-5,-5>
p=<-1054,-503,-2618>, v=<41,30,114>, a=<3,0,6>
p=<1594,2001,-10>, v=<-31,-16,19>, a=<-8,-13,-2>
p=<1946,-839,-2250>, v=<-121,-34,91>, a=<0,10,6>
p=<1882,-311,2262>, v=<-15,35,-55>, a=<-12,-2,-10>
p=<1642,1073,206>, v=<-51,-77,-54>, a=<-6,1,5>
p=<2154,817,326>, v=<-66,58,32>, a=<-8,-13,-6>
p=<-1726,2617,1662>, v=<100,-80,-43>, a=<1,-10,-7>
p=<-2662,2545,-130>, v=<48,-101,18>, a=<14,-7,-1>
p=<1799,2271,3676>, v=<-122,-39,-86>, a=<4,-3,-3>
p=<-7371,-5583,2892>, v=<133,82,-116>, a=<9,8,1>
p=<2107,-1761,246>, v=<-17,18,51>, a=<-4,3,-4>
p=<-4627,-1453,2738>, v=<122,94,-9>, a=<3,-3,-6>
p=<917,-1173,2164>, v=<69,-32,113>, a=<-7,5,-13>
p=<-2821,493,-5214>, v=<14,39,-15>, a=<6,-4,14>
p=<-497,3503,-5102>, v=<18,-141,126>, a=<0,1,4>
p=<-5789,1613,2206>, v=<149,-30,39>, a=<4,-2,-8>
p=<1855,-2881,2850>, v=<-153,87,-100>, a=<6,1,0>
p=<-1437,-2510,2378>, v=<3,51,-5>, a=<6,6,-10>
p=<-2256,871,-1654>, v=<-24,-33,0>, a=<12,-1,7>
p=<474,-746,-562>, v=<-22,-33,3>, a=<0,6,2>
p=<-998,-5851,-402>, v=<103,189,123>, a=<-5,10,-10>
p=<2902,-1171,-1782>, v=<-113,18,45>, a=<-3,4,4>
p=<-1268,1779,-372>, v=<1,-14,-57>, a=<6,-7,7>
p=<532,-2881,-402>, v=<121,30,18>, a=<-14,11,0>
p=<-1248,-3501,-3432>, v=<63,124,-9>, a=<0,5,17>
p=<-868,-531,-3632>, v=<44,49,43>, a=<0,-2,13>
p=<6474,-2376,-1510>, v=<15,-67,32>, a=<-14,9,1>
p=<-3136,-6375,-9105>, v=<85,-2,149>, a=<1,13,9>
p=<863,6614,1218>, v=<84,-37,-72>, a=<-7,-11,2>
p=<-966,197,7170>, v=<31,-150,-40>, a=<0,9,-12>
p=<-3446,-2655,6302>, v=<-33,38,-156>, a=<9,3,-3>
p=<4397,-3709,-1076>, v=<-62,56,-62>, a=<-5,4,6>
p=<-322,-1160,-2709>, v=<-31,16,88>, a=<6,6,8>
p=<2024,-2316,2510>, v=<-88,75,-39>, a=<-3,7,-12>
p=<-50,1118,1184>, v=<-56,-19,-24>, a=<7,-5,-5>
p=<-12607,-1099,3400>, v=<98,83,8>, a=<18,-3,-7>
p=<-783,-747,-6216>, v=<-24,-93,-71>, a=<3,7,16>
p=<-558,-2190,4022>, v=<61,-16,-43>, a=<-3,8,-9>
p=<-4358,-540,-6053>, v=<18,100,87>, a=<12,-6,12>
p=<2642,2960,-1303>, v=<-41,-1,53>, a=<-5,-9,0>
p=<-1408,1010,6972>, v=<-48,-40,-187>, a=<8,0,-7>
p=<-1433,-5540,-5403>, v=<135,66,74>, a=<-6,12,11>
p=<217,-4115,2747>, v=<-35,126,-70>, a=<2,3,-3>
p=<1792,5685,-2253>, v=<97,-71,91>, a=<-13,-12,0>
p=<-158,1210,172>, v=<71,121,111>, a=<-5,-13,-9>
p=<-858,-3615,-3303>, v=<-18,15,159>, a=<4,10,-2>
p=<-6083,-5215,-1353>, v=<61,14,55>, a=<14,15,0>
p=<1908,1058,-75>, v=<60,-95,57>, a=<-10,4,-4>
p=<907,4204,-4820>, v=<31,-81,-44>, a=<-5,-6,17>
p=<3637,-411,-2246>, v=<34,29,-35>, a=<-13,-1,9>
p=<1362,-4155,-283>, v=<54,11,-43>, a=<-8,11,4>
p=<4701,-9467,8834>, v=<-133,37,-37>, a=<0,13,-12>
p=<-5204,2713,-3871>, v=<6,31,2>, a=<8,-6,6>
p=<-2016,-470,-1992>, v=<-286,-72,-288>, a=<19,6,19>
p=<-2067,-2051,-1458>, v=<-296,-291,-207>, a=<20,22,10>
p=<-1027,-2595,-500>, v=<-147,-371,-71>, a=<8,27,7>
p=<-71,-3053,486>, v=<-10,-430,69>, a=<-1,33,-5>
p=<1668,359,-2327>, v=<238,50,-329>, a=<-15,-4,28>
p=<2009,537,-2278>, v=<284,76,-324>, a=<-14,-8,17>
p=<-773,2518,931>, v=<-112,357,135>, a=<5,-23,-5>
p=<411,802,2157>, v=<63,108,308>, a=<-5,-10,-21>
p=<-1874,107,2417>, v=<-266,18,347>, a=<12,-5,-26>
p=<2244,-2094,35>, v=<317,-298,9>, a=<-17,22,3>
p=<-1796,1907,1218>, v=<-255,270,175>, a=<20,-21,-10>
p=<-2128,1882,-1395>, v=<-311,268,-196>, a=<19,-16,11>
p=<1115,1844,-2272>, v=<159,260,-324>, a=<-4,-20,26>
p=<2896,560,152>, v=<414,77,25>, a=<-33,-8,1>
p=<2896,1485,547>, v=<413,210,80>, a=<-23,-14,-6>
p=<2936,-363,123>, v=<419,-49,19>, a=<-29,0,-2>
p=<1380,-388,-3156>, v=<197,-55,-448>, a=<-19,0,30>
p=<-240,-2621,-1687>, v=<-32,-368,-241>, a=<6,23,15>
p=<-2151,-239,1867>, v=<-310,-37,268>, a=<21,-4,-19>
p=<-2715,494,1671>, v=<-384,70,236>, a=<31,-3,-16>
p=<1594,442,2371>, v=<231,60,340>, a=<-13,-5,-25>
p=<-387,2027,1630>, v=<-55,284,232>, a=<-1,-21,-21>
p=<873,2025,1551>, v=<131,291,220>, a=<-8,-22,-16>
p=<-2969,370,26>, v=<-429,50,2>, a=<28,-5,-1>
p=<2798,897,-1992>, v=<400,125,-287>, a=<-33,-8,25>
p=<-1072,892,-2424>, v=<-153,127,-354>, a=<10,-5,23>
p=<1194,-2051,-1285>, v=<166,-290,-186>, a=<-13,25,16>
p=<-304,-2224,-1635>, v=<-39,-313,-229>, a=<7,22,16>
p=<498,1066,2607>, v=<74,151,370>, a=<-11,-12,-30>
p=<3622,401,268>, v=<514,57,32>, a=<-34,-4,-2>
p=<-1957,-506,-2453>, v=<-285,-66,-348>, a=<16,3,23>
p=<-1362,-501,-2102>, v=<-195,-65,-299>, a=<18,7,19>
p=<1933,1724,1334>, v=<279,246,189>, a=<-25,-21,-14>
p=<-2142,1260,-2152>, v=<-311,181,-314>, a=<22,-12,23>
p=<-347,-1371,-2579>, v=<-51,-196,-371>, a=<6,16,25>
p=<1083,2704,106>, v=<151,385,17>, a=<-12,-30,4>
p=<-2820,1697,811>, v=<-400,242,120>, a=<32,-16,-6>
p=<-1104,2720,-1534>, v=<-156,388,-219>, a=<11,-26,17>
p=<589,-751,2836>, v=<81,-108,406>, a=<-1,3,-27>
p=<-1067,-1168,2214>, v=<-152,-161,317>, a=<10,11,-22>
p=<-1207,-366,2703>, v=<-172,-52,381>, a=<17,3,-34>
p=<-1192,-3124,-321>, v=<-173,-452,-44>, a=<7,33,7>
p=<2232,-893,1778>, v=<319,-128,255>, a=<-22,9,-21>
p=<1871,-460,2230>, v=<269,-65,321>, a=<-17,4,-22>
p=<-2409,-753,795>, v=<-344,-106,113>, a=<20,4,-4>
p=<1280,386,-2672>, v=<181,53,-383>, a=<-8,-4,29>
p=<3029,1184,391>, v=<433,169,56>, a=<-25,-6,-2>
p=<1127,-737,2201>, v=<161,-105,311>, a=<-10,13,-20>
p=<-2639,-1118,-1104>, v=<-380,-159,-163>, a=<26,7,13>
p=<1096,258,3149>, v=<158,36,449>, a=<-7,1,-32>
p=<1163,2004,2321>, v=<166,283,330>, a=<-12,-25,-20>
p=<2115,-918,-1957>, v=<309,-131,-279>, a=<-20,13,18>
p=<-1432,1051,2016>, v=<-205,149,290>, a=<15,-10,-18>
p=<-1889,2232,-912>, v=<-271,317,-126>, a=<21,-19,3>
p=<-2217,1395,1388>, v=<-313,196,202>, a=<22,-17,-13>
p=<-1257,-704,-2330>, v=<-180,-100,-331>, a=<12,7,27>
p=<-1663,1076,-1905>, v=<-234,150,-270>, a=<16,-10,19>
p=<1327,1340,2125>, v=<189,195,302>, a=<-13,-11,-20>
p=<-1280,-739,-2082>, v=<-179,-107,-300>, a=<11,4,21>
p=<-1554,-998,2380>, v=<-222,-143,342>, a=<19,3,-27>
p=<679,-2132,2115>, v=<95,-305,299>, a=<-3,18,-22>
p=<-217,2813,-1020>, v=<-35,399,-142>, a=<3,-28,9>
p=<2867,-866,-1319>, v=<409,-125,-184>, a=<-28,5,10>
p=<-1320,1952,2228>, v=<-188,280,317>, a=<13,-20,-17>
p=<-1304,-1233,2264>, v=<-186,-174,319>, a=<17,12,-22>
p=<-2692,-721,-888>, v=<-382,-103,-129>, a=<20,3,9>
p=<-1976,-1554,-1752>, v=<-275,-218,-250>, a=<20,9,19>
p=<-1203,2819,-1294>, v=<-172,405,-185>, a=<11,-27,14>
p=<-2327,2241,449>, v=<-334,326,62>, a=<24,-24,-2>
p=<-2067,2050,1210>, v=<-295,297,169>, a=<20,-15,-7>
p=<1378,2394,527>, v=<190,344,70>, a=<-11,-22,-5>
p=<-1488,-2886,-992>, v=<-212,-413,-148>, a=<10,29,8>
p=<-1696,2898,-319>, v=<-245,413,-45>, a=<12,-28,2>
p=<3098,797,-510>, v=<440,113,-67>, a=<-32,-7,6>
p=<-2871,-578,-611>, v=<-410,-82,-88>, a=<24,5,5>
p=<1034,-1285,-2480>, v=<146,-185,-354>, a=<-10,15,22>
p=<879,1740,1198>, v=<122,246,168>, a=<-10,-16,-12>
p=<3168,1337,-308>, v=<448,191,-40>, a=<-31,-13,3>
p=<3035,-1149,893>, v=<434,-163,126>, a=<-27,9,-9>
p=<-947,-2705,656>, v=<-131,-387,93>, a=<8,25,-3>
p=<500,-2393,1363>, v=<77,-348,193>, a=<0,23,-8>
p=<-1882,1920,796>, v=<-268,272,115>, a=<19,-17,-3>
p=<-960,493,-2623>, v=<-139,68,-374>, a=<9,-8,21>
p=<1828,-2071,1203>, v=<259,-291,167>, a=<-18,21,-9>
p=<-1604,1283,-1649>, v=<-230,181,-239>, a=<18,-14,16>
p=<-1799,2321,-868>, v=<-252,330,-119>, a=<22,-21,8>
p=<-24,2346,-1669>, v=<-7,335,-243>, a=<4,-22,19>
p=<-876,-1276,2680>, v=<-123,-188,378>, a=<10,14,-26>
p=<-2889,1176,545>, v=<-415,168,80>, a=<32,-11,-7>
p=<-86,1176,2086>, v=<-12,168,300>, a=<-1,-7,-20>
p=<-402,-2477,807>, v=<-57,-353,119>, a=<4,27,-2>
p=<-1970,-1448,-1967>, v=<-278,-202,-283>, a=<19,12,24>
p=<631,-958,-2998>, v=<89,-136,-432>, a=<-8,10,33>
p=<-1785,1056,1545>, v=<-256,148,213>, a=<13,-15,-15>
p=<1676,1822,1043>, v=<241,263,147>, a=<-16,-17,-8>
p=<-56,2448,1580>, v=<-11,347,223>, a=<4,-24,-15>
p=<-2842,439,379>, v=<-406,66,54>, a=<31,-2,-4>
p=<-1293,1742,-1884>, v=<-183,246,-267>, a=<10,-13,18>
p=<-1336,2627,-1311>, v=<-197,379,-184>, a=<9,-23,12>
p=<-618,2160,-2253>, v=<-83,313,-321>, a=<9,-21,22>
p=<2734,-1738,-454>, v=<389,-247,-60>, a=<-27,17,8>
p=<-2927,-295,-97>, v=<-417,-40,-13>, a=<27,1,5>
p=<1538,-1987,-280>, v=<222,-283,-38>, a=<-13,18,5>
p=<-2076,1215,-363>, v=<-298,172,-53>, a=<18,-17,3>
p=<-2642,183,341>, v=<-377,19,50>, a=<23,1,-1>
p=<-31,2384,-1377>, v=<-5,337,-199>, a=<2,-26,11>
p=<771,690,-2686>, v=<116,98,-379>, a=<-15,-3,29>
p=<-68,-2134,-3000>, v=<-10,-301,-431>, a=<1,23,33>
p=<3022,1487,35>, v=<434,213,6>, a=<-31,-14,6>
p=<-402,-2383,-1800>, v=<-57,-340,-257>, a=<2,17,17>
p=<-1125,744,-2551>, v=<-156,106,-364>, a=<8,-3,25>
p=<705,2907,-863>, v=<100,411,-120>, a=<-4,-37,6>
p=<-303,-424,3358>, v=<-43,-57,481>, a=<9,0,-33>
p=<3065,-242,1553>, v=<438,-36,221>, a=<-28,-4,-15>
p=<211,3341,-1331>, v=<33,481,-190>, a=<1,-35,12>
p=<2309,1563,-21>, v=<333,218,-3>, a=<-21,-16,0>
p=<-1142,3233,737>, v=<-158,461,107>, a=<15,-32,-2>
p=<241,-3065,-706>, v=<32,-437,-101>, a=<-1,30,10>
p=<-1229,-1539,2489>, v=<-171,-212,353>, a=<14,15,-20>
p=<1664,132,-1899>, v=<236,19,-273>, a=<-18,1,15>
p=<-27,-599,2800>, v=<-2,-87,402>, a=<4,5,-30>
p=<-3022,842,-1427>, v=<-431,120,-204>, a=<26,-13,14>
p=<-2558,-862,-996>, v=<-362,-122,-135>, a=<28,11,7>
p=<1860,-1025,-2431>, v=<259,-143,-349>, a=<-21,13,24>
p=<2563,-1818,534>, v=<364,-258,82>, a=<-30,20,-8>
p=<614,-3055,-609>, v=<87,-431,-89>, a=<-6,27,2>
p=<-180,-3323,420>, v=<-22,-472,60>, a=<5,34,-2>
p=<1270,1194,-2769>, v=<182,168,-391>, a=<-14,-11,23>
p=<-89,-1147,-2030>, v=<-13,-165,-285>, a=<3,12,22>
p=<-159,-2746,874>, v=<-20,-391,128>, a=<3,27,-15>
p=<2942,694,778>, v=<423,104,112>, a=<-28,-5,-8>
p=<2937,775,238>, v=<418,118,30>, a=<-29,-7,1>
p=<-2889,-1216,-1522>, v=<-414,-176,-214>, a=<29,13,10>
p=<3108,-504,1282>, v=<440,-72,183>, a=<-37,6,-13>
p=<1404,-2482,-779>, v=<201,-356,-114>, a=<-15,21,11>
p=<-3135,1691,-457>, v=<-445,242,-63>, a=<33,-14,7>
p=<593,-560,-3030>, v=<85,-76,-433>, a=<-11,7,29>
p=<-1810,2667,339>, v=<-259,384,50>, a=<21,-28,-6>
p=<1361,2731,923>, v=<194,391,131>, a=<-13,-29,-11>
p=<-491,-1870,2097>, v=<-70,-259,295>, a=<4,12,-16>
p=<202,-3264,584>, v=<30,-464,83>, a=<-2,28,-4>
p=<-420,2323,-1657>, v=<-60,332,-233>, a=<5,-23,20>
p=<1630,-1018,1758>, v=<232,-143,246>, a=<-13,10,-17>
p=<1479,-2655,-951>, v=<213,-380,-135>, a=<-17,23,5>
p=<-1309,599,-2712>, v=<-191,85,-389>, a=<14,-3,26>
p=<-365,-1831,-3076>, v=<-52,-257,-439>, a=<1,18,28>
p=<-1572,-82,2148>, v=<-224,-6,308>, a=<11,1,-22>
p=<1951,839,-1829>, v=<275,120,-266>, a=<-16,-2,18>
p=<-462,-2306,1178>, v=<-67,-327,168>, a=<4,25,-9>
p=<-1355,-1176,2319>, v=<-189,-167,329>, a=<10,11,-23>
p=<-1609,846,1797>, v=<-226,121,262>, a=<23,-6,-17>
p=<-584,-214,2601>, v=<-80,-30,376>, a=<4,1,-26>
p=<-2998,-621,-215>, v=<-428,-88,-33>, a=<29,4,6>
p=<-2037,-2515,-628>, v=<-283,-362,-90>, a=<19,26,2>
p=<899,-825,3038>, v=<128,-123,434>, a=<-6,6,-32>
p=<1501,246,-2640>, v=<208,35,-377>, a=<-12,-8,23>
p=<-2606,-1301,775>, v=<-372,-185,112>, a=<22,12,-3>
p=<-1243,1236,2385>, v=<-182,172,337>, a=<11,-13,-21>
p=<759,735,-2578>, v=<111,105,-370>, a=<-4,-2,26>
p=<-2138,576,2315>, v=<-303,87,330>, a=<23,-6,-22>
p=<1450,-2184,-1592>, v=<206,-312,-226>, a=<-12,23,19>
p=<-1024,2357,1170>, v=<-146,332,164>, a=<10,-24,-11>
p=<1895,2547,-22>, v=<270,365,-8>, a=<-24,-25,0>
p=<2776,124,-668>, v=<395,18,-90>, a=<-24,2,9>
p=<-2599,104,474>, v=<-366,9,74>, a=<25,-6,-8>
p=<139,185,2854>, v=<20,28,406>, a=<-5,3,-30>
p=<2164,1455,-616>, v=<309,205,-89>, a=<-25,-15,3>
p=<1800,463,2549>, v=<256,66,367>, a=<-19,-4,-28>
p=<2538,-1430,344>, v=<361,-203,47>, a=<-28,15,-3>
p=<-9,2185,1710>, v=<-6,312,246>, a=<-4,-22,-15>
p=<-34,144,-3420>, v=<-4,13,-489>, a=<-3,-2,33>
p=<880,813,-2385>, v=<125,115,-339>, a=<-13,-7,18>
p=<1889,-2915,20>, v=<271,-421,0>, a=<-14,25,-2>
p=<1368,-1912,-679>, v=<198,-280,-95>, a=<-13,23,4>
p=<2464,756,-1235>, v=<351,108,-174>, a=<-18,-12,12>
p=<536,-896,2762>, v=<80,-124,398>, a=<-6,5,-29>
p=<-275,26,3405>, v=<-41,2,489>, a=<2,-3,-32>
p=<-691,2510,2012>, v=<-100,358,287>, a=<2,-24,-21>
p=<186,776,-2800>, v=<26,108,-398>, a=<-1,-9,31>
p=<48,-2765,51>, v=<6,-394,7>, a=<0,28,1>
p=<-1243,-2674,-621>, v=<-181,-387,-90>, a=<14,25,8>
p=<637,-2968,249>, v=<91,-432,37>, a=<-8,29,-2>
p=<-108,2644,-359>, v=<-15,377,-43>, a=<0,-25,1>
p=<311,2396,1647>, v=<46,341,238>, a=<0,-23,-19>
p=<2091,863,1991>, v=<300,123,281>, a=<-17,-8,-22>
p=<-1316,1419,1976>, v=<-183,204,279>, a=<13,-15,-21>
p=<57,-1973,2964>, v=<2,-281,424>, a=<-1,21,-29>
p=<-775,-2721,-1750>, v=<-109,-389,-247>, a=<13,28,19>
p=<731,1583,-2157>, v=<110,228,-314>, a=<-6,-15,22>
p=<-893,2775,-190>, v=<-126,396,-26>, a=<6,-27,2>
p=<367,-2679,-1080>, v=<51,-384,-154>, a=<-7,27,11>
p=<3177,-367,441>, v=<445,-51,64>, a=<-30,3,-5>
p=<-1647,-1342,2341>, v=<-240,-185,331>, a=<12,13,-23>
p=<986,-2763,1286>, v=<136,-391,185>, a=<-9,28,-9>
p=<-2802,-1225,252>, v=<-399,-180,31>, a=<26,13,1>
p=<175,2883,-1052>, v=<30,408,-150>, a=<-2,-31,13>
p=<-229,-2683,-1449>, v=<-28,-386,-211>, a=<7,28,14>
p=<2786,531,1110>, v=<398,77,157>, a=<-29,-8,-9>
p=<279,-2586,-2001>, v=<35,-371,-285>, a=<-2,27,20>
p=<2176,-126,1717>, v=<304,-19,245>, a=<-21,1,-24>
p=<2153,2118,998>, v=<304,302,142>, a=<-26,-24,-9>
p=<-744,2719,1245>, v=<-111,386,176>, a=<2,-28,-16>
p=<3101,-1190,-994>, v=<444,-167,-143>, a=<-34,12,7>
p=<-156,-2267,-2303>, v=<-21,-324,-334>, a=<5,19,22>
p=<1023,-1402,2182>, v=<143,-199,312>, a=<-8,20,-28>
p=<2486,-1200,-1942>, v=<359,-171,-278>, a=<-22,12,19>
p=<1355,1883,2115>, v=<197,269,305>, a=<-15,-18,-24>
p=<1830,788,2438>, v=<263,107,349>, a=<-13,-9,-17>
p=<-912,715,3178>, v=<-131,105,450>, a=<6,-9,-30>
p=<1612,-1972,-156>, v=<226,-283,-23>, a=<-20,13,4>
p=<893,-2183,2349>, v=<126,-319,334>, a=<-13,23,-24>
p=<1817,-2407,-431>, v=<256,-343,-63>, a=<-18,20,1>
p=<2372,1739,-527>, v=<336,250,-74>, a=<-23,-20,4>
p=<-2169,-888,1343>, v=<-305,-122,186>, a=<23,3,-15>
p=<1004,-2830,-740>, v=<139,-399,-107>, a=<-11,27,6>
p=<-305,-2955,521>, v=<-40,-419,74>, a=<3,29,-7>
p=<-509,1141,2439>, v=<-75,160,348>, a=<3,-11,-24>
p=<-2301,1385,-970>, v=<-327,199,-139>, a=<15,-17,11>
p=<-2030,1762,-1028>, v=<-292,253,-142>, a=<20,-21,11>
p=<-861,2917,38>, v=<-123,415,7>, a=<7,-29,3>
p=<-167,-2616,1713>, v=<-21,-374,241>, a=<2,18,-20>
p=<-1058,1016,-2844>, v=<-157,151,-402>, a=<10,-10,28>
p=<1515,795,-2400>, v=<214,120,-339>, a=<-14,-5,25>
p=<-1976,1929,1093>, v=<-285,274,156>, a=<23,-17,-10>
p=<-2791,376,-1195>, v=<-397,50,-169>, a=<27,1,14>
p=<-415,-2632,-1896>, v=<-61,-373,-274>, a=<5,29,19>
p=<731,2967,-1217>, v=<104,426,-175>, a=<-4,-29,12>
p=<-1052,-2543,-649>, v=<-154,-365,-94>, a=<8,23,0>
p=<-86,-1297,2692>, v=<-8,-183,387>, a=<1,12,-29>
p=<2334,-1447,1773>, v=<334,-210,250>, a=<-23,19,-22>
p=<-1461,1036,3091>, v=<-214,152,440>, a=<14,-7,-29>
p=<574,1634,-2195>, v=<82,232,-314>, a=<-4,-8,25>
p=<2758,-1277,-252>, v=<395,-186,-36>, a=<-30,16,-2>
p=<2285,-1449,1267>, v=<328,-207,185>, a=<-28,16,-12>
p=<-1991,-2098,-804>, v=<-284,-292,-118>, a=<17,16,8>
p=<1255,909,2080>, v=<180,129,296>, a=<-12,-13,-18>
p=<-1210,1924,-2166>, v=<-170,273,-309>, a=<10,-19,21>
p=<498,619,-2631>, v=<70,90,-374>, a=<-6,-6,29>
p=<1181,1790,-2398>, v=<170,253,-340>, a=<-10,-16,27>
p=<1096,-2878,-674>, v=<156,-411,-98>, a=<-14,29,9>
p=<-1718,2707,-58>, v=<-244,383,-7>, a=<17,-31,1>
p=<576,-3141,-439>, v=<83,-454,-62>, a=<0,28,7>
p=<1993,-1807,1900>, v=<284,-255,271>, a=<-18,18,-18>
p=<758,2506,-1611>, v=<105,354,-234>, a=<-6,-25,20>
p=<-2346,1520,-480>, v=<-335,217,-66>, a=<19,-12,4>
p=<-3102,541,88>, v=<-435,80,11>, a=<33,-7,1>
p=<1428,1818,-1579>, v=<205,256,-224>, a=<-12,-18,15>
p=<-2580,242,-393>, v=<-367,37,-61>, a=<23,2,4>
p=<2525,-866,-1209>, v=<360,-119,-172>, a=<-25,6,12>
p=<-1643,-1621,1822>, v=<-238,-235,263>, a=<13,16,-17>
p=<-1935,2048,802>, v=<-274,293,110>, a=<21,-20,-6>
p=<1482,2793,-375>, v=<213,399,-47>, a=<-17,-30,10>
p=<1252,2495,-610>, v=<176,357,-88>, a=<-12,-26,9>
p=<1009,250,-2787>, v=<143,35,-398>, a=<-10,-5,27>
p=<-878,2715,-1519>, v=<-125,385,-217>, a=<9,-24,16>
p=<-1311,2581,1146>, v=<-184,371,160>, a=<13,-24,-10>
p=<2640,410,-781>, v=<378,59,-114>, a=<-19,-6,14>
p=<-371,1354,-2693>, v=<-52,194,-384>, a=<6,-13,29>
p=<537,-2185,-2231>, v=<75,-312,-317>, a=<-3,28,25>
p=<-32,-2568,1670>, v=<-4,-370,242>, a=<3,25,-14>
p=<1565,1932,454>, v=<223,277,66>, a=<-15,-19,-3>
p=<-1345,2918,-69>, v=<-192,416,-11>, a=<10,-25,1>
p=<-2085,-271,-1874>, v=<-297,-38,-263>, a=<20,4,23>
p=<2111,-2280,-74>, v=<305,-322,-6>, a=<-22,24,-4>
p=<12,-488,3282>, v=<6,-69,462>, a=<-4,6,-35>
p=<-829,-937,2551>, v=<-116,-137,367>, a=<3,12,-23>
p=<1314,2115,-1539>, v=<187,298,-218>, a=<-13,-14,20>
p=<666,553,-3136>, v=<94,80,-448>, a=<-5,-5,28>
p=<373,2363,-928>, v=<52,335,-130>, a=<0,-20,8>
p=<-16,923,3038>, v=<0,125,435>, a=<0,-11,-30>
p=<-582,-2415,-1123>, v=<-84,-349,-157>, a=<5,20,18>
p=<1104,-320,2444>, v=<158,-44,354>, a=<-11,2,-23>
p=<-187,-1095,2647>, v=<-26,-156,376>, a=<-1,12,-21>
p=<-1421,-2357,200>, v=<-201,-333,33>, a=<15,21,2>
p=<1877,90,2147>, v=<273,12,309>, a=<-16,0,-21>
p=<-1880,419,-2597>, v=<-271,63,-374>, a=<18,-4,25>
p=<-1609,414,-2417>, v=<-229,59,-351>, a=<10,-1,24>
p=<-1480,2235,-210>, v=<-210,316,-30>, a=<12,-20,0>
p=<-1941,743,2365>, v=<-277,110,337>, a=<15,-7,-25>
p=<1495,-2896,1065>, v=<214,-412,152>, a=<-11,26,-10>
p=<-2038,541,1731>, v=<-286,80,245>, a=<15,-6,-13>
p=<1316,175,-2635>, v=<187,26,-378>, a=<-10,-1,27>
p=<1778,1932,-399>, v=<254,274,-57>, a=<-16,-20,3>
p=<-2497,84,472>, v=<-355,12,70>, a=<24,0,-6>
p=<566,-1984,-1067>, v=<77,-285,-155>, a=<-2,22,11>
p=<-1138,420,-3082>, v=<-157,62,-440>, a=<15,-1,34>
p=<789,-2022,2212>, v=<115,-290,317>, a=<-10,16,-25>
p=<354,-2402,-1538>, v=<50,-343,-214>, a=<-2,22,15>
p=<-1233,-3403,-289>, v=<-181,-482,-40>, a=<14,28,2>
p=<-2416,-1448,462>, v=<-346,-204,70>, a=<24,12,-3>
p=<676,-2408,-1515>, v=<88,-343,-221>, a=<-6,23,14>
p=<795,420,-2555>, v=<106,57,-366>, a=<-6,-5,24>
p=<951,-2678,-2019>, v=<133,-382,-289>, a=<-7,23,20>
p=<384,1486,2761>, v=<54,207,394>, a=<-4,-11,-26>
p=<-2164,1308,-2362>, v=<-308,186,-343>, a=<23,-12,23>
p=<1636,-2395,-677>, v=<233,-344,-102>, a=<-17,19,7>
p=<-836,2716,802>, v=<-116,390,114>, a=<5,-26,-8>
p=<-1017,2318,-1502>, v=<-148,331,-212>, a=<14,-22,14>
p=<-8,2290,-2327>, v=<-1,326,-336>, a=<0,-26,23>
p=<957,-475,-2503>, v=<135,-71,-363>, a=<-7,4,21>
p=<-1802,1695,-2518>, v=<-262,242,-356>, a=<17,-16,22>
p=<-1918,1084,978>, v=<-273,152,140>, a=<19,-8,-9>
p=<-2718,-511,267>, v=<-390,-70,38>, a=<22,0,-5>
p=<-931,741,-2861>, v=<-135,107,-409>, a=<4,-8,27>
p=<2919,720,-429>, v=<418,105,-59>, a=<-30,-11,4>
p=<-127,-208,-2528>, v=<-17,-29,-361>, a=<-2,2,24>
p=<2588,-1533,325>, v=<369,-224,46>, a=<-25,15,-5>
p=<2240,755,1445>, v=<321,110,206>, a=<-20,-8,-11>
p=<-1025,-2658,396>, v=<-144,-381,56>, a=<9,22,4>
p=<-1591,-1577,-2200>, v=<-227,-229,-312>, a=<17,13,22>
p=<2320,-2390,453>, v=<328,-346,65>, a=<-19,26,-3>
p=<-2665,277,577>, v=<-379,37,82>, a=<25,1,-5>
p=<-244,-314,2533>, v=<-36,-49,359>, a=<-2,4,-24>
p=<1363,1901,-1003>, v=<198,268,-143>, a=<-15,-20,10>
p=<-1982,-2008,-666>, v=<-279,-286,-93>, a=<15,21,6>
p=<404,1110,-2724>, v=<57,152,-390>, a=<-5,-11,25>
p=<1106,-29,2811>, v=<157,-5,397>, a=<-4,-1,-29>
p=<1279,-1327,-2438>, v=<176,-186,-347>, a=<-16,13,23>
p=<-2442,-1060,-1808>, v=<-348,-152,-261>, a=<25,9,17>
p=<-2764,706,766>, v=<-392,99,116>, a=<26,-4,-11>
p=<398,-961,-2682>, v=<51,-137,-388>, a=<-2,9,30>
p=<1783,-461,-1623>, v=<258,-68,-234>, a=<-19,5,13>
p=<164,-766,-3613>, v=<24,-107,-517>, a=<2,9,39>
p=<-2002,-2461,-920>, v=<-287,-349,-131>, a=<24,21,4>
p=<770,493,3153>, v=<112,71,450>, a=<-4,-1,-35>
p=<-864,477,-3078>, v=<-120,73,-439>, a=<7,-6,29>
p=<1315,2948,-955>, v=<185,418,-134>, a=<-12,-27,10>
p=<1168,2186,-1475>, v=<165,308,-215>, a=<-11,-16,14>
p=<1883,1702,1906>, v=<270,252,273>, a=<-20,-13,-18>
p=<-2462,-1690,-48>, v=<-353,-241,-8>, a=<24,15,2>
p=<-1016,1706,2368>, v=<-144,242,341>, a=<7,-21,-20>
p=<2752,1230,178>, v=<394,178,26>, a=<-23,-16,-1>
p=<-3139,492,-93>, v=<-446,70,-14>, a=<31,-6,0>
p=<-232,-669,3400>, v=<-35,-95,487>, a=<-1,3,-29>
p=<521,-4,2511>, v=<73,0,361>, a=<-8,3,-33>
p=<-1580,-2272,-2040>, v=<-224,-323,-292>, a=<15,20,20>
p=<2936,10,680>, v=<419,1,100>, a=<-33,1,-7>
p=<3134,29,491>, v=<450,8,66>, a=<-31,4,0>
p=<2028,-2215,730>, v=<286,-317,101>, a=<-17,17,-6>
p=<-942,2508,227>, v=<-132,360,34>, a=<6,-18,-2>
p=<-2074,-337,-2307>, v=<-292,-51,-325>, a=<17,9,25>
p=<3138,-829,906>, v=<448,-116,129>, a=<-27,8,-3>
p=<417,-1567,2520>, v=<60,-223,357>, a=<-7,8,-29>
p=<-591,2981,-253>, v=<-79,425,-35>, a=<9,-29,2>
p=<-428,2571,-2295>, v=<-65,372,-326>, a=<-1,-25,23>
p=<-1147,-2613,-1664>, v=<-163,-373,-239>, a=<10,32,17>
p=<-682,2368,720>, v=<-96,338,106>, a=<10,-27,-10>
p=<414,2028,-1676>, v=<65,286,-239>, a=<-6,-20,16>
p=<80,2771,-1315>, v=<8,395,-188>, a=<0,-25,13>
p=<-571,765,-2510>, v=<-80,110,-354>, a=<1,-10,31>
p=<1755,-2364,-196>, v=<251,-339,-30>, a=<-16,25,-1>
p=<-995,-2303,54>, v=<-141,-327,13>, a=<6,21,3>
p=<987,-1899,-2046>, v=<141,-272,-292>, a=<-9,18,25>
p=<-230,-841,-2371>, v=<-31,-118,-337>, a=<2,5,23>
p=<2201,-1834,1184>, v=<312,-262,169>, a=<-22,20,-7>
p=<2301,277,-1316>, v=<331,41,-186>, a=<-22,3,11>
p=<-2248,1705,39>, v=<-320,240,10>, a=<19,-15,1>
p=<-1825,2384,950>, v=<-264,341,136>, a=<20,-23,-4>
p=<2159,583,-2049>, v=<306,85,-291>, a=<-17,2,20>
p=<752,-306,-2743>, v=<110,-44,-391>, a=<-7,3,28>
p=<-1600,733,2474>, v=<-228,102,353>, a=<16,-4,-29>
p=<-1931,-2210,-1867>, v=<-276,-309,-267>, a=<18,24,14>
p=<-1295,-2031,1686>, v=<-184,-292,239>, a=<12,21,-15>
p=<478,-2672,-94>, v=<69,-381,-17>, a=<-2,23,0>
p=<1317,662,2146>, v=<184,91,301>, a=<-16,-4,-19>
p=<761,-2068,1675>, v=<109,-295,240>, a=<-5,20,-13>
p=<3126,878,1183>, v=<444,125,167>, a=<-29,-5,-8>
p=<1005,-2563,-549>, v=<146,-368,-80>, a=<-15,25,4>
p=<2042,-1193,-2128>, v=<290,-166,-300>, a=<-17,15,22>
p=<200,-1578,2895>, v=<26,-223,413>, a=<-4,11,-28>
p=<-986,2686,-304>, v=<-138,378,-38>, a=<9,-26,5>
p=<2871,-1251,358>, v=<411,-175,52>, a=<-28,17,0>
p=<1868,319,-2475>, v=<267,45,-348>, a=<-18,-3,22>
p=<2451,19,-1262>, v=<352,-1,-183>, a=<-25,0,12>
p=<1585,2301,-869>, v=<231,330,-120>, a=<-10,-23,7>
p=<2502,1759,-696>, v=<357,257,-102>, a=<-24,-19,6>
p=<2305,537,-2463>, v=<332,77,-348>, a=<-22,-8,18>
p=<-255,2470,-1500>, v=<-35,349,-217>, a=<6,-22,12>
p=<-236,2477,-1290>, v=<-37,350,-184>, a=<6,-24,15>
p=<2401,258,1682>, v=<343,36,238>, a=<-21,-2,-16>
p=<-674,2633,130>, v=<-96,377,22>, a=<7,-32,0>
p=<-682,-183,-2591>, v=<-95,-27,-365>, a=<6,6,22>
p=<-153,2400,-2116>, v=<-24,340,-304>, a=<2,-25,20>
p=<-1243,2187,1831>, v=<-177,311,261>, a=<13,-22,-18>
p=<1115,-2968,-411>, v=<164,-423,-63>, a=<-5,31,5>
p=<2669,-425,-1805>, v=<381,-55,-256>, a=<-26,4,19>
p=<-1819,-1005,-1806>, v=<-259,-146,-254>, a=<13,9,22>
p=<2727,-746,-1095>, v=<388,-107,-161>, a=<-21,7,10>
p=<2988,-1385,-756>, v=<431,-194,-105>, a=<-31,12,9>
p=<1892,-843,-2112>, v=<270,-120,-295>, a=<-18,8,18>
p=<981,-1233,2354>, v=<140,-176,335>, a=<-7,11,-21>
p=<-798,910,2557>, v=<-114,134,367>, a=<9,-9,-28>
p=<1357,3162,599>, v=<193,457,83>, a=<-12,-31,-6>
p=<2670,1729,-42>, v=<383,245,-2>, a=<-29,-17,2>
p=<-1459,-1028,2060>, v=<-208,-142,297>, a=<17,8,-17>
p=<-166,-236,2935>, v=<-20,-33,417>, a=<-2,0,-29>
p=<3032,-500,391>, v=<440,-72,55>, a=<-35,10,1>
p=<1867,1954,117>, v=<266,282,16>, a=<-11,-15,1>
p=<165,1444,2170>, v=<20,206,312>, a=<-2,-10,-19>
p=<-2105,-2100,395>, v=<-303,-300,51>, a=<23,21,-3>
p=<-975,2566,-2097>, v=<-141,364,-304>, a=<5,-26,20>
p=<2688,-678,-926>, v=<383,-97,-136>, a=<-28,6,9>
p=<-331,-3031,-174>, v=<-43,-435,-21>, a=<4,33,4>
p=<-1036,-2037,-1769>, v=<-149,-290,-254>, a=<8,27,17>
p=<443,-1213,-2648>, v=<60,-173,-386>, a=<-8,14,26>
p=<-2666,220,1758>, v=<-380,31,253>, a=<27,1,-16>
p=<1168,2827,1304>, v=<169,403,184>, a=<-11,-27,-11>
p=<1237,645,2828>, v=<176,89,403>, a=<-11,-3,-27>
p=<-194,-718,2500>, v=<-26,-97,355>, a=<2,2,-25>
p=<-1738,-1623,1459>, v=<-246,-231,207>, a=<20,18,-14>
p=<607,-1729,-2554>, v=<87,-244,-363>, a=<-5,17,21>
p=<-772,2981,-1709>, v=<-108,429,-248>, a=<6,-29,13>
p=<-929,-935,2559>, v=<-131,-133,366>, a=<8,9,-27>
p=<1889,-2222,2>, v=<273,-315,-4>, a=<-23,24,2>
p=<2252,-1177,-1148>, v=<317,-163,-169>, a=<-22,7,14>
p=<898,1129,1677>, v=<128,160,240>, a=<-8,-11,-18>
p=<585,1776,-1605>, v=<86,257,-232>, a=<-3,-11,11>
p=<1329,-702,2447>, v=<188,-99,350>, a=<-20,5,-24>
p=<-740,-1556,-2238>, v=<-104,-219,-317>, a=<9,19,22>
p=<1221,2376,-501>, v=<176,343,-70>, a=<-13,-23,2>
p=<-18,-582,-2939>, v=<-1,-83,-416>, a=<0,11,31>
p=<328,-1362,2407>, v=<47,-192,345>, a=<-1,11,-24>
p=<2254,-795,-2176>, v=<319,-115,-306>, a=<-17,7,20>
p=<1945,2178,374>, v=<273,308,54>, a=<-22,-23,-3>
p=<-1255,1542,-2209>, v=<-182,220,-315>, a=<11,-15,23>
p=<-1029,1657,2328>, v=<-148,234,331>, a=<16,-16,-27>
p=<299,2821,-1374>, v=<44,402,-193>, a=<-7,-25,13>
p=<-2317,106,-1824>, v=<-331,20,-262>, a=<23,-1,13>
p=<784,-2450,-1388>, v=<116,-346,-195>, a=<-11,26,14>
p=<2738,-544,-356>, v=<393,-77,-49>, a=<-26,10,-3>
p=<1355,1483,2334>, v=<195,211,331>, a=<-12,-19,-17>
p=<2570,-849,-414>, v=<369,-117,-60>, a=<-21,9,9>
p=<313,-1203,-2974>, v=<41,-173,-422>, a=<-4,16,26>
p=<133,-3658,193>, v=<22,-524,27>, a=<-4,42,2>
p=<1293,-1644,2714>, v=<179,-232,383>, a=<-12,15,-33>
p=<152,1845,1804>, v=<24,263,261>, a=<-1,-14,-18>
p=<1059,2077,-1799>, v=<154,296,-251>, a=<-7,-19,13>
p=<-2954,-985,167>, v=<-418,-140,23>, a=<29,7,-3>
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day20-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day20-common-header>>
<<src-find-min-max-index-count>>

(define (compute-dist dist-vec pos-array)
  (vector-for-each-with-index
   (lambda (particle-idx unused)
     (vector-set! dist-vec particle-idx (+ (abs (array-ref pos-array particle-idx 0))
                                           (abs (array-ref pos-array particle-idx 1))
                                           (abs (array-ref pos-array particle-idx 2)))))
   dist-vec)
  dist-vec)

(define (process-infile infile for-exercise? :optional
                        (max-ticks 10000)
                        (nb-same-values (if for-exercise? 25 500)))
  (let* ((lines (split-lines (load-txt infile)))
         (nb-particles (length lines))
         (particles-shape (shape 0 nb-particles 0 3))
         (particles-pos (make-s32array particles-shape))
         (particles-veloc (make-s32array particles-shape))
         (particles-accel (make-s32array particles-shape))
         (particles-dist (make-vector nb-particles 0))) ; Note: make-TAGvector won't work w/ vector-for-each-with-index

    (define (parse-line line-idx line)
      (let ((re-coord "\\s*([+-]?\\d+)\\s*"))
        (define (re-pattern prefix)
          (format #f "~a=<~a,~a,~a>" prefix re-coord re-coord re-coord))
        (let* ((re-coords (format #f "~a,\\s*~a,\\s*~a" (re-pattern "p") (re-pattern "v") (re-pattern "a")))
               (coords (map string->number (cdr (rxmatch-substrings (rxmatch (string->regexp re-coords) line)))))
               (pos (take coords 3))
               (veloc (take (drop coords 3) 3))
               (accel (drop coords 6)))
          (for-each-with-index (lambda (col-idx v) (array-set! particles-pos   line-idx col-idx v)) pos)
          (for-each-with-index (lambda (col-idx v) (array-set! particles-veloc line-idx col-idx v)) veloc)
          (for-each-with-index (lambda (col-idx v) (array-set! particles-accel line-idx col-idx v)) accel))))

    (define (compute-tick particles-dist)
      (array-add-elements! particles-veloc particles-accel)
      (array-add-elements! particles-pos   particles-veloc)
      (compute-dist particles-dist particles-pos))

    (for-each-with-index parse-line lines)
    (let loop ((tick-idx 0)
               (ring-buf '()))
      (when (> tick-idx max-ticks)
        (errorf "Not converging after ~d ticks (~d)" tick-idx ring-buf))
      (receive (min-idx min-val min-count)
          (find-min-with-index-and-count (compute-tick particles-dist))
        (receive (ok? %ring-buf)
            (same-values ring-buf min-idx nb-same-values)
          (if ok?
              (format #f "~d [~d: ~d; ~d]" min-idx tick-idx min-val min-count)
              (loop (+ tick-idx 1) %ring-buf)))))))

<<src-day20-common-main>>
#+END_SRC

Results, for example and puzzle input (2nd try, error on first try was computing the =abs= value only after the minimum
per tick was found):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day20-part1

tangled/day20-part1.scm: tangled/day20-part1-exercise.txt (ex: #t) -> 0 [48: 1124; 1]

tangled/day20-part1.scm: tangled/day20-puzzle.txt (ex: #f) -> 161 [998: 1159585; 1]
25.69user 0.16system 0:20.98elapsed 123%CPU (0avgtext+0avgdata 25224maxresident)k
0inputs+0outputs (0major+4858minor)pagefaults 0swaps
#+END_EXAMPLE

*** Day 20, Part 2

**** Data

#+begin_src txt :tangle tangled/day20-part2-exercise.txt
p=<-6,0,0>, v=< 3,0,0>, a=< 0,0,0>
p=<-4,0,0>, v=< 2,0,0>, a=< 0,0,0>
p=<-2,0,0>, v=< 1,0,0>, a=< 0,0,0>
p=< 3,0,0>, v=<-1,0,0>, a=< 0,0,0>
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day20-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day20-common-header>>

(define (process-infile infile for-exercise? :optional
                        (max-ticks 10000)
                        (nb-same-values (if for-exercise? 3 100)))
  (let* ((lines (split-lines (load-txt infile)))
         (nb-particles (length lines))
         (particles-shape (shape 0 nb-particles 0 3))
         (particles-pos (make-s32array particles-shape))
         (particles-veloc (make-s32array particles-shape))
         (particles-accel (make-s32array particles-shape))
         (particles-skip (make-vector nb-particles #f)))

    (define (parse-line line-idx line)
      (let ((re-coord "\\s*([+-]?\\d+)\\s*"))
        (define (re-pattern prefix)
          (format #f "~a=<~a,~a,~a>" prefix re-coord re-coord re-coord))
        (let* ((re-coords (format #f "~a,\\s*~a,\\s*~a" (re-pattern "p") (re-pattern "v") (re-pattern "a")))
               (coords (map string->number (cdr (rxmatch-substrings (rxmatch (string->regexp re-coords) line)))))
               (pos (take coords 3))
               (veloc (take (drop coords 3) 3))
               (accel (drop coords 6)))
          (for-each-with-index (lambda (col-idx v) (array-set! particles-pos   line-idx col-idx v)) pos)
          (for-each-with-index (lambda (col-idx v) (array-set! particles-veloc line-idx col-idx v)) veloc)
          (for-each-with-index (lambda (col-idx v) (array-set! particles-accel line-idx col-idx v)) accel))))

    (define (compute-tick)
      (array-add-elements! particles-veloc particles-accel)
      (array-add-elements! particles-pos   particles-veloc))

    (for-each-with-index parse-line lines)
    (let loop ((tick-idx 0)
               (ring-buf '()))
      (when (> tick-idx max-ticks)
        (errorf "Not converging after ~d ticks (~d)" tick-idx ring-buf))
      (compute-tick)
      (let ((ht (make-hash-table 'equal?)))
        (vector-for-each-with-index
         (lambda (particle-idx skip?)
           (unless skip?
             (let* ((pos (list (array-ref particles-pos particle-idx 0)
                               (array-ref particles-pos particle-idx 1)
                               (array-ref particles-pos particle-idx 2)))
                    (particle-0-idx (hash-table-get ht pos -1)))
               (if (negative? particle-0-idx)
                   (hash-table-put! ht pos particle-idx)
                   (begin
                     (vector-set! particles-skip particle-0-idx #t)
                     (vector-set! particles-skip particle-idx   #t))))))
         particles-skip)
        (let ((nb-skips (count identity (vector->list particles-skip))))
          (receive (ok? %ring-buf)
              (same-values ring-buf nb-skips nb-same-values)
            (if ok?
                (format #f "~d [~d]" (- nb-particles nb-skips) tick-idx)
                (loop (+ tick-idx 1) %ring-buf))))))))

<<src-day20-common-main>>
#+END_SRC

Results, for example and puzzle input (1st try):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day20-part2

tangled/day20-part2.scm: tangled/day20-part2-exercise.txt (ex: #t) -> 1 [4]

tangled/day20-part2.scm: tangled/day20-puzzle.txt (ex: #f) -> 438 [198]
#+END_EXAMPLE

** Day 21

*** Source, common parts

#+BEGIN_EXAMPLE
;; Flip:

        vert    hori
1 2     2 1     3 4
3 4     4 3     1 2

1 2 3   3 2 1   7 8 9
4 5 6   6 5 2   4 5 6
7 8 9   9 8 3   1 2 3

;; Rotate:

        +90     +180    +270    +360
1 2     3 1     4 3     2 4     1 2
3 4     4 2     2 1     1 3     2 4
#+END_EXAMPLE

#+name: src-day21-common-header
#+begin_src scheme
<<src-dflt-uses>>
(use util.combinations)

<<src-assert>>
<<src-txt-io>>

(define-constant +start-pattern+ (split-lines (string-trim-right ".#.
..#
###
")))

(define (pattern-line->integer pat-line :optional (start-base 1))
  (cdr (string-fold
        (lambda (c acc)
          (match acc
            ((base . sum)
             (cons (* base 2)
                   (+ (* (if (char=? c #\#) 1 0) base) sum)))))
        (cons start-base 0)
        (string-reverse pat-line))))

(define (pattern->integer pat-list :optional (bits-per-line 4))
  (apply + (map-with-index
            (lambda (line-idx pat-line)
              (pattern-line->integer pat-line (ash 1 (* line-idx 4))))
            pat-list)))

(define (bits->pattern-line int start-bit end-bit)
  (list->string
   (map
    (lambda (f) (if f #\# #\.))
    (integer->list (ash int (- start-bit)) (- end-bit start-bit)))))

(define (integer->pattern int pattern-line-len :optional (bits-per-line 4))
  (let loop ((int int)
             (start-bit 0)
             (pat-list '()))
    (if (zero? int)
        (reverse pat-list)
        (loop (ash int (- bits-per-line))
              (+ start-bit bits-per-line)
              (cons (bits->pattern-line (logand int (- (ash 1 bits-per-line) 1))
                                        0
                                        pattern-line-len)
                    pat-list)))))


(define (pat-elem pat-list row col)
  (string-ref (list-ref pat-list row) col))

(define (pat-2-array pat-list)
  (tabulate-array (shape 0 2 0 2) (lambda (row col) (pat-elem pat-list row col))))

(define (array-2-pat arr-2)
  (let ((as-list (array->list arr-2)))
    (map list->string (list (subseq as-list 0 2)
                            (subseq as-list 2 4)))))

(define (pat-3-array pat-list)
  (tabulate-array (shape 0 3 0 3) (lambda (row col) (pat-elem pat-list row col))))

(define (array-3-pat arr-3)
  (let ((as-list (array->list arr-3)))
    (map list->string (list (subseq as-list 0 3)
                            (subseq as-list 3 6)
                            (subseq as-list 6 9)))))

(define (flip-hori-2 pat-list)
  (array-2-pat (array-flip (pat-2-array pat-list))))

(define (flip-vert-2 pat-list)
  (array-2-pat (array-flip (pat-2-array pat-list) 1)))

(define (rot+90-2 pat-list)
  (array-2-pat (array-rotate-90 (pat-2-array pat-list))))

(define (rot-180-2 pat-list)
  (array-2-pat (array-rotate-90 (array-rotate-90 (pat-2-array pat-list)))))

(define (rot-90-2 pat-list)
  (array-2-pat (array-rotate-90 (array-rotate-90 (array-rotate-90 (pat-2-array pat-list))))))

(define (flip-hori-3 pat-list)
  (array-3-pat (array-flip (pat-3-array pat-list))))

(define (flip-vert-3 pat-list)
  (array-3-pat (array-flip (pat-3-array pat-list) 1)))

(define (rot+90-3 pat-list)
  (array-3-pat (array-rotate-90 (pat-3-array pat-list))))

(define (rot-180-3 pat-list)
  (array-3-pat (array-rotate-90 (array-rotate-90 (pat-3-array pat-list)))))

(define (rot-90-3 pat-list)
  (array-3-pat (array-rotate-90 (array-rotate-90 (array-rotate-90 (pat-3-array pat-list))))))

(define (parse-infile infile)
  (let ((ht2 (make-hash-table integer-comparator))
        (ht3 (make-hash-table integer-comparator)))

    (define (%put-n ht fn-combinations lenh renh)
      ;; pre-compute the results of all potential input pattern pre-processing:
      ;; Task description: rotate *and* flip the pattern as necessary (we don't mind operation combinations resulting
      ;; in the same key - this will just write to the same hash table entry):
      (for-each
       (lambda (fn-pair)
         (hash-table-put! ht (pattern->integer ((cadr fn-pair) ((car fn-pair) lenh))) renh))
       (cartesian-product fn-combinations)))

    (define (put-2 lenh renh)
      (%put-n ht2
              (list (list identity rot+90-2 rot-180-2 rot+90-2) (list identity flip-hori-2 flip-vert-2))
              lenh renh))

    (define (put-3 lenh renh)
      (%put-n ht3
              (list (list identity rot+90-3 rot-180-3 rot+90-3) (list identity flip-hori-3 flip-vert-3))
              lenh renh))

    (map
     (lambda (line)
       (match (string-split line "=>")
         ((left right)
          (match (map string-trim-both (string-split left "/"))
            ((lenh ...)
             (match (map string-trim-both (string-split right "/"))
               ((renh ...)
                (print 'parse line '---> lenh '::: (pattern->integer lenh) '/// renh)
                (if (= (string-length (car lenh)) 2)
                    (put-2 lenh renh)
                    (put-3 lenh renh)))))))))
     (split-lines (load-txt infile)))
    (values ht2 ht3)))
#+end_src

Some test invocations for the REPL:

#+BEGIN_EXAMPLE
(assert (= (pattern-line->integer "###") 7))
(assert (= (pattern-line->integer "###" (ash 1 4)) (ash 7 4)))

(define (%%test-patterns start-bit)
  (map
   (lambda (i)
     (= (pattern-line->integer (bits->pattern-line i start-bit (+ start-bit 3))
                               (ash 1 start-bit))
        i))
   (map (^i (ash i start-bit)) (iota 8))))

(assert (every identity (%%test-patterns 0)))
(assert (every identity (%%test-patterns 4)))
(assert (every identity (%%test-patterns 8)))

(assert (equal? (integer->pattern (pattern->integer +start-pattern+) 3) +start-pattern+))

(assert (equal? (array-3-pat (pat-3-array +start-pattern+)) +start-pattern+))
(assert (equal? (rot-180-3 (rot-180-3 +start-pattern+)) +start-pattern+))
(assert (equal? (rot-90-3 (rot+90-3 +start-pattern+)) +start-pattern+))
(assert (equal? (flip-hori-3 (flip-hori-3 +start-pattern+)) +start-pattern+))
(assert (equal? (flip-vert-3 (flip-vert-3 +start-pattern+)) +start-pattern+))
#+END_EXAMPLE

#+name: src-day21-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a: ~a (ex: ~a) -> ~a~%"
                              (car args) infile for-exercise? (process-infile infile for-exercise?)))
     (cddr args)))
  0)
#+end_src

*** Day 21, Part 1

**** Data

#+begin_src txt :tangle tangled/day21-part1-exercise.txt
../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#
#+end_src

#+begin_src txt :tangle tangled/day21-puzzle.txt
../.. => .#./.#./###
#./.. => .#./.#./##.
##/.. => #../.##/.#.
.#/#. => #.#/#../..#
##/#. => ###/##./#.#
##/## => .../.../.#.
.../.../... => #.#./.###/..##/#.##
#../.../... => #.#./#.##/#..#/#..#
.#./.../... => #.#./###./#.#./..#.
##./.../... => ##../###./##.#/...#
#.#/.../... => ..../..#./####/..#.
###/.../... => ##../..../#.../#...
.#./#../... => .#../..##/#..#/.#.#
##./#../... => ####/.###/.###/.###
..#/#../... => .#.#/.##./...#/##..
#.#/#../... => #.##/#.##/#.##/.#..
.##/#../... => .#../...#/..#./.##.
###/#../... => .##./.###/#..#/##.#
.../.#./... => .#../.#.#/.#../#.##
#../.#./... => ...#/##../####/##..
.#./.#./... => ###./#..#/..#./...#
##./.#./... => #.##/..#./#.#./..#.
#.#/.#./... => .#.#/...#/..../#.##
###/.#./... => ..##/##.#/#.##/###.
.#./##./... => .##./####/##../####
##./##./... => .###/..../####/#...
..#/##./... => ..../##.#/.###/.##.
#.#/##./... => #.#./###./..../###.
.##/##./... => ###./.###/.#../##.#
###/##./... => #.##/#.#./..../##.#
.../#.#/... => ###./#.##/.###/#.##
#../#.#/... => ##.#/..../..../.#.#
.#./#.#/... => .#.#/..##/.#../.##.
##./#.#/... => .##./..#./...#/#...
#.#/#.#/... => ..../###./..#./.#.#
###/#.#/... => ..##/.##./###./#.##
.../###/... => .#../####/.##./..#.
#../###/... => ..##/#.#./...#/##..
.#./###/... => ..#./####/##../#.##
##./###/... => .##./##.#/####/.#.#
#.#/###/... => .###/#.##/####/.##.
###/###/... => #.../#.../##../.##.
..#/.../#.. => ..##/#.#./#.../#.#.
#.#/.../#.. => ###./##.#/..#./##.#
.##/.../#.. => ..#./..../##../.#.#
###/.../#.. => ####/.#.#/.#.#/####
.##/#../#.. => ####/####/...#/.#.#
###/#../#.. => ..##/..#./.##./##..
..#/.#./#.. => ####/...#/####/#..#
#.#/.#./#.. => ..#./.###/#.#./##.#
.##/.#./#.. => .###/.#.#/#..#/..#.
###/.#./#.. => ..../##../.#.#/.#..
.##/##./#.. => ###./####/..../#...
###/##./#.. => ####/#..#/##.#/##.#
#../..#/#.. => ####/##.#/..../.###
.#./..#/#.. => ..../.#../..#./..#.
##./..#/#.. => .#.#/...#/#.##/..#.
#.#/..#/#.. => #.#./#.##/#..#/####
.##/..#/#.. => ..#./##../####/.#..
###/..#/#.. => #.../##.#/###./.#.#
#../#.#/#.. => ..../.#.#/..#./#.#.
.#./#.#/#.. => #.##/...#/.##./.#..
##./#.#/#.. => .###/##.#/##.#/####
..#/#.#/#.. => ..../..../...#/##.#
#.#/#.#/#.. => ##.#/.#../###./..#.
.##/#.#/#.. => ###./..../...#/.##.
###/#.#/#.. => .###/#..#/.##./.###
#../.##/#.. => ##../.#.#/.##./.##.
.#./.##/#.. => .###/.###/..##/.#..
##./.##/#.. => ..##/###./...#/#...
#.#/.##/#.. => ..#./###./...#/##..
.##/.##/#.. => ####/###./#.#./##..
###/.##/#.. => ..##/.##./#.../..##
#../###/#.. => ####/.#../.###/.#.#
.#./###/#.. => .##./##.#/..##/##..
##./###/#.. => ..##/##.#/##../.#.#
..#/###/#.. => ##../..../.#.#/#..#
#.#/###/#.. => ..#./###./####/..##
.##/###/#.. => ##../##../..##/.##.
###/###/#.. => ###./...#/#..#/..#.
.#./#.#/.#. => ..../.###/.###/#...
##./#.#/.#. => .###/..#./..../#...
#.#/#.#/.#. => #..#/.##./#.##/..#.
###/#.#/.#. => ####/##../####/....
.#./###/.#. => ..../.###/..../###.
##./###/.#. => ###./.#../#.#./.#..
#.#/###/.#. => ..../..##/..##/....
###/###/.#. => ###./...#/#.../..#.
#.#/..#/##. => ###./.##./.#../....
###/..#/##. => ####/...#/##../#..#
.##/#.#/##. => ..../...#/##.#/#.##
###/#.#/##. => .#.#/.###/..../#...
#.#/.##/##. => .#.#/#.#./...#/#...
###/.##/##. => .##./...#/#.../..#.
.##/###/##. => .#.#/.##./.##./##..
###/###/##. => #.#./##../##../...#
#.#/.../#.# => #.#./##.#/##.#/####
###/.../#.# => .#../.#.#/.##./#.##
###/#../#.# => ###./##../..##/##..
#.#/.#./#.# => ####/#.#./###./.##.
###/.#./#.# => ..#./.##./..../#...
###/##./#.# => #..#/##.#/.##./.#..
#.#/#.#/#.# => .#../###./##.#/.#..
###/#.#/#.# => .#../#.##/##.#/..#.
#.#/###/#.# => ##.#/.###/..##/.#..
###/###/#.# => .#../.###/..#./#...
###/#.#/### => ###./####/.###/#.##
###/###/### => #..#/.#../#.../...#
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day21-part1.scm :noweb no-export
:END:

- Round 1: 1x1 x 3x3; grid-size: 3
- Round 2: 1x1 (match rule 3x3 -> 4x4) => 1x1 x 4x4  -> 2x2 x 2x2; grid-size: 4  => split: 1/4 -> 2/2
- Round 3: 2x2 (match rule 2x2 -> 3x3) => 2x2 x 3x3  -> 3x3 x 2x2; grid-size: 6  => merge: 2/3 -> 3/2
- Round 4: 3x3 (match rule 2x2 -> 3x3) => 3x3 x 3x3; grid-size: 9
- Round 5: 3x3 (match rule 3x3 -> 4x4) => 3x3 x 4x4; -> 6x6 x 2x2; grid-size: 12 => split: 3/4 -> 6/2
- Round 6: 6x6 (match rule 2x2 -> 3x3) => 6x6 x 3x3  -> 9x9 x 2x2; grid-size: 18 => merge: 6/3 -> 9/2
- Round 7: 9x9 (match rule 2x2 -> 3x3) => 9x9 x 3x3; grid-size: 27

#+BEGIN_SRC scheme
<<src-day21-common-header>>

(define (split-4-patterns from-pat-list :optional (to-pat-len 2))
  (let* ((from-pat-vector (list->vector from-pat-list))
         (from-pat-cnt (vector-length from-pat-vector))                         ; 4             36
         (from-pat-len (string-length (car from-pat-list)))                     ; 4             4
         (group-sz (sqrt (quotient from-pat-cnt from-pat-len)))                 ; 1             3
         (to-nb-patterns (quotient (* from-pat-cnt from-pat-len) to-pat-len))   ; 8             72
         (to-pat-list '()))
    (print 100 #\tab from-pat-cnt #\tab from-pat-len #\tab group-sz #\tab to-nb-patterns)
    (assert (= from-pat-len 4))
    (assert (zero? (modulo from-pat-len to-pat-len)))
    (for-each
      (lambda (i0)
        (print 200 #\tab i0 #\tab (+ i0 group-sz) #\tab (quotient i0 2) ))
      (iota from-pat-cnt))
    ;; (for-each
    ;;  (lambda (i)
    ;;    (let* ((i0 (* 2 (quotient i (* 2 (quotient from-pat-len to-pat-len))))) ; -> nope: need to skip the i1 after one i0 group is done
    ;;           (i1 (+ i0 group-sz))
    ;;           (str-idx (if (even? i) 0 to-pat-len)))
    ;;      (print 200 #\tab i #\tab i0 #\tab i1 #\tab str-idx)
    ;;      (if (even? i)
    ;;        (push! to-pat-list
    ;;               (substring (vector-ref from-pat-vector i0) 0 (+ 0 to-pat-len)))
    ;;        (push! to-pat-list
    ;;               (substring (vector-ref from-pat-vector i1) to-pat-len (+ to-pat-len to-pat-len))))
    ;;      ;; (push! to-pat-list
    ;;      ;;         (substring (vector-ref from-pat-vector i0) str-idx (+ str-idx to-pat-len)))
    ;;      ;; (push! to-pat-list
    ;;      ;;         (substring (vector-ref from-pat-vector i1) str-idx (+ str-idx to-pat-len)))
    ;;      ))
    ;;  ;;(iota (- to-nb-patterns (* group-sz (quotient from-pat-len to-pat-len))))
    ;;  (iota to-nb-patterns)
    ;;  )
    (reverse to-pat-list)))
(split-4-patterns '("1234"
                    "5678"
                    "abcd"
                    "efgh")) ;; 1x1 x 4x4 -> 2x2 x 2x2: -> 0:0 / 1:0 ; 0:1 / 1:1 ; 2:0 / 3:0 ; 2:1 / 3:1
'(#| [ group 1: |# "12" "56" #| ] |#
  #| [ group 2: |# "34" "78" #| ] |#
  #| [ group 3: |# "ab" "ef" #| ] |#
  #| [ group 4: |# "cd" "gh" #| ] |#)

(split-4-patterns '("1234"   "9876"   "1234"
                    "5678"   "5432"   "5678"
                    "abcd"   "zyxw"   "abcd"
                    "efgh"   "vuts"   "efgh"
                    "1234"   "9876"   "1234"
                    "5678"   "5432"   "5678"
                    "abcd"   "zyxw"   "abcd"
                    "efgh"   "vuts"   "efgh"
                    "1234"   "9876"   "1234"
                    "5678"   "5432"   "5678"
                    "abcd"   "zyxw"   "abcd"
                    "efgh"   "vuts"   "efgh")) ;; 3x3 x 4x4 -> 6x6 x 2x2
;; -> 0:0 / 3:0 ; 0:1 / 3:1 ;; 1:0 / 4:0 ; 1:1 / 4:1 ; 2:0 / 5:0 ; 2:1 / 5:1 ;;
;;    6:0 / 7:0 ; 6:1 / 7:1 ;; ...

'("12" "56"   "34" "78"   "98" "54"   "76" "32"   "12" "56"   "34" "78"
  "ab" "ef"   "cd" "gh"   "zy" "vu"   "xw" "ts"   "ab" "ef"   "cd" "gh"
  "12" "56"   "34" "78"   "98" "54"   "76" "32"   "12" "56"   "34" "78"
  "ab" "ef"   "cd" "gh"   "zy" "vu"   "xw" "ts"   "ab" "ef"   "cd" "gh"
  "12" "56"   "34" "78"   "98" "54"   "76" "32"   "12" "56"   "34" "78"
  "ab" "ef"   "cd" "gh"   "zy" "vu"   "xw" "ts"   "ab" "ef"   "cd" "gh")

(define (merge-3-patterns from-pat-list :optional (to-pat-len 2))
  (let* ((from-pat-cnt (length from-pat-list))              ; 2x2 x 3 = 12; 6x6 x 3 = 108
         (from-pat-len (string-length (car from-pat-list))) ; 3             3
         ;;                                                   12x3 / 4      108x3 / 4
         ;;                                                   9 -> 3x3      81 -> 9x9
         (from-pat-str (string-concatenate from-pat-list))
         (to-nb-patterns (quotient (* from-pat-cnt from-pat-len) (* to-pat-len to-pat-len)))
         (to-pat-list '()))
    (assert (= from-pat-len 3))
    (assert (zero? (modulo (* from-pat-cnt from-pat-len) (* to-pat-len to-pat-len))))
    (for-each
     (lambda (i)
       (push! to-pat-list
                 (substring from-pat-str (* i to-pat-len) (* (+ i 1) to-pat-len))))
     (iota to-nb-patterns))
    (reverse to-pat-list)))
(merge-3-patterns '("###" "##." "#.."   ".##" ".#." "..."
                    "#.#" "#.." "#.."   "..#" "..." "...")) ; ("##" "##" "#." "#." ".." "##" ".#" ".." "..")

(define (draw-grid-2 ht2 pat-list grid-sz :optional (pat-len 2))
  ;; break the pixels up into 2x2 squares, and convert each 2x2 square into a 3x3 square
  (let loop ((pat-idx 0)
             (pat-list-in pat-list)
             (pat-list-out '()))
    (if (null? pat-list-in)
        (begin
          (format #t ">>>dg2: ~d -> ~d: ~a~%" grid-sz (* pat-idx 3) (reverse pat-list-out))
          (assert (= (quotient grid-sz pat-len) pat-idx))
          (values (reverse pat-list-out) (* pat-idx 3)))
        (let* ((grid-in (take pat-list-in pat-len))
               (_ (format #t "dg>  2: ~d; ~a~%" pat-len grid-in))
               (grid-out (hash-table-get ht2 (pattern->integer grid-in))))
          (format #t ">> dg2: ~d; ~a~%" pat-len grid-out)
          (loop (+ pat-idx 1)
                (drop pat-list-in pat-len)
                (append grid-out pat-list-out))))))

(define (draw-grid-3 ht3 pat-list grid-sz :optional (pat-len 3))
  ;; break the pixels up into 3x3 squares, and convert each 3x3 square into a 4x4 square
  (let loop ((pat-idx 0)
             (pat-list-in pat-list)
             (pat-list-out '()))
    (if (null? pat-list-in)
        (begin
           (format #t ">>>dg3: ~d -> ~d: ~a~%" grid-sz (* pat-idx 4) (reverse pat-list-out))
           (assert (= (quotient grid-sz pat-len) pat-idx))
           (values (reverse pat-list-out) (* pat-idx 4)))
        (let* ((grid-in (take pat-list-in pat-len))
               (_ (format #t ">  dg3: ~d; ~a~%" pat-len grid-in))
               (grid-out (hash-table-get ht3 (pattern->integer grid-in))))
          (format #t ">> dg3: ~d; ~a~%" pat-len grid-out)
          (loop (+ pat-idx 1)
                (drop pat-list-in pat-len)
                (append grid-out pat-list-out))))))

(define (draw-art ht2 ht3 init-pat-list nb-iterations)
  (let loop ((iter-idx 0)
             (pat-list init-pat-list)
             (grid-sz (length init-pat-list)))
    (if (= iter-idx nb-iterations)
        (cons 'done pat-list)
        (cond
         ((zero? (modulo grid-sz 2))
          (receive (%pat-list %grid-sz)
              (draw-grid-2 ht2 pat-list grid-sz)
            (format #t ">>>da2: ~d -> ~d; ~d/~d -> ~d/~d~%" grid-sz %grid-sz (length pat-list) (string-length (car pat-list)) (length %pat-list) (string-length (car %pat-list)))
            (format #t ">>>da2: ~a -> ~a~%" %pat-list (merge-3-patterns %pat-list))
            (loop (+ iter-idx 1)
                  (merge-3-patterns %pat-list)
                  %grid-sz)))
         ((zero? (modulo grid-sz 3))
          (receive (%pat-list %grid-sz)
              (draw-grid-3 ht3 pat-list grid-sz)
            (format #t ">>>da3: ~d -> ~d; ~d/~d -> ~d/~d~%" grid-sz %grid-sz (length pat-list) (string-length (car pat-list)) (length %pat-list) (string-length (car %pat-list)))
            (format #t ">>>da3: ~a -> ~a~%" %pat-list (split-4-patterns %pat-list))
            (loop (+ iter-idx 1)
                  (split-4-patterns %pat-list)
                  %grid-sz)))
         (else (error "Bad grid size" grid-sz iter-idx))))))

(define (process-infile infile for-exercise?)
  (receive (ht2 ht3)
      (parse-infile infile)
    (print ht2 ht3)
    (draw-art ht2 ht3 +start-pattern+ (if for-exercise? 2 5))
    ))

<<src-day21-common-main>>
#+END_SRC

*** Day 21, Part 2

**** Data

#+begin_src txt :tangle tangled/day21-part2-exercise.txt
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day21-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day21-common-header>>

(define (process-infile infile for-exercise?)
  (split-lines (load-txt infile)))

<<src-day21-common-main>>
#+END_SRC

** Day 22

*** REPL testing

Some testing for the procedures defined below:

#+BEGIN_EXAMPLE scheme
(line->infected-list "..###.##..#.")
;; -> (2 3 4 6 7 10)

(line->infected-list "...#.#.####.....#.##..###")
;; -> (3 5 7 8 9 10 16 18 19 22 23 24)

(flatmap identity '(((0 . 3) (0 . 5)) ((1 . 0) (1 . 1))))
;; -> ((0 . 3) (0 . 5) (1 . 0) (1 . 1))

(split-lines (string-trim-right (load-txt "tangled/day22-part1-exercise.txt")))
(split-lines (string-trim-right (load-txt "tangled/day22-puzzle.txt")))
#+END_EXAMPLE

Even more REPL testing:

#+BEGIN_EXAMPLE scheme
(let* ((lines '("...#.#.####.....#.##..###" "##.#.###..#.....#.##...#."))
       (nb-lines (length lines)))
  (flatmap identity (map-with-index
                      (lambda (y-pos line) ;y-pos 0: top
                        (map
                         (lambda (x-pos)   ;x-pos 0: left
                           (cons y-pos x-pos))
                         (line->infected-list line)))
                      lines)))
#+END_EXAMPLE

*** Source, common parts

#+name: src-day22-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>
<<src-flatmap>>

(define (make-carrier y-pos x-pos dir)
  ;;(assert (member dir '(up down right left)))
  (cons (cons y-pos x-pos) dir))

(define (turn-right dir)
  (cadr (member dir '(up right down left up))))

(define (turn-left dir)
  (cadr (member dir '(up left down right up))))

(define (init-carrier-pos nb-lines nb-rows)
  ;; The virus carrier begins in the middle of the map facing up:
  (make-carrier (/ (- nb-lines 1) 2) (/ (- nb-rows 1) 2) 'up))

(define (new-carrier-pos y-pos x-pos dir)
  (ecase dir
         ((up)    (values (- y-pos 1) x-pos))
         ((down)  (values (+ y-pos 1) x-pos))
         ((right) (values y-pos       (+ x-pos 1)))
         ((left)  (values y-pos       (- x-pos 1)))))
#+end_src

#+name: src-day22-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex"))
        (nb-bursts (string->number (caddr args))))
    (for-each
     (lambda (infile) (format #t "~a: ~a (ex: ~a) -> ~a~%"
                              (car args) infile for-exercise? (process-infile infile nb-bursts)))
     (cdddr args)))
  0)
#+end_src

*** Day 22, Part 1

**** Data

#+begin_src txt :tangle tangled/day22-part1-exercise.txt
..#
#..
...
#+end_src

#+begin_src txt :tangle tangled/day22-puzzle.txt
...#.#.####.....#.##..###
##.#.###..#.....#.##...#.
..#.##..#.#.##.#...#..###
###...##....###.#..#...#.
...#..#.........##..###..
#..#.#.#.#.#.#.#.##.####.
#...#.##...###...##..#..#
##...#.###..###...####.##
###..#.#####.##..###.#.##
#..#....#.##..####...####
...#.#......###.#..#..##.
.#.#...##.#.#####..###.#.
.....#..##..##..###....##
#.#..###.##.##.#####.##..
###..#..###.##.#..#.##.##
.#######.###....######.##
..#.#.###.##.##...###.#..
#..#.####...###..###..###
#...#..###.##..##...#.#..
........###..#.#.##..##..
.#############.#.###..###
##..#.###....#.#..#..##.#
..#.#.#####....#..#####..
.#.#..#...#...##.#..#....
##.#..#..##........#..##.
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day22-part1.scm :noweb no-export
:END:

For part 1 I used a very simple data model: I just stored a list of infected nodes as (y-pos . x-pos).

#+BEGIN_SRC scheme
<<src-day22-common-header>>

(define (line->infected-list line)
  (filter
   (lambda (n) (not (negative? n)))
   (map-with-index
    (lambda (i c) (if (char=? c #\#) i -1))
    (string->list line))))

(define (process-infile infile :optional (nb-bursts 10000))

  (define (split-infected carrier infected-nodes)
    (let ((carrier-y-pos (car (car carrier)))
          (carrier-x-pos (cdr (car carrier))))
      (let loop ((found-infection? #f)
                 (infected-nodes-in infected-nodes)
                 (infected-nodes-out '()))
        (if (null? infected-nodes-in)
            (values found-infection? infected-nodes-out)
            (let ((in (car infected-nodes-in)))
              (if (and (= (car in) carrier-y-pos) (= (cdr in) carrier-x-pos))
                  (begin
                    (assert (not found-infection?))
                    (loop #t
                          (cdr infected-nodes-in)
                          infected-nodes-out))
                  (loop found-infection?
                        (cdr infected-nodes-in)
                        (cons in infected-nodes-out))))))))

  (define (burst carrier infected-nodes)
    (receive (found-infection? %infected-nodes)
        (split-infected carrier infected-nodes)
      (let ((carrier-y-pos (car (car carrier)))
            (carrier-x-pos (cdr (car carrier))))
        (if found-infection?
            (let ((new-dir (turn-right (cdr carrier))))
              (receive (new-y-pos new-x-pos)
                  (new-carrier-pos carrier-y-pos carrier-x-pos new-dir)
                (values #f
                        (make-carrier new-y-pos new-x-pos new-dir)
                        ;; return list of infected-nodes w/o current cell, aka cleaned cells:
                        %infected-nodes)))
            (let ((new-dir (turn-left (cdr carrier))))
              (receive (new-y-pos new-x-pos)
                  (new-carrier-pos carrier-y-pos carrier-x-pos new-dir)
                (values #t
                        (make-carrier new-y-pos new-x-pos new-dir)
                        ;; return list of previous infected-nodes plus current cell, aka infected cells:
                        (cons (car carrier) %infected-nodes))))))))

  (let* ((lines (split-lines (load-txt infile)))
         (nb-lines (length lines))
         (nb-rows (string-length (car lines)))
         (carrier (init-carrier-pos nb-lines nb-rows))
         (infected-nodes
          (flatmap identity (map-with-index
                             (lambda (y-pos line) ;y-pos 0: top
                               (map
                                (lambda (x-pos)   ;x-pos 0: left
                                  (cons y-pos x-pos))
                                (line->infected-list line)))
                             lines))))
    (let loop ((burst-idx 0)
               (carrier carrier)
               (infected-nodes infected-nodes)
               ;; Do not count nodes that begin infected.
               ;; Counting infected-nodes at end won't work, since some infected nodes will have been cleaned up again.
               (new-infection-cnt 0))
      (if (= burst-idx nb-bursts)
          (format #f "#-bursts: ~d; #-new: ~d; #-total: ~d"
                  nb-bursts new-infection-cnt (length infected-nodes))
          (receive (found-infection? %carrier %infected-nodes)
              (burst carrier infected-nodes)
            (loop (+ burst-idx 1)
                  %carrier
                  %infected-nodes
                  (if found-infection?
                      (+ new-infection-cnt 1)
                      new-infection-cnt)))))))

<<src-day22-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day22-part1

tangled/day22-part1.scm: tangled/day22-part1-exercise.txt (ex: #t) -> #-bursts: 7; #-new: 5; #-total: 5

tangled/day22-part1.scm: tangled/day22-part1-exercise.txt (ex: #t) -> #-bursts: 70; #-new: 41; #-total: 14

tangled/day22-part1.scm: tangled/day22-part1-exercise.txt (ex: #t) -> #-bursts: 10000; #-new: 5587; #-total: 1176

tangled/day22-part1.scm: tangled/day22-puzzle.txt (ex: #f) -> #-bursts: 10000; #-new: 5256; #-total: 827
#+END_EXAMPLE

*** Day 22, Part 2

The simple data model used for part 1 where I used a list of non-clean nodes was too slow, it didn't find the exercise
solution for 10,000,000 after ~ 6.5 hours. So I use a 2D array instead for part 2.

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day22-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day22-common-header>>

(define (process-infile infile :optional (nb-bursts 10000))

  (define (init-nodes lines nodes)
    (for-each-with-index
     (lambda (y line)
       (for-each-with-index
        (lambda (x c)
          (when (char=? c #\#)
            (array-set! nodes y x 'infected)))
        (string->list line)))
     lines)
    nodes)

  (define (print-nodes nodes)
    (array-for-each-index nodes
                          (lambda (y x)
                            (let ((state (array-ref nodes y x)))
                              (unless (eq? state 'clean)
                                (format #t "~d, ~d: ~a~%" y x state)))))
    (newline))

  (define (burst carrier nodes)

    (define (state->new-dir carrier curr-state)
      (ecase curr-state
             ((weakened)                    ; If it is weakened, it does not turn
              (cdr carrier))
             ((infected)                    ; If it is infected, it turns right
              (turn-right (cdr carrier)))
             ((flagged)                     ; If it is flagged, it reverses direction
              (turn-right (turn-right (cdr carrier))))
             ((#f clean)                    ; If it is clean, it turns left
              ;; Note that we have different representations of the clean state for part 1 and part 2:
              (turn-left (cdr carrier)))))

    (define (state->new-state curr-state)
      (ecase curr-state
             ((weakened) 'infected)         ; Weakened nodes become infected
             ((infected) 'flagged)          ; Infected nodes become flagged
             ((flagged)  'clean)            ; Flagged nodes become clean
             ;; Again we have different representations of the clean state for part 1 and part 2:
             ((#f clean) 'weakened)))       ; Clean nodes become weakened

    (let* ((curr-y-pos (car (car carrier)))
           (curr-x-pos (cdr (car carrier)))
           (curr-state (array-ref nodes curr-y-pos curr-x-pos))
           (new-dir (state->new-dir carrier curr-state))
           (new-state (state->new-state curr-state)))
      (array-set! nodes curr-y-pos curr-x-pos new-state)
      (receive (new-y-pos new-x-pos)
          (new-carrier-pos curr-y-pos curr-x-pos new-dir)
        (values (eq? new-state 'infected)
                (make-carrier new-y-pos new-x-pos new-dir)
                nodes))))

  (let* ((dim-max 500)                  ;just a wild guess - it worked and I didn't try to narrow it down
         (lines (split-lines (load-txt infile)))
         (nb-lines (length lines))
         (nb-rows (string-length (car lines)))
         (carrier (init-carrier-pos nb-lines nb-rows))
         (nodes (init-nodes lines (make-array (shape (- dim-max) dim-max (- dim-max) dim-max) 'clean))))

    (let loop ((burst-idx 0)
               (carrier carrier)
               (nodes nodes)
               (new-infection-cnt 0))
      (if (= burst-idx nb-bursts)
          (format #f "#-bursts: ~d; #-new: ~d" nb-bursts new-infection-cnt)
          (receive (infected? %carrier %nodes)
              (burst carrier nodes)
            (loop (+ burst-idx 1)
                  %carrier
                  %nodes
                  (if infected?
                      (+ new-infection-cnt 1)
                      new-infection-cnt)))))))

<<src-day22-common-main>>
#+END_SRC

Results, for example and puzzle input (1st try after re-write from using a list to using hashs):

#+BEGIN_EXAMPLE
make -f tangled/Makefile day22-part2

tangled/day22-part2.scm: tangled/day22-part1-exercise.txt (ex: #t) -> 26

tangled/day22-part2.scm: tangled/day22-part1-exercise.txt (ex: #t) -> 2511944
518.16user 0.78system 8:18.28elapsed 104%CPU (0avgtext+0avgdata 102432maxresident)k
0inputs+0outputs (0major+24167minor)pagefaults 0swaps [plugged in]

tangled/day22-part2.scm: tangled/day22-puzzle.txt (ex: #f) -> 2511345
80.69user 0.26system 1:09.71elapsed 116%CPU (0avgtext+0avgdata 40804maxresident)k
0inputs+0outputs (0major+4667minor)pagefaults 0swaps [not plugged in]
#+END_EXAMPLE

** Day 23

*** Source, common parts

#+name: src-day23-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>

(define (strip-comment line)
  (string-trim-right (car (string-split line #\;))))
#+end_src

#+name: src-day23-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a: ~a (ex: ~a) -> ~a~%"
                              (car args) infile for-exercise? (process-infile infile for-exercise?)))
     (cddr args)))
  0)
#+end_src

*** Day 23, Part 1

**** Data

#+begin_src txt :tangle tangled/day23-puzzle.txt
set b 65
set c b
jnz a 2
jnz 1 5
mul b 100
sub b -100000
set c b
sub c -17000
set f 1
set d 2
set e 2
set g d
mul g e
sub g b
jnz g 2
set f 0
sub e -1
set g e
sub g b
jnz g -8
sub d -1
set g d
sub g b
jnz g -13
jnz f 2
sub h -1
set g b
sub g c
jnz g 2
jnz 1 3
sub b -17
jnz 1 -23
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day23-part1.scm :noweb no-export
:END:

The following is based on the code from Day 18, part 1.

#+BEGIN_SRC scheme
<<src-day23-common-header>>

(define-record-type <program> %make-program #t
  (registers       %program-registers)
  (code-lines      %program-code-lines)
  (mul-freq        program-mul-freq program-mul-freq-set!))

(define (make-program lines)
   (%make-program (make-s64vector 8) (list->vector (map compile-line lines)) 0))

(define (run-program prog)
  (let loop ((ip 0) (idx 0))
    (if (or (< ip 0) (>= ip (vector-length (%program-code-lines prog)))
            (> idx 100000000000))
        (format #f "term [~2d] -- reg:~a; **mul:~a**~%"
                idx (%program-registers prog) (program-mul-freq prog))
        (let* ((instr (vector-ref (%program-code-lines prog) ip))
               (offset (instr prog)))
          (loop (+ ip offset) (+ idx 1))))))

(define (get-value prog r-or-n)
  (if (integer? r-or-n)
      r-or-n
      (if (char<=? #\a (string-ref r-or-n 0) #\z)
          (register prog r-or-n)
          (string->number r-or-n))))

(define (reg->idx reg)
  (- (char->integer (string-ref reg 0)) (char->integer #\a)))

(define (register prog reg)
  (s64vector-ref (%program-registers prog) (reg->idx reg)))

(define (register! prog reg r-or-n)
  (s64vector-set! (%program-registers prog) (reg->idx reg) (get-value prog r-or-n)))

(define (instruction-snd prog x-r-or-n)
  (program-snd-freq-set! prog (get-value prog x-r-or-n))
  1)

(define (instruction-set prog x-reg y-r-or-n)
  (register! prog x-reg y-r-or-n)
  1)

(define (instruction-sub prog x-reg y-r-or-n)
  (register! prog x-reg (- (register prog x-reg) (get-value prog y-r-or-n)))
  1)

(define (instruction-mul prog x-reg y-r-or-n)
  (program-mul-freq-set! prog (+ (program-mul-freq prog) 1))
  (register! prog x-reg (* (register prog x-reg) (get-value prog y-r-or-n)))
  1)

(define (instruction-jnz prog x-r-or-n y-r-or-n)
  (if (zero? (get-value prog x-r-or-n))
      1
      (get-value prog y-r-or-n)))

(define (compile-line line)
  (match (split-words line)
    (("set" x-reg y-r-or-n)    (lambda (prog) (instruction-set prog x-reg y-r-or-n)))
    (("sub" x-reg y-r-or-n)    (lambda (prog) (instruction-sub prog x-reg y-r-or-n)))
    (("mul" x-reg y-r-or-n)    (lambda (prog) (instruction-mul prog x-reg y-r-or-n)))
    (("jnz" x-r-or-n y-r-or-n) (lambda (prog) (instruction-jnz prog x-r-or-n y-r-or-n)))))

(define (process-infile infile unused)
  (let ((prog (make-program (split-lines (load-txt infile)))))
    (run-program prog)))

<<src-day23-common-main>>
#+END_SRC

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day23-part1

tangled/day23-part1.scm: tangled/day23-puzzle.txt (ex: #f) -> term [32081] -- reg:#s64(0 65 65 65 65 0 0 1); **mul:3969**
#+END_EXAMPLE

*** Day 23, Part 2

**** Data

Started to naively run the program also for the puzzle with some output after any 100.000 rounds - with no end in sight.
So instead of starting even to optimize the interpretation, I converted the assembly to C. First step was allowing
comments in the program:

#+begin_src txt :tangle tangled/day23-puzzle-commented.txt
set b 65
set c b
jnz a 2
jnz 1 5
;; start part 2 specific code section
mul b 100       ; IP=4
sub b -100000   ; b: (- (* 65 100) -100000) -> 106500
set c b
sub c -17000    ; c: (- 106500 -17000) -> 123500; IP=7
;; end part 2 specific code section
;;
;; loop 0 start: 8..31
set f 1         ; IP=8
set d 2
;; loop 2 start: 11..23
set e 2
;; loop 1 start: 11..19
set g d         ; IP=11
mul g e
sub g b
jnz g 2
set f 0
sub e -1
set g e
sub g b
;; loop 1 end
jnz g -8        ; IP=19
sub d -1
set g d
sub g b
;; loop 2 end
jnz g -13       ; IP=23
jnz f 2
sub h -1
set g b
sub g c
jnz g 2
jnz 1 3
sub b -17
jnz 1 -23       ; IP=31
#+end_src

The following C program is the first iteration of manually converting the printer assembly to C. Did only run it in
debug mode to check whether it has same results for =h= and for =cnt_mul=.

#+BEGIN_SRC shell
gcc tangled/day23-puzzle-naive-C.c && ./a.out
#+END_SRC

#+begin_src C :tangle tangled/day23-puzzle-naive-C.c
#include <stdio.h>

int main(int argc, char* argv[]) {
  long a = argc > 1 ? atoi(argv[1]) : 0; // 0: debug; 1: real run
  long b = 65;
  long c = b;
  long d = 0;
  long e = 0;
  long f = 0;
  long g = 0;
  long h = 0;
  size_t cnt_mul = 0;

#define PRINT_CPU(where)                                              \
        printf("%s:\t%ld, %ld, %ld, %ld, %ld, %ld, %ld, %ld; %lu\n",  \
                where, a, b, c, d, e, f, g, h, cnt_mul)

  if (a != 0) {
    b *= 100; cnt_mul++;
    b -= -100000;
    c = b;
    c -= -17000;
  }

loop_0:
  f = 1;
  d = 2;

loop_2:
  e = 2;

loop_1:
  PRINT_CPU("l1s");
  g = d; g *= e; cnt_mul++; g -= b;
  if (g == 0) f = 0;
  e -= -1;
  g = e;
  g -= b;
  if (g != 0) {
    PRINT_CPU("l1e");
    goto loop_1;
  }

  d -= -1;
  g = d;
  g -= b;
  if (g != 0) goto loop_2;

  if (f == 0) h -= -1;

  g = b;
  g -= c;
  if (g != 0) {
    b -= -17;
    goto loop_0;
  } else {
    PRINT_CPU("done");
    return 0;
  }
}
#+end_src

The following C program is the second iteration of manually converting the printer assembly to C. I also did run only
this one in debug mode.

#+BEGIN_SRC shell
gcc -O2 tangled/day23-puzzle-short-c.c && time ./a.out
#+END_SRC

#+begin_src C :tangle tangled/day23-puzzle-short-c.c
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char* argv[]) {
  long a = argc > 1 ? atoi(argv[1]) : 0; // 0: debug; 1: real run
  long b = 65;
  long c = b;
  long d = 0;
  long e = 0;
  long f = 0;
  long g = 0;
  long h = 0;
  size_t cnt_mul = 0;                   // just for comparison w/ the Scheme implementation

#define PRINT_CPU(where)                                        \
  printf("%s:\t%ld, %ld, %ld, %ld, %ld, %ld, %ld, %ld; %lu\n",  \
         where, a, b, c, d, e, f, g, h, cnt_mul)

  if (a != 0) {
    b = b * 100 + 100000; cnt_mul++;
    c = b + 17000;
  }

  for (;;) {
    f = 1;
    d = 2;
    do {
      e = 2;
      do {
        g = d * e - b; cnt_mul++;
        if (g == 0) f = 0;
        e++;
        g = e - b;
      } while (g != 0);
      d++;
      g = d - b;
    } while (g != 0);

    if (f == 0) h++;

    g = b - c;
    if (g == 0) break;
    b += 17;
  }
  PRINT_CPU("done");
}
#+end_src

The following C program is the third iteration of manually converting the printer assembly to C and this one was used to
solve the puzzle. Runtime and results are shown in the example block below.

#+begin_src C :tangle tangled/day23-puzzle-opt-C.c
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

#define PRINT_CPU(where)                                                        \
  printf("%s:\t%ld, %ld, %ld, (d:%ld), (e:%ld,) (f:%ld), (g:%ld), **%ld**; %lu\n",  \
         where, a, b, c, -1l, -1l, -1l, -1l, h, cnt_mul)

static size_t cnt_mul = 0;              // just for comparison w/ the Scheme implementation

static long debug_printer(long b, const long c) {
  long h = 0;
  for (;;) {
    long f = 1;
    for (long d = 2; d < b; d++) {
      for (long e = 2; e < b; e++) {
        if (d * e == b) f = 0;
        cnt_mul++;
      }
    }
    if (f == 0) h++;
    if (b == c) {
      return h;
    }
    b += 17;
  }
}

static long real_printer(long b, const long c) {
  long h = 0;
  for ( ; ; b += 17) {
    bool found = false;
    for (long d = 2; found == false && d < b; d++) {
      for (long e = 2; found == false && e < b; e++) {
        if (d * e == b) {
          h++;
          found = true;
        }
      }
    }
    if (b == c) {
      return h;
    }
  }
}

int main(int argc, char* argv[]) {
  const long a = argc > 1 ? atoi(argv[1]) : 0; // 0: debug; 1: real run
  if (a == 0) {
    const long b = 65;
    const long c = b;
    const long h = debug_printer(b, c);
    PRINT_CPU("debug/done");
    return h == 1 ? 0 : 1;
  } else {
    const long b = 65 * 100 + 100000; cnt_mul++;
    const long c = b + 17000;
    const long h = real_printer(b, c);
    PRINT_CPU("real/done");
    return 0;
  }
}
#+end_src

#+BEGIN_EXAMPLE
$ gcc -O2 tangled/day23-puzzle-opt-C.c && time ./a.out 1
real/done:	1, 106500, 123500, (d:-1), (e:-1,) (f:-1), (g:-1), **917**; 1
# => 917 was the correct answer

real	11m54.708s
user	11m54.356s
sys	0m0.164s
#+end_EXAMPLE

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day23-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day23-common-header>>

(define-record-type <program> %make-program #t
  (registers       %program-registers)
  (code-lines      %program-code-lines)
  (mul-freq        program-mul-freq program-mul-freq-set!))

(define (make-program lines debug?)
  (let* ((non-comment-lines (filter (lambda (line) (not (char=? (string-ref line 0) #\;))) lines))
         (prog (%make-program (make-s64vector 8)
                              (list->vector (map compile-line non-comment-lines))
                              0)))
    (unless debug?
      (register! prog "a" 1))           ; register a now start at 1
    prog))

(define (run-program prog debug?)
  (let loop ((ip 0) (idx 0))
    (if (or (< ip 0) (>= ip (vector-length (%program-code-lines prog))))
        (format #f "term [~2d; debug: ~a] -- ip: ~d; reg:~a; **mul:~a**; h-val:~a~%"
                idx (if debug? "on" "off")
                ip (%program-registers prog) (program-mul-freq prog) (register prog "h"))
        (let* ((instr (vector-ref (%program-code-lines prog) ip))
               (offset (instr prog)))
          (loop (+ ip offset) (+ idx 1))))))

(define (get-value prog r-or-n)
  (if (integer? r-or-n)
      r-or-n
      (if (char<=? #\a (string-ref r-or-n 0) #\z)
          (register prog r-or-n)
          (string->number r-or-n))))

(define (reg->idx reg)
  (- (char->integer (string-ref reg 0)) (char->integer #\a)))

(define (register prog reg)
  (s64vector-ref (%program-registers prog) (reg->idx reg)))

(define (register! prog reg r-or-n)
  (s64vector-set! (%program-registers prog) (reg->idx reg) (get-value prog r-or-n)))

(define (instruction-snd prog x-r-or-n)
  (program-snd-freq-set! prog (get-value prog x-r-or-n))
  1)

(define (instruction-set prog x-reg y-r-or-n)
  (register! prog x-reg y-r-or-n)
  1)

(define (instruction-sub prog x-reg y-r-or-n)
  (register! prog x-reg (- (register prog x-reg) (get-value prog y-r-or-n)))
  1)

(define (instruction-mul prog x-reg y-r-or-n)
  (program-mul-freq-set! prog (+ (program-mul-freq prog) 1))
  (register! prog x-reg (* (register prog x-reg) (get-value prog y-r-or-n)))
  1)

(define (instruction-jnz prog x-r-or-n y-r-or-n)
  (if (zero? (get-value prog x-r-or-n))
      1
      (get-value prog y-r-or-n)))

(define (compile-line line)
  (match (split-words (strip-comment line))
    (("set" x-reg y-r-or-n)    (lambda (prog) (instruction-set prog x-reg y-r-or-n)))
    (("sub" x-reg y-r-or-n)    (lambda (prog) (instruction-sub prog x-reg y-r-or-n)))
    (("mul" x-reg y-r-or-n)    (lambda (prog) (instruction-mul prog x-reg y-r-or-n)))
    (("jnz" x-r-or-n y-r-or-n) (lambda (prog) (instruction-jnz prog x-r-or-n y-r-or-n)))))

(define (process-infile infile debug?)
  (let ((prog (make-program (split-lines (load-txt infile)) debug?)))
    (run-program prog debug?)))

<<src-day23-common-main>>
#+END_SRC

** Day 24

*** Source, common parts

#+name: src-day24-common-header
#+begin_src scheme
<<src-dflt-uses>>

<<src-assert>>
<<src-txt-io>>

(define (split-words-by-slash line)
  (split-words-by line #\/))

(define (parse-components infile)
  (map
   (lambda (line)
     (match (split-words-by-slash line)
       ((port-1 port-2) (cons (string->number port-1) (string->number port-2)))))
   (split-lines (load-txt infile))))

(define (build-best-bridge components find-best-fn for-exercise?)

  (define (split-start-components)
    (let loop ((components components)
               (start-components '())
               (other-components '()))
      (if (null? components)
          (values start-components other-components)
          (let* ((candidate (car components))
                 (port-1 (car candidate))
                 (port-2 (cdr candidate)))
            (cond ((zero? port-1)
                   (loop (cdr components)
                         (cons candidate start-components)
                         other-components))
                  ((zero? port-2)
                   (loop (cdr components)
                         (cons (cons port-2 port-1) start-components)
                         other-components))
                  (else (loop (cdr components)
                              start-components
                              (cons candidate other-components))))))))

  (define (find-combinations start-components other-components)

    (define (split-succ-components pred-component other-components offset)
      (let ((pred-port-2 (cdr pred-component))) ; port-1 of pred is connected to its own predecessor
        (let loop ((idx 0)
                   (other-components other-components)
                   (previous-components '()))
          (if (null? other-components)
              (values #f offset #f #())
              (let* ((candidate (car other-components))
                     (candidate-port-1 (car candidate))
                     (candidate-port-2 (cdr candidate)))
                (cond ((and (>= idx offset) (= pred-port-2 candidate-port-1))
                       (values #t idx
                               candidate
                               (append previous-components (cdr other-components))))
                      ((and (>= idx offset) (= pred-port-2 candidate-port-2))
                       (values #t idx
                               (cons candidate-port-2 candidate-port-1)
                               (append previous-components (cdr other-components))))
                      (else (loop (+ idx 1)
                                  (cdr other-components)
                                  (cons candidate previous-components)))))))))

    (let ((bridges '()))

      (define (build-bridge bridge-so-far)
        (let loop ((offset 0)
                   (bridge-so-far bridge-so-far)
                   (other-components other-components))
          (if (null? other-components)
              (push! bridges bridge-so-far)
              (receive (found? %offset next-component %other-components)
                  (split-succ-components (car bridge-so-far) other-components offset)
                (if found?
                    (begin (loop 0
                                 (cons next-component bridge-so-far)
                                 %other-components)
                           (loop (+ %offset 1)
                                 bridge-so-far
                                 other-components))
                    (when (zero? %offset) ; don't eval bridge subsets
                      (push! bridges bridge-so-far)))))))

      (for-each
       (lambda (start) (build-bridge (list start)))
       start-components)
      bridges))

  (receive (start-combinations other-components)
      (split-start-components)
    (let ((valid-combinations (find-combinations start-combinations other-components)))
      (format #f "build-bridge -- all: ~a [~d] -> start: ~a [~d] / other: [~d] -> valid: [~d] => best: ~a"
                  components (length components)
                  start-combinations (length start-combinations)
                  (length other-components)
                  (length valid-combinations)
                  (find-best-fn valid-combinations)))))
#+end_src

#+name: src-day24-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a: ~a (ex: ~a) -> ~a~%"
                              (car args) infile for-exercise? (process-infile infile for-exercise?)))
     (cddr args)))
  0)
#+end_src

*** Day 24, Part 1

**** Data

#+begin_src txt :tangle tangled/day24-part1-exercise.txt
0/2
2/2
2/3
3/4
3/5
0/1
10/1
9/10
#+end_src

#+begin_src txt :tangle tangled/day24-puzzle.txt
48/5
25/10
35/49
34/41
35/35
47/35
34/46
47/23
28/8
27/21
40/11
22/50
48/42
38/17
50/33
13/13
22/33
17/29
50/0
20/47
28/0
42/4
46/22
19/35
17/22
33/37
47/7
35/20
8/36
24/34
6/7
7/43
45/37
21/31
37/26
16/5
11/14
7/23
2/23
3/25
20/20
18/20
19/34
25/46
41/24
0/33
3/7
49/38
47/22
44/15
24/21
10/35
6/21
14/50
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day24-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day24-common-header>>

(define (find-strongest-bridge bridges)

    (define (compute-strength bridge)
      (apply + (map (lambda (port) (+ (car port) (cdr port))) bridge)))

    (let loop ((bridges bridges)
               (best-strength -1)
               (best-bridge #f))
      (if (null? bridges)
          (cons best-strength best-bridge)
          (let* ((bridge (car bridges))
                 (strength (compute-strength bridge)))
            (if (> strength best-strength)
                (loop (cdr bridges)
                      strength
                      bridge)
                (loop (cdr bridges)
                      best-strength
                      best-bridge))))))

(define (process-infile infile for-exercise?)
  (build-best-bridge (parse-components infile) find-strongest-bridge for-exercise?))

<<src-day24-common-main>>
#+END_SRC

Some test invocations for the REPL:

#+BEGIN_EXAMPLE scheme
(find-combinations (list (cons 0 1)) (list (cons 1 2) (cons 1 3) (cons 2 4) (cons 3 5)))
(find-combinations (list (cons 0 1)) (list (cons 1 2) (cons 1 3) (cons 2 4) (cons 3 5) (cons 4 6) (cons 5 6) (cons 6 7)))

(split-succ-components (cons 0 1) (list (cons 1 2) (cons 1 3) (cons 2 4) (cons 3 5)) 0)

(compute-strength '((0 . 3) (3 . 7) (7 . 4))) ; => 24
(compute-strength '((10 . 9) (1 . 10) (0 . 1))) ; => 31

(power-set* '(a a b)) ; => (() (a) (b) (a a) (a b) (a a b))

(permutations '(a b c)) ; => ((a b c) (a c b) (b a c) (b c a) (c a b) (c b a))
;; also see: permutations-for-each
#+END_EXAMPLE

Results, for example and puzzle input (2nd try):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day24-part1

tangled/day24-part1-exercise.txt (ex: #t) -> build-bridge -- all: ((0 . 2) (2 . 2) (2 . 3) (3 . 4) (3 . 5) (0 . 1) (10 . 1) (9 . 10)) [8] -> start: ((0 . 1) (0 . 2)) [2] / other: [6] -> valid: [5]
  => best: (31 (10 . 9) (1 . 10) (0 . 1))

tangled/day24-puzzle.txt (ex: #f) -> build-bridge -- all: ((48 . 5) (25 . 10) (35 . 49) (34 . 41) (35 . 35) (47 . 35) (34 . 46) (47 . 23) (28 . 8) (27 . 21) (40 . 11) (22 . 50) (48 . 42) (38 . 17) (50 . 33) (13 . 13) (22 . 33) (17 . 29) (50 . 0) (20 . 47) (28 . 0) (42 . 4) (46 . 22) (19 . 35) (17 . 22) (33 . 37) (47 . 7) (35 . 20) (8 . 36) (24 . 34) (6 . 7) (7 . 43) (45 . 37) (21 . 31) (37 . 26) (16 . 5) (11 . 14) (7 . 23) (2 . 23) (3 . 25) (20 . 20) (18 . 20) (19 . 34) (25 . 46) (41 . 24) (0 . 33) (3 . 7) (49 . 38) (47 . 22) (44 . 15) (24 . 21) (10 . 35) (6 . 21) (14 . 50)) [54] -> start: ((0 . 33) (0 . 28) (0 . 50)) [3] / other: [51] -> valid: [307940]
  => best: (1656 (11 . 40) (14 . 11) (50 . 14) (33 . 50) (22 . 33) (17 . 22) (38 . 17) (49 . 38) (35 . 49) (19 . 35) (34 . 19) (41 . 34) (24 . 41) (34 . 24) (46 . 34) (25 . 46) (10 . 25) (35 . 10) (35 . 35) (20 . 35) (20 . 20) (47 . 20) (7 . 47) (23 . 7) (47 . 23) (22 . 47) (50 . 22) (0 . 50))
#+END_EXAMPLE

*** Day 24, Part 2

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day24-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day24-common-header>>

(define (find-strongest-longest-bridge bridges)

    (define (compute-strength bridge)
      (apply + (map (lambda (port) (+ (car port) (cdr port))) bridge)))

    (let loop ((bridges bridges)
               (best-length -1)
               (best-strength -1)
               (best-bridge #f))
      (if (null? bridges)
          (list best-strength best-length best-bridge)
          (let* ((curr-bridge (car bridges))
                 (curr-length (length curr-bridge))
                 (curr-strength (compute-strength curr-bridge)))
            (if (or (> curr-length best-length)
                    (and (= curr-length best-length)       ; If you can make multiple bridges of the ...
                         (> curr-strength best-strength))) ; ... longest length, pick the strongest one.
                (loop (cdr bridges)
                      curr-length
                      curr-strength
                      curr-bridge)
                (loop (cdr bridges)
                      best-length
                      best-strength
                      best-bridge))))))

(define (process-infile infile for-exercise?)
  (build-best-bridge (parse-components infile) find-strongest-longest-bridge for-exercise?))

<<src-day24-common-main>>
#+END_SRC

Results, for example and puzzle input (2nd try):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day24-part2

tangled/day24-part1-exercise.txt (ex: #t) -> build-bridge -- all: ((0 . 2) (2 . 2) (2 . 3) (3 . 4) (3 . 5) (0 . 1) (10 . 1) (9 . 10)) [8] -> start: ((0 . 1) (0 . 2)) [2] / other: [6] -> valid: [5]
  => best: (19 4 ((3 . 5) (2 . 3) (2 . 2) (0 . 2)))

tangled/day24-puzzle.txt (ex: #f) -> build-bridge -- all: ((48 . 5) (25 . 10) (35 . 49) (34 . 41) (35 . 35) (47 . 35) (34 . 46) (47 . 23) (28 . 8) (27 . 21) (40 . 11) (22 . 50) (48 . 42) (38 . 17) (50 . 33) (13 . 13) (22 . 33) (17 . 29) (50 . 0) (20 . 47) (28 . 0) (42 . 4) (46 . 22) (19 . 35) (17 . 22) (33 . 37) (47 . 7) (35 . 20) (8 . 36) (24 . 34) (6 . 7) (7 . 43) (45 . 37) (21 . 31) (37 . 26) (16 . 5) (11 . 14) (7 . 23) (2 . 23) (3 . 25) (20 . 20) (18 . 20) (19 . 34) (25 . 46) (41 . 24) (0 . 33) (3 . 7) (49 . 38) (47 . 22) (44 . 15) (24 . 21) (10 . 35) (6 . 21) (14 . 50)) [54] -> start: ((0 . 33) (0 . 28) (0 . 50)) [3] / other: [51] -> valid: [307940]
  => best: (1642 30 ((11 . 40) (14 . 11) (50 . 14) (33 . 50) (22 . 33) (46 . 22) (25 . 46) (3 . 25) (7 . 3) (23 . 7) (47 . 23) (35 . 47) (35 . 35) (19 . 35) (34 . 19) (41 . 34) (24 . 41) (21 . 24) (6 . 21) (7 . 6) (47 . 7) (20 . 47) (20 . 20) (35 . 20) (49 . 35) (38 . 49) (17 . 38) (22 . 17) (50 . 22) (0 . 50)))
#+END_EXAMPLE

** Day 25

*** Source, common parts

#+name: src-day25-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>
#+end_src

#+name: src-day25-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a (ex: ~a) -> ~a~%" infile for-exercise? (process-infile infile (if for-exercise? 6 100000))))
     (cddr args)))
  0)
#+end_src

*** Day 25, Part 1

**** Data

#+begin_src txt :tangle tangled/day25-part1-exercise.txt
Begin in state A.
Perform a diagnostic checksum after 6 steps.

In state A:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state B.
  If the current value is 1:
    - Write the value 0.
    - Move one slot to the left.
    - Continue with state B.

In state B:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the left.
    - Continue with state A.
  If the current value is 1:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state A.
#+end_src

#+begin_src txt :tangle tangled/day25-puzzle.txt
Begin in state A.
Perform a diagnostic checksum after 12919244 steps.

In state A:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state B.
  If the current value is 1:
    - Write the value 0.
    - Move one slot to the left.
    - Continue with state C.

In state B:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the left.
    - Continue with state A.
  If the current value is 1:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state D.

In state C:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state A.
  If the current value is 1:
    - Write the value 0.
    - Move one slot to the left.
    - Continue with state E.

In state D:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state A.
  If the current value is 1:
    - Write the value 0.
    - Move one slot to the right.
    - Continue with state B.

In state E:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the left.
    - Continue with state F.
  If the current value is 1:
    - Write the value 1.
    - Move one slot to the left.
    - Continue with state C.

In state F:
  If the current value is 0:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state D.
  If the current value is 1:
    - Write the value 1.
    - Move one slot to the right.
    - Continue with state A.
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/day25-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-day25-common-header>>

(use gauche.dictionary)
(use data.imap)

(define-record-type <tm> %make-tm #t
  (state    tm-state     tm-state-set!)
  (nb-steps tm-nb-steps)
  (tape     tm-tape)
  (cursor   tm-cursor    tm-cursor-set!)
  (actions  tm-actions))

(define (make-tm nb-tape-slots init-state nb-steps action-defs)

  (define (convert-actions action-defs)
    (alist->imap
     (map
      (lambda (action-def)
        (cons (cons (car action-def) (cadr action-def)) (cddr action-def)))
      action-defs)))

  (let ((tm (%make-tm init-state nb-steps
                      (make-vector nb-tape-slots 0) (/ nb-tape-slots 2)
                      (convert-actions action-defs))))
    tm))

(define-method write-object ((self <tm>) port)
  (format port "#<tm ~a/~d: ~a [~d]~%~a~%>"
          (tm-state self) (tm-nb-steps self)
          (tm-tape self) (tm-cursor self)
          (dict-map (tm-actions self) (lambda (k v) (format #f "~a=~a;" k v)))))

(define (run-tm tm)

  (define (count-ones tape)
    (apply + (vector->list tape)))

  (let loop ((step-idx 0))
    (if (= step-idx (tm-nb-steps tm))
        (count-ones (tm-tape tm))
        (let* ((state (tm-state tm))
               (cursor (tm-cursor tm))
               (cursor-value (vector-ref (tm-tape tm) cursor))
               (action (imap-get (tm-actions tm) (cons state cursor-value)))
               (new-value (car action))
               (new-cursor (+ cursor (cadr action)))
               (new-state (caddr action)))
          (vector-set! (tm-tape tm) cursor new-value)
          (tm-cursor-set! tm new-cursor)
          (tm-state-set! tm new-state)
          (loop (+ step-idx 1))))))

(define (parse-infile infile nb-tape-slots)
  (let ((init-state #f)
        (nb-steps #f)
        (curr-state #f)
        (curr-value #f)
        (action-value #f)
        (action-move #f)
        (action-defs '()))
    (for-each-with-index
     (lambda (line-idx line)
       (rxmatch-case line
                     (#/Begin in state (\w+)\./ (#f %init-state) (set! init-state %init-state))
                     (#/Perform a diagnostic checksum after (\d+) steps\./ (#f %nb-steps) (set! nb-steps (string->number %nb-steps)))
                     (#/In state (\w+):/ (#f %curr-state) (set! curr-state %curr-state))
                     (#/If the current value is (\d+):/ (#f %curr-value) (set! curr-value (string->number %curr-value)))
                     (#/Write the value (\d+)\./ (#f %action-value) (set! action-value (string->number %action-value)))
                     (#/Move one slot to the (left|right)\./ (#f %move-dir) (set! action-move (if (string=? %move-dir "left") -1 1)))
                     (#/Continue with state (\w+)\./ (#f %action-state) (push! action-defs (list curr-state curr-value action-value action-move %action-state)))
                     (else (print 'else line-idx line))))
     (filter (lambda (line) (positive? (string-length line))) (split-lines (load-txt infile))))
    (make-tm nb-tape-slots init-state nb-steps (reverse action-defs))))

(define (process-infile infile nb-tape-slots)
  (let ((tm (parse-infile infile nb-tape-slots)))
    (run-tm tm)))

<<src-day25-common-main>>
#+END_SRC

Results, for example and puzzle input (1st try):

#+BEGIN_EXAMPLE
$ make -f tangled/Makefile day25-part1

tangled/day25-part1-exercise.txt (ex: #t) -> 3

tangled/day25-puzzle.txt (ex: #f) -> 4287
126.25user 0.44system 1:46.82elapsed 118%CPU (0avgtext+0avgdata 29992maxresident)k
0inputs+0outputs (0major+6074minor)pagefaults 0swaps
#+END_EXAMPLE

* Template

** Day NNN

*** Source, common parts

#+name: src-dayNNN-common-header
#+begin_src scheme
<<src-dflt-uses>>
<<src-assert>>
<<src-txt-io>>
#+end_src

#+name: src-dayNNN-common-main
#+begin_src scheme
(define (main args)
  (let ((for-exercise? (string=? (cadr args) "ex")))
    (for-each
     (lambda (infile) (format #t "~a (ex: ~a) -> ~a~%" infile for-exercise? (process-infile infile)))
     (cddr args)))
  0)
#+end_src

*** Day NNN, Part 1

**** Data

#+begin_src txt :tangle tangled/dayNNN-part1-exercise.txt
#+end_src

#+begin_src txt :tangle tangled/dayNNN-puzzle.txt
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/dayNNN-part1.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-dayNNN-common-header>>

(define (process-infile infile)
  (split-lines (load-txt infile)))

<<src-dayNNN-common-main>>
#+END_SRC

*** Day NNN, Part 2

**** Data

#+begin_src txt :tangle tangled/dayNNN-part2-exercise.txt
#+end_src

**** Source
:PROPERTIES:
:header-args:scheme: :tangle tangled/dayNNN-part2.scm :noweb no-export
:END:

#+BEGIN_SRC scheme
<<src-dayNNN-common-header>>

(define (process-infile infile)
  (split-lines (load-txt infile)))

<<src-dayNNN-common-main>>
#+END_SRC
